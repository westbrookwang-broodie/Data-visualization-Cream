"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVDirectiveKeyV6 = exports.getArgument = exports.isVBind = exports.isVDirective = exports.findAttribute = exports.isTransitionGroupElement = exports.isTransitionElement = exports.isVElement = exports.getElements = void 0;
function getElements(context, predicate) {
    const node = context.getSourceCode().ast;
    const body = node.templateBody;
    if (!body) {
        return [];
    }
    return [...iterate(body)];
    function* iterate(element) {
        if (predicate(element)) {
            yield element;
        }
        for (const child of element.children) {
            if (isVElement(child)) {
                yield* iterate(child);
            }
        }
    }
}
exports.getElements = getElements;
function isVElement(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === "VElement";
}
exports.isVElement = isVElement;
function isTransitionElement(element) {
    return (element.type === "VElement" &&
        (element.name === "transition" || element.rawName === "Transition"));
}
exports.isTransitionElement = isTransitionElement;
function isTransitionGroupElement(element) {
    return (element.type === "VElement" &&
        (element.name === "transition-group" ||
            element.rawName === "TransitionGroup"));
}
exports.isTransitionGroupElement = isTransitionGroupElement;
function findAttribute(node, name) {
    if (node.type === "VElement") {
        return findAttribute(node.startTag, name);
    }
    return (node.attributes.find((attr) => {
        if (isVDirective(attr)) {
            if (isVBind(attr.key)) {
                return getArgument(attr.key) === name;
            }
        }
        else {
            return attr.key.name === name;
        }
        return false;
    }) || null);
}
exports.findAttribute = findAttribute;
function isVDirective(node) {
    return node.type === "VAttribute" && node.directive;
}
exports.isVDirective = isVDirective;
function isVBind(key) {
    if (isVDirectiveKeyV6(key)) {
        if (key.name.name !== "bind") {
            return false;
        }
        return true;
    }
    if (key.name !== "bind") {
        return false;
    }
    return true;
}
exports.isVBind = isVBind;
function getArgument(key) {
    if (isVDirectiveKeyV6(key)) {
        const argument = key.argument;
        if (argument == null) {
            return null;
        }
        if (argument.type === "VExpressionContainer") {
            return null;
        }
        if (argument.type === "VIdentifier") {
            return argument.name;
        }
        return null;
    }
    const argument = key.argument;
    if (argument == null) {
        return null;
    }
    if (/^\[.*\]$/u.test(argument)) {
        return null;
    }
    return argument || "";
}
exports.getArgument = getArgument;
function isVDirectiveKeyV6(node) {
    return typeof node.name !== "string";
}
exports.isVDirectiveKeyV6 = isVDirectiveKeyV6;
