"use strict";
const context_1 = require("../styles/context");
const selectors_1 = require("../styles/utils/selectors");
module.exports = {
    meta: {
        docs: {
            description: "enforce `:deep()`/`::v-deep()` style",
            categories: [],
            default: "warn",
            url: "https://future-architect.github.io/eslint-plugin-vue-scoped-css/rules/v-deep-pseudo-style.html",
        },
        fixable: "code",
        messages: {
            expectedDeep: "Expected ':deep()' instead of '::v-deep()'.",
            expectedVDeep: "Expected '::v-deep()' instead of ':deep()'.",
        },
        schema: [{ enum: [":deep", "::v-deep"] }],
        type: "suggestion",
    },
    create(context) {
        const styles = (0, context_1.getStyleContexts)(context)
            .filter(context_1.isValidStyleContext)
            .filter((style) => style.scoped);
        if (!styles.length) {
            return {};
        }
        const expected = (context.options[0] || ":deep");
        const reporter = (0, context_1.getCommentDirectivesReporter)(context);
        function report(node) {
            reporter.report({
                node,
                loc: node.loc,
                messageId: expected === ":deep" ? "expectedDeep" : "expectedVDeep",
                fix(fixer) {
                    const nodeText = context.getSourceCode().text.slice(...node.range);
                    return fixer.replaceTextRange(node.range, nodeText.replace(/^(\s*)(?::deep|::v-deep)(\s*\()/u, (_, prefix, suffix) => `${prefix}${expected}${suffix}`));
                },
            });
        }
        function verifyNode(node) {
            if (node.value === expected) {
                return;
            }
            report(node);
        }
        function verify(style) {
            style.traverseSelectorNodes({
                enterNode(node) {
                    if ((0, selectors_1.isVDeepPseudo)(node) && !(0, selectors_1.isPseudoEmptyArguments)(node)) {
                        verifyNode(node);
                    }
                },
            });
        }
        return {
            "Program:exit"() {
                for (const style of styles) {
                    verify(style);
                }
            },
        };
    },
};
