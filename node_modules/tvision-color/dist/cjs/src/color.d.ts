import { IntelligentOption, IntelligentGradationOption, ColorGradationOption } from './intelligent';
import type { ColorType, ColorFormat } from './type';
type ColorTransformFunc = <T extends ColorFormat>(color: ColorType, from: (ColorFormat | 'name'), to: T) => T extends 'hex' ? string : number[];
export declare class Color {
    static color2arr(color: string): number[];
    static colorTransform: ColorTransformFunc;
    static similar(color1: string, color2: string): number;
    static contrast(color1: string, color2: string): number;
    static scale(color1: string, color2: string, number: number): string[];
    static sortColorsByComplementary(colors: string[], color: string): string[];
    static sortColorsByDEThreshold(colors: string[], color: string): string[];
    static getRandomPalette(option: IntelligentOption): string[];
    static getPaletteByGradation(option: IntelligentGradationOption): string[][];
    static getRandomPaletteByGradation(option: IntelligentGradationOption): string[][];
    static getColorGradations(option: ColorGradationOption): {
        colors: string[];
        primary: number;
    }[];
    static getNeutralColorGradation(color: string): string[];
    static getNeutralColor(color: string): string[];
}
export {};
