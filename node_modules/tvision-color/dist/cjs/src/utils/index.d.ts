import { ColorArrayType } from '../type';
declare function labToRgb(lab: ColorArrayType): number[];
declare function rgbToLab(rgb: ColorArrayType): number[];
declare function validateRgb(rgb: ColorArrayType): boolean;
declare function labToRgbHex(lab: ColorArrayType): string;
declare function labToHcl(lab: ColorArrayType): number[];
declare function diffSort(distance: any, colors: ColorArrayType[]): (ColorArrayType | undefined)[];
declare function distance(lab1: ColorArrayType, lab2: ColorArrayType): number;
declare function contrast(rgbA: ColorArrayType, rgbB: ColorArrayType): number;
declare const exportObj: {
    validateRgb: typeof validateRgb;
    labToRgb: typeof labToRgb;
    labToRgbHex: typeof labToRgbHex;
    rgbToLab: typeof rgbToLab;
    labToHcl: typeof labToHcl;
    diffSort: typeof diffSort;
    distance: typeof distance;
    contrast: typeof contrast;
    sortColorsByComplementary: (colors: string[], color: string) => string[];
    sortColorsByDEThreshold: (colors: string[], color: string) => string[];
    generateLockedColor: (color: string) => [number, number, number];
    getW3RelativeLuminance: (rgbColor: ColorArrayType, sRGB?: boolean) => number;
    sRGBDecode: (rgbColor: ColorArrayType, scaled?: boolean) => number[];
};
export default exportObj;
