import { TdStickyToolProps, TdStickyItemProps } from './type';
import './style';
export * from './type';
export declare type StickyToolProps = TdStickyToolProps;
export declare type StickyItemProps = TdStickyItemProps;
export declare const StickyItem: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "normal" | "compact";
            shape: "square" | "round";
            trigger: "click" | "hover";
            placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            type: {
                type: import("vue").PropType<"normal" | "compact">;
                default: "normal" | "compact";
                validator(val: "normal" | "compact"): boolean;
            };
            shape: {
                type: import("vue").PropType<"square" | "round">;
                default: "square" | "round";
                validator(val: "square" | "round"): boolean;
            };
            placement: {
                type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
                default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
                validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
            };
            basePopupProps: ObjectConstructor;
            baseWidth: {
                type: import("vue").PropType<string | number>;
            };
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
            onHover: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            popup: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover">;
                default: "click" | "hover";
                validator(val: "click" | "hover"): boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "shape" | "trigger" | "placement">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            type: {
                type: import("vue").PropType<"normal" | "compact">;
                default: "normal" | "compact";
                validator(val: "normal" | "compact"): boolean;
            };
            shape: {
                type: import("vue").PropType<"square" | "round">;
                default: "square" | "round";
                validator(val: "square" | "round"): boolean;
            };
            placement: {
                type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
                default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
                validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
            };
            basePopupProps: ObjectConstructor;
            baseWidth: {
                type: import("vue").PropType<string | number>;
            };
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
            onHover: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            popup: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover">;
                default: "click" | "hover";
                validator(val: "click" | "hover"): boolean;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            type: "normal" | "compact";
            shape: "square" | "round";
            trigger: "click" | "hover";
            placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        basePopupProps: ObjectConstructor;
        baseWidth: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popup: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: import("vue").PropType<"normal" | "compact">;
        default: "normal" | "compact";
        validator(val: "normal" | "compact"): boolean;
    };
    shape: {
        type: import("vue").PropType<"square" | "round">;
        default: "square" | "round";
        validator(val: "square" | "round"): boolean;
    };
    placement: {
        type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
        default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
    };
    basePopupProps: ObjectConstructor;
    baseWidth: {
        type: import("vue").PropType<string | number>;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    onHover: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popup: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "normal" | "compact";
    shape: "square" | "round";
    trigger: "click" | "hover";
    placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin<any[]>;
export declare const StickyTool: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "normal" | "compact";
            list: TdStickyItemProps[];
            shape: "square" | "round";
            placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            list: {
                type: import("vue").PropType<TdStickyItemProps[]>;
                default: () => TdStickyItemProps[];
            };
            offset: {
                type: import("vue").PropType<(string | number)[]>;
            };
            placement: {
                type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
                default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
                validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            shape: {
                type: import("vue").PropType<"square" | "round">;
                default: "square" | "round";
                validator(val: "square" | "round"): boolean;
            };
            type: {
                type: import("vue").PropType<"normal" | "compact">;
                default: "normal" | "compact";
                validator(val: "normal" | "compact"): boolean;
            };
            width: {
                type: import("vue").PropType<string | number>;
            };
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
            onHover: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "list" | "shape" | "placement">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            list: {
                type: import("vue").PropType<TdStickyItemProps[]>;
                default: () => TdStickyItemProps[];
            };
            offset: {
                type: import("vue").PropType<(string | number)[]>;
            };
            placement: {
                type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
                default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
                validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            shape: {
                type: import("vue").PropType<"square" | "round">;
                default: "square" | "round";
                validator(val: "square" | "round"): boolean;
            };
            type: {
                type: import("vue").PropType<"normal" | "compact">;
                default: "normal" | "compact";
                validator(val: "normal" | "compact"): boolean;
            };
            width: {
                type: import("vue").PropType<string | number>;
            };
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
            onHover: import("vue").PropType<(context: {
                e: MouseEvent;
                item: TdStickyItemProps;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            type: "normal" | "compact";
            list: TdStickyItemProps[];
            shape: "square" | "round";
            placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        list: {
            type: import("vue").PropType<TdStickyItemProps[]>;
            default: () => TdStickyItemProps[];
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        width: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    list: {
        type: import("vue").PropType<TdStickyItemProps[]>;
        default: () => TdStickyItemProps[];
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    placement: {
        type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
        default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round">;
        default: "square" | "round";
        validator(val: "square" | "round"): boolean;
    };
    type: {
        type: import("vue").PropType<"normal" | "compact">;
        default: "normal" | "compact";
        validator(val: "normal" | "compact"): boolean;
    };
    width: {
        type: import("vue").PropType<string | number>;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    onHover: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "normal" | "compact";
    list: TdStickyItemProps[];
    shape: "square" | "round";
    placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin<any[]>;
export default StickyTool;
