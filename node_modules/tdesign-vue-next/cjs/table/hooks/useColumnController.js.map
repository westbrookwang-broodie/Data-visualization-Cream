{"version":3,"file":"useColumnController.js","sources":["../../../src/table/hooks/useColumnController.tsx"],"sourcesContent":["/**\n * 自定义显示列控制器，即列配置\n */\nimport { computed, ref, SetupContext, toRefs, watch } from 'vue';\nimport { SettingIcon as TdSettingIcon } from 'tdesign-icons-vue-next';\n\nimport intersection from 'lodash/intersection';\nimport Checkbox, {\n  CheckboxGroup,\n  CheckboxGroupValue,\n  CheckboxOptionObj,\n  CheckboxGroupChangeContext,\n} from '../../checkbox';\nimport { DialogPlugin } from '../../dialog/plugin';\nimport { renderTitle } from './useTableHeader';\nimport { PrimaryTableCol, TdPrimaryTableProps } from '../type';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { getCurrentRowByKey } from '../utils';\nimport { DialogInstance } from '../../dialog';\nimport TButton from '../../button';\n\nexport function getColumnKeys(columns: PrimaryTableCol[], keys = new Set<string>()) {\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    col.colKey && keys.add(col.colKey);\n    if (col.children?.length) {\n      getColumnKeys(col.children, keys);\n    }\n  }\n  return keys;\n}\n\nexport default function useColumnController(props: TdPrimaryTableProps, context: SetupContext) {\n  const { classPrefix, globalConfig } = useConfig('table');\n  const { SettingIcon } = useGlobalIcon({ SettingIcon: TdSettingIcon });\n  const { columns, columnController, displayColumns, columnControllerVisible } = toRefs(props);\n  const dialogInstance = ref<DialogInstance>(null);\n\n  const enabledColKeys = computed(() => {\n    const arr = (columnController.value?.fields || [...getColumnKeys(columns.value)] || []).filter((v) => v);\n    return new Set(arr);\n  });\n\n  const keys = [...getColumnKeys(columns.value)];\n\n  // 确认后的列配置\n  const [tDisplayColumns, setTDisplayColumns] = useDefaultValue(\n    displayColumns,\n    props.defaultDisplayColumns || keys,\n    props.onDisplayColumnsChange,\n    'displayColumns',\n  );\n  // 弹框内的多选\n  const columnCheckboxKeys = ref<CheckboxGroupValue>(displayColumns.value || props.defaultDisplayColumns || keys);\n\n  const checkboxOptions = computed<CheckboxOptionObj[]>(() => getCheckboxOptions(columns.value));\n\n  const intersectionChecked = computed(() => intersection(columnCheckboxKeys.value, [...enabledColKeys.value]));\n\n  watch([displayColumns], ([val]) => {\n    columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;\n  });\n\n  function getCheckboxOptions(columns: PrimaryTableCol[], arr: CheckboxOptionObj[] = []) {\n    // 减少循环次数\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const item = columns[i];\n      if (item.colKey) {\n        arr.push({\n          label: () => renderTitle(context.slots, item, i),\n          value: item.colKey,\n          disabled: !enabledColKeys.value.has(item.colKey),\n        });\n      }\n      if (item.children?.length) {\n        getCheckboxOptions(item.children, arr);\n      }\n    }\n    return arr;\n  }\n\n  const handleCheckChange = (val: CheckboxGroupValue, ctx: CheckboxGroupChangeContext) => {\n    columnCheckboxKeys.value = val;\n    const params = {\n      columns: val,\n      type: ctx.type,\n      currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),\n      e: ctx.e,\n    };\n    props.onColumnChange?.(params);\n  };\n\n  const handleClickAllShowColumns = (checked: boolean, ctx: { e: Event }) => {\n    if (checked) {\n      const newData = checkboxOptions.value?.map((t) => t.value) || [];\n      columnCheckboxKeys.value = newData;\n      props.onColumnChange?.({ type: 'check', columns: newData, e: ctx.e });\n    } else {\n      const disabledColKeys = checkboxOptions.value.filter((t) => t.disabled).map((t) => t.value);\n      columnCheckboxKeys.value = disabledColKeys;\n      props.onColumnChange?.({ type: 'uncheck', columns: disabledColKeys, e: ctx.e });\n    }\n  };\n\n  const handleToggleColumnController = () => {\n    dialogInstance.value = DialogPlugin.confirm({\n      header: globalConfig.value.columnConfigTitleText,\n      body: () => {\n        const widthMode = columnController.value?.displayType === 'fixed-width' ? 'fixed' : 'auto';\n        const checkedLength = intersectionChecked.value.length;\n        const isCheckedAll = checkedLength === enabledColKeys.value.size;\n        const isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;\n        const defaultNode = (\n          <div\n            class={[\n              `${classPrefix.value}-table__column-controller`,\n              `${classPrefix.value}-table__column-controller--${widthMode}`,\n            ]}\n          >\n            <div class={`${classPrefix.value}-table__column-controller-body`}>\n              {/* 请选择需要在表格中显示的数据列 */}\n              <p class={`${classPrefix.value}-table__column-controller-desc`}>\n                {globalConfig.value.columnConfigDescriptionText}\n              </p>\n              <div class={`${classPrefix.value}-table__column-controller-block`}>\n                <Checkbox indeterminate={isIndeterminate} checked={isCheckedAll} onChange={handleClickAllShowColumns}>\n                  {globalConfig.value.selectAllText}\n                </Checkbox>\n              </div>\n              <div class={`${classPrefix.value}-table__column-controller-block`}>\n                <CheckboxGroup\n                  options={checkboxOptions.value}\n                  {...(columnController.value?.checkboxProps || {})}\n                  value={columnCheckboxKeys.value}\n                  onChange={handleCheckChange}\n                />\n              </div>\n            </div>\n          </div>\n        );\n        return defaultNode;\n      },\n      confirmBtn: globalConfig.value.confirmText,\n      cancelBtn: globalConfig.value.cancelText,\n      width: 612,\n      onConfirm: () => {\n        setTDisplayColumns([...columnCheckboxKeys.value]);\n        // 此处逻辑不要随意改动，涉及到 内置列配置按钮 和 不包含列配置按钮等场景\n        if (columnControllerVisible.value === undefined) {\n          dialogInstance.value.hide();\n        } else {\n          props.onColumnControllerVisibleChange?.(false, { trigger: 'cancel' });\n          context.emit('update:columnControllerVisible', false);\n        }\n      },\n      onClose: () => {\n        // 此处逻辑不要随意改动，涉及到 内置列配置按钮 和 不包含列配置按钮等场景\n        if (columnControllerVisible.value === undefined) {\n          dialogInstance.value.hide();\n        } else {\n          props.onColumnControllerVisibleChange?.(false, { trigger: 'confirm' });\n          context.emit('update:columnControllerVisible', false);\n        }\n      },\n      ...(columnController.value?.dialogProps || {}),\n    });\n  };\n\n  // columnControllerVisible 一般应用于不包含列配置按钮的场景，有外部直接控制弹框的显示或隐藏\n  watch(\n    [columnControllerVisible],\n    ([visible]) => {\n      if (visible === undefined) return;\n      if (dialogInstance.value) {\n        visible ? dialogInstance.value.show() : dialogInstance.value.hide();\n      } else {\n        visible && handleToggleColumnController();\n      }\n    },\n    { immediate: true },\n  );\n\n  const renderColumnController = () => {\n    const isColumnController = !!(columnController.value && Object.keys(columnController.value).length);\n    const placement = isColumnController ? columnController.value.placement || 'top-right' : '';\n    if (isColumnController && columnController.value.hideTriggerButton) return null;\n    const classes = [\n      `${classPrefix.value}-table__column-controller-trigger`,\n      { [`${classPrefix.value}-align-${placement}`]: !!placement },\n    ];\n    return (\n      <div class={classes}>\n        <TButton\n          theme=\"default\"\n          variant=\"outline\"\n          onClick={handleToggleColumnController}\n          content={globalConfig.value.columnConfigButtonText}\n          v-slots={{\n            icon: () => <SettingIcon />,\n          }}\n          {...props.columnController?.buttonProps}\n        ></TButton>\n      </div>\n    );\n  };\n\n  return {\n    tDisplayColumns,\n    columnCheckboxKeys,\n    checkboxOptions,\n    renderColumnController,\n  };\n}\n"],"names":["getColumnKeys","columns","keys","arguments","length","undefined","Set","i","len","_col$children","col","colKey","add","children","useColumnController","props","context","_useConfig","useConfig","classPrefix","globalConfig","_useGlobalIcon","useGlobalIcon","SettingIcon","TdSettingIcon","_toRefs","toRefs","columnController","displayColumns","columnControllerVisible","dialogInstance","ref","enabledColKeys","computed","_columnController$val","arr","value","fields","_toConsumableArray","filter","v","_useDefaultValue","useDefaultValue","defaultDisplayColumns","onDisplayColumnsChange","_useDefaultValue2","_slicedToArray","tDisplayColumns","setTDisplayColumns","columnCheckboxKeys","checkboxOptions","getCheckboxOptions","intersectionChecked","intersection","watch","_ref","_ref2","val","_loop","_item$children","item","push","label","renderTitle","slots","disabled","has","handleCheckChange","ctx","_props$onColumnChange","params","type","currentColumn","getCurrentRowByKey","String","current","e","onColumnChange","call","handleClickAllShowColumns","checked","_checkboxOptions$valu","_props$onColumnChange2","newData","map","t","_props$onColumnChange3","disabledColKeys","handleToggleColumnController","_columnController$val4","DialogPlugin","confirm","_objectSpread","header","columnConfigTitleText","body","_columnController$val2","_columnController$val3","widthMode","displayType","checkedLength","isCheckedAll","size","isIndeterminate","defaultNode","_createVNode","concat","columnConfigDescriptionText","Checkbox","_default","selectAllText","CheckboxGroup","_mergeProps","checkboxProps","confirmBtn","confirmText","cancelBtn","cancelText","width","onConfirm","hide","_props$onColumnContro","onColumnControllerVisibleChange","trigger","emit","onClose","_props$onColumnContro2","dialogProps","_ref3","_ref4","visible","show","immediate","renderColumnController","_props$columnControll","isColumnController","Object","placement","hideTriggerButton","classes","_defineProperty","TButton","columnConfigButtonText","buttonProps","icon"],"mappings":"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"}