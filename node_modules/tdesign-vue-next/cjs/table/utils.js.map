{"version":3,"file":"utils.js","sources":["../../src/table/utils.ts"],"sourcesContent":["import isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport { CellData, RowClassNameParams, TableColumnClassName, TableRowData, TdBaseTableProps } from './type';\nimport { ClassName, HTMLElementAttributes } from '../common';\nimport { AffixProps } from '../affix';\n\nexport function toString(obj: any): string {\n  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();\n}\n\nexport function debounce<T = any>(fn: Function, delay = 200): () => void {\n  let timer: ReturnType<typeof setTimeout>;\n  return function newFn(this: T, ...args: Array<any>): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, delay);\n  };\n}\n\nexport interface FormatRowAttributesParams {\n  row: TableRowData;\n  rowIndex: number;\n  type: 'body' | 'foot';\n}\n\n// 行属性\nexport function formatRowAttributes(attributes: TdBaseTableProps['rowAttributes'], params: FormatRowAttributesParams) {\n  if (!attributes) return undefined;\n  const attrList = attributes instanceof Array ? attributes : [attributes];\n  let result: HTMLElementAttributes = {};\n  for (let i = 0; i < attrList.length; i++) {\n    const attrItem = attrList[i];\n    if (!attrItem) continue;\n    const attrProperty = isFunction(attrItem) ? attrItem(params) : attrItem;\n    result =\n      attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);\n  }\n  return result;\n}\n\n// 行类名，['A', 'B']，[() => 'A', () => 'B']\nexport function formatRowClassNames(\n  rowClassNames: TdBaseTableProps['rowClassName'],\n  params: RowClassNameParams<TableRowData>,\n  rowKey: string,\n) {\n  const rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];\n  const { row, rowIndex } = params;\n  // 自定义行类名\n  let customClasses: ClassName = [];\n  for (let i = 0, len = rowClassList.length; i < len; i++) {\n    const rName = rowClassList[i];\n    let tClass = isFunction(rName) ? rName(params) : rName;\n    if (isObject(tClass) && !(tClass instanceof Array)) {\n      // 根据下标设置行类名\n      tClass[rowIndex] && (tClass = tClass[rowIndex]);\n      // 根据行唯一标识设置行类名\n      const rowId = get(row, rowKey || 'id');\n      tClass[rowId] && (tClass = tClass[rowId]);\n    } else if (tClass instanceof Array) {\n      tClass = formatRowClassNames(tClass, params, rowKey);\n    }\n    customClasses = customClasses.concat(tClass);\n  }\n  return customClasses;\n}\n\nexport function formatClassNames(\n  classNames: TableColumnClassName<TableRowData> | TableColumnClassName<TableRowData>[],\n  params: CellData<TableRowData>,\n) {\n  const classes = classNames instanceof Array ? classNames : [classNames];\n  const arr: any[] = [];\n  for (let i = 0, len = classes.length; i < len; i++) {\n    const cls = classes[i];\n    if (isFunction(cls)) {\n      arr.push(cls(params));\n    } else {\n      arr.push(cls);\n    }\n  }\n  return arr;\n}\n\nexport const INNER_PRE_NAME = '@@inner-';\n\nexport enum SCROLL_DIRECTION {\n  X = 'x',\n  Y = 'y',\n  UNKNOWN = 'unknown',\n}\n\nlet preScrollLeft: any;\nlet preScrollTop: any;\n\nexport const getScrollDirection = (scrollLeft: number, scrollTop: number): SCROLL_DIRECTION => {\n  let direction = SCROLL_DIRECTION.UNKNOWN;\n  if (preScrollTop !== scrollTop) {\n    direction = SCROLL_DIRECTION.Y;\n  } else if (preScrollLeft !== scrollLeft) {\n    direction = SCROLL_DIRECTION.X;\n  }\n  preScrollTop = scrollTop;\n  preScrollLeft = scrollLeft;\n  return direction;\n};\n\nexport const getRecord = (record: Record<any, any>) => {\n  if (!record) {\n    return record;\n  }\n  const result = {};\n  Object.keys(record).forEach((key) => {\n    const descriptor = Object.getOwnPropertyDescriptor(record, key);\n    descriptor &&\n      Reflect.defineProperty(result, key, {\n        set(val) {\n          descriptor.set(val);\n        },\n        get() {\n          console.warn('The parameter `record` will be deprecated, please use `row` instead');\n          return descriptor.get();\n        },\n      });\n  });\n  return result;\n};\n\n// 多级表头，列配置场景，获取 currentRow\nexport function getCurrentRowByKey<T extends { colKey?: string; children?: any[] }>(columns: T[], key: string): T {\n  if (!columns || !key) return;\n  const col = columns?.find((t) => t.colKey === key);\n  if (col) return col;\n  for (let i = 0, len = columns.length; i < len; i++) {\n    if (columns[i]?.children?.length) {\n      return getCurrentRowByKey(columns[i]?.children, key);\n    }\n  }\n}\n\n/** 透传 Affix 组件全部特性 */\nexport function getAffixProps(mainAffixProps: boolean | AffixProps, subAffixProps?: AffixProps) {\n  if (typeof mainAffixProps === 'object') return mainAffixProps;\n  if (typeof subAffixProps === 'object') return subAffixProps;\n  return {};\n}\n\nexport function getEditableKeysMap(keys: Array<string | number>, list: any[], rowKey: string) {\n  const map: { [key: string | number]: boolean } = {};\n  for (let i = 0, len = list.length; i < len; i++) {\n    const rowValue = get(list[i], rowKey);\n    if (keys.includes(rowValue)) {\n      map[rowValue] = true;\n    }\n  }\n  return map;\n}\n\nexport function getColumnDataByKey(columns: any[], colKey: string): any {\n  for (let i = 0, len = columns.length; i < len; i++) {\n    if (columns[i].colKey === colKey) return columns[i];\n    if (columns[i].children?.length) {\n      const t = getColumnDataByKey(columns[i].children, colKey);\n      if (t) return t;\n    }\n  }\n  return null;\n}\n\nexport function getColumnIndexByKey(columns: any[], colKey: string): number {\n  for (let i = 0, len = columns.length; i < len; i++) {\n    if (columns[i].colKey === colKey) {\n      return i;\n    }\n    if (columns[i].children?.length) {\n      const t = getColumnDataByKey(columns[i].children, colKey);\n      if (t) return i;\n    }\n  }\n  return -1;\n}\n"],"names":["toString","obj","Object","prototype","call","slice","toLowerCase","debounce","fn","delay","arguments","length","undefined","timer","newFn","_len","args","Array","_key","context","clearTimeout","setTimeout","apply","formatRowAttributes","attributes","params","attrList","result","i","attrItem","attrProperty","isFunction","assign","formatRowClassNames","rowClassNames","rowKey","rowClassList","row","rowIndex","customClasses","len","rName","tClass","isObject","rowId","get","concat","formatClassNames","classNames","classes","arr","cls","push","INNER_PRE_NAME","SCROLL_DIRECTION","preScrollLeft","preScrollTop","getScrollDirection","scrollLeft","scrollTop","direction","getRecord","record","keys","forEach","key","descriptor","getOwnPropertyDescriptor","Reflect","defineProperty","set","val","console","warn","getCurrentRowByKey","columns","col","find","t","colKey","_columns$i","_columns$i$children","children","_columns$i2","getAffixProps","mainAffixProps","subAffixProps","_typeof","getEditableKeysMap","list","map","rowValue","includes","getColumnDataByKey","_columns$i$children2","getColumnIndexByKey","_columns$i$children3"],"mappings":"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"}