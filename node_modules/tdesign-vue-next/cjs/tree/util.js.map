{"version":3,"file":"util.js","sources":["../../src/tree/util.ts"],"sourcesContent":["import { VNode, h } from 'vue';\nimport pick from 'lodash/pick';\nimport isFunction from 'lodash/isFunction';\nimport isString from 'lodash/isString';\nimport isArray from 'lodash/isArray';\nimport isNumber from 'lodash/isNumber';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TypeMark, TypeLineModel, TypeTNodeProp, TypeGetTNodeOption, TypeTargetNode } from './interface';\nimport { TdTreeProps } from './type';\n\nexport function getParentsToRoot(element?: HTMLElement, root?: HTMLElement): HTMLElement[] {\n  const list = [];\n  let el: HTMLElement = element;\n  while (el && el.parentNode) {\n    list.push(el);\n    if (el === root) {\n      break;\n    }\n    el = el.parentNode as HTMLElement;\n  }\n  return list;\n}\n\nexport function getParentMarks(name: string, element?: HTMLElement, root?: HTMLElement): TypeMark[] {\n  const list = getParentsToRoot(element, root);\n  return list\n    .map((el) => {\n      const mark: TypeMark = {\n        name,\n        value: el.getAttribute(name) || '',\n        el,\n      };\n      return mark;\n    })\n    .filter((mark) => mark.value);\n}\n\nexport function getMark(name: string, element?: HTMLElement, root?: HTMLElement): TypeMark {\n  const list = getParentMarks(name, element, root);\n  const info = list.pop() || null;\n  return info;\n}\n\nexport function getTNode(prop: TypeTNodeProp, options: TypeGetTNodeOption = {}): string | VNode {\n  let tnode = null;\n  let item = null;\n  const conf = {\n    ...options,\n  };\n  if (isFunction(prop)) {\n    item = prop(h, conf.node?.getModel());\n  } else if (isString(prop)) {\n    item = prop;\n  }\n  if (isString(item)) {\n    tnode = item;\n  } else if (item) {\n    tnode = item as VNode;\n  }\n  return tnode;\n}\n\n// 获取一个节点层级位置的连线模型\nexport function getLineModel(nodes: TreeNode[], node: TreeNode, index: number): TypeLineModel {\n  // 标记 [上，右，下，左] 是否有连线\n  const lineModel: TypeLineModel = {\n    top: false,\n    right: false,\n    bottom: false,\n    left: false,\n  };\n\n  let nodeChildren = [];\n  if (isArray(node.children)) {\n    nodeChildren = node.children;\n  }\n  const childNode = nodes[index - 1] || null;\n  const nodeItemIndex = childNode ? childNode.getIndex() : 0;\n\n  if (index === 0) {\n    lineModel.left = !!node.parent;\n    lineModel.bottom = node.children && node.expanded;\n    lineModel.right = node.parent && !node.children;\n  } else if (index === 1) {\n    lineModel.top = true;\n    lineModel.right = true;\n    lineModel.bottom = nodeItemIndex < nodeChildren.length - 1;\n  } else if (nodeItemIndex < nodeChildren.length - 1) {\n    lineModel.top = true;\n    lineModel.bottom = true;\n  }\n\n  return lineModel;\n}\n\nexport function isTreeNodeValue(item: unknown): boolean {\n  return isString(item) || isNumber(item);\n}\n\nexport function getNode(store: TreeStore, item: TypeTargetNode): TreeNode {\n  let node = null;\n  let val = null;\n  if (isString(item) || isNumber(item)) {\n    val = item;\n  } else if (item && isTreeNodeValue(item.value)) {\n    val = item.value;\n  }\n  node = store.getNode(val);\n  return node;\n}\n\n// 统一获取tree的config\nexport const getStoreConfig = (props: TdTreeProps) => {\n  // 统一更新选项，然后在 store 统一识别属性更新\n  const storeProps = pick(props, [\n    'keys',\n    'expandAll',\n    'expandLevel',\n    'expandMutex',\n    'expandParent',\n    'activable',\n    'activeMultiple',\n    'disabled',\n    'draggable',\n    'checkable',\n    'checkStrictly',\n    'load',\n    'lazy',\n    'valueMode',\n    'filter',\n  ]);\n  return storeProps;\n};\n"],"names":["getParentsToRoot","element","root","list","el","parentNode","push","getParentMarks","name","map","mark","value","getAttribute","filter","getMark","info","pop","getTNode","prop","options","arguments","length","undefined","tnode","item","conf","_objectSpread","isFunction","_conf$node","h","node","getModel","isString","getLineModel","nodes","index","lineModel","top","right","bottom","left","nodeChildren","isArray","children","childNode","nodeItemIndex","getIndex","parent","expanded","isTreeNodeValue","isNumber","getNode","store","val","getStoreConfig","props","storeProps","pick"],"mappings":"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"}