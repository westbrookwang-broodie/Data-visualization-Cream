import { PropType } from 'vue';
import { TdColorPickerProps } from '../../type';
import { Color } from '../../utils';
declare const _default: import("vue").DefineComponent<{
    color: {
        type: PropType<Color>;
    };
    onModeChange: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    onInputChange: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    clearable: BooleanConstructor;
    closeBtn: {
        type: PropType<string | boolean | ((h: typeof import("vue").h) => import("../../..").SlotReturnValue)>;
        default: boolean;
    };
    colorModes: {
        type: PropType<("monochrome" | "linear-gradient")[]>;
        default: () => string[];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    format: {
        type: PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
        default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
    };
    inputProps: {
        type: PropType<import("../../..").TdInputProps>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: PropType<import("../../..").TdPopupProps>;
    };
    recentColors: {
        type: PropType<boolean | string[]>;
        default: boolean | string[];
    };
    defaultRecentColors: {
        type: PropType<boolean | string[]>;
        default: () => boolean | string[];
    };
    selectInputProps: {
        type: PropType<import("../../..").TdSelectInputProps>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    swatchColors: {
        type: PropType<string[]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: PropType<(value: string, context: {
        color: import("../../type").ColorObject;
        trigger: import("../../type").ColorPickerChangeTrigger;
    }) => void>;
    onPaletteBarChange: PropType<(context: {
        color: import("../../type").ColorObject;
    }) => void>;
    onRecentColorsChange: PropType<(value: string[]) => void>;
}, {
    formatModel: import("vue").Ref<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
    baseClassName: import("vue").ComputedRef<string>;
    handleModeChange: (v: TdColorPickerProps['format']) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: PropType<Color>;
    };
    onModeChange: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    onInputChange: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    clearable: BooleanConstructor;
    closeBtn: {
        type: PropType<string | boolean | ((h: typeof import("vue").h) => import("../../..").SlotReturnValue)>;
        default: boolean;
    };
    colorModes: {
        type: PropType<("monochrome" | "linear-gradient")[]>;
        default: () => string[];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    format: {
        type: PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
        default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
    };
    inputProps: {
        type: PropType<import("../../..").TdInputProps>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: PropType<import("../../..").TdPopupProps>;
    };
    recentColors: {
        type: PropType<boolean | string[]>;
        default: boolean | string[];
    };
    defaultRecentColors: {
        type: PropType<boolean | string[]>;
        default: () => boolean | string[];
    };
    selectInputProps: {
        type: PropType<import("../../..").TdSelectInputProps>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    swatchColors: {
        type: PropType<string[]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: PropType<(value: string, context: {
        color: import("../../type").ColorObject;
        trigger: import("../../type").ColorPickerChangeTrigger;
    }) => void>;
    onPaletteBarChange: PropType<(context: {
        color: import("../../type").ColorObject;
    }) => void>;
    onRecentColorsChange: PropType<(value: string[]) => void>;
}>>, {
    value: string;
    disabled: boolean;
    multiple: boolean;
    format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    modelValue: string;
    defaultValue: string;
    clearable: boolean;
    onInputChange: Function;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../../..").SlotReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    onModeChange: Function;
    enableAlpha: boolean;
    showPrimaryColorPreview: boolean;
}>;
export default _default;
