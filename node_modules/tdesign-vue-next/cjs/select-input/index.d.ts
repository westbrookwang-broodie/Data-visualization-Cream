import { TdSelectInputProps } from './type';
import './style';
export * from './type';
export declare type SelectInputProps = TdSelectInputProps;
export declare const SelectInput: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: any;
            loading: boolean;
            autofocus: boolean;
            disabled: boolean;
            multiple: boolean;
            readonly: boolean;
            status: "error" | "default" | "success" | "warning";
            placeholder: string;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            minCollapsedNum: number;
            allowInput: boolean;
            borderless: boolean;
            popupVisible: boolean;
            defaultPopupVisible: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            autoWidth: BooleanConstructor;
            autofocus: BooleanConstructor;
            borderless: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("./type").SelectInputValue;
                    collapsedTags: import("./type").SelectInputValue;
                    count: number;
                }) => import("..").SlotReturnValue>;
            };
            disabled: BooleanConstructor;
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
            };
            keys: {
                type: import("vue").PropType<import("./type").SelectInputKeys>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            loading: BooleanConstructor;
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            multiple: BooleanConstructor;
            panel: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultPopupVisible: BooleanConstructor;
            readonly: BooleanConstructor;
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                default: "error" | "default" | "success" | "warning";
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            };
            tag: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: string | number;
                }) => import("..").SlotReturnValue)>;
            };
            tagInputProps: {
                type: import("vue").PropType<import("..").TdTagInputProps>;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").SelectInputValue>;
                default: any;
            };
            valueDisplay: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: import("..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("..").SlotReturnValue)>;
            };
            onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
                e: KeyboardEvent;
                inputValue: string;
                tagInputValue?: import("..").TagInputValue;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
            onMouseenter: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onMouseleave: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPaste: import("vue").PropType<(context: {
                e: ClipboardEvent;
                pasteValue: string;
            }) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
            onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "loading" | "autofocus" | "disabled" | "multiple" | "readonly" | "status" | "placeholder" | "autoWidth" | "clearable" | "inputValue" | "minCollapsedNum" | "allowInput" | "borderless" | "popupVisible" | "defaultPopupVisible">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            autoWidth: BooleanConstructor;
            autofocus: BooleanConstructor;
            borderless: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("./type").SelectInputValue;
                    collapsedTags: import("./type").SelectInputValue;
                    count: number;
                }) => import("..").SlotReturnValue>;
            };
            disabled: BooleanConstructor;
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
            };
            keys: {
                type: import("vue").PropType<import("./type").SelectInputKeys>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            loading: BooleanConstructor;
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            multiple: BooleanConstructor;
            panel: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultPopupVisible: BooleanConstructor;
            readonly: BooleanConstructor;
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                default: "error" | "default" | "success" | "warning";
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            };
            tag: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: string | number;
                }) => import("..").SlotReturnValue)>;
            };
            tagInputProps: {
                type: import("vue").PropType<import("..").TdTagInputProps>;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").SelectInputValue>;
                default: any;
            };
            valueDisplay: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: import("..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("..").SlotReturnValue)>;
            };
            onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
                e: KeyboardEvent;
                inputValue: string;
                tagInputValue?: import("..").TagInputValue;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
            onMouseenter: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onMouseleave: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPaste: import("vue").PropType<(context: {
                e: ClipboardEvent;
                pasteValue: string;
            }) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
            onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
        }>>, {
            classPrefix: import("vue").ComputedRef<string>;
            NAME_CLASS: import("vue").ComputedRef<string>;
            innerPopupVisible: import("vue").Ref<boolean>;
            commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
            tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
            selectInputRef: import("vue").Ref<any>;
            popupRef: import("vue").Ref<any>;
            classes: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            onInnerClear: (context: {
                e: MouseEvent;
            }) => void;
            renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
            renderSelectSingle: (popupVisible: boolean) => JSX.Element;
            renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
            onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: any;
            loading: boolean;
            autofocus: boolean;
            disabled: boolean;
            multiple: boolean;
            readonly: boolean;
            status: "error" | "default" | "success" | "warning";
            placeholder: string;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            minCollapsedNum: number;
            allowInput: boolean;
            borderless: boolean;
            popupVisible: boolean;
            defaultPopupVisible: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").SelectInputValue;
                collapsedTags: import("./type").SelectInputValue;
                count: number;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("./type").SelectInputKeys>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectInputValue>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("..").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<{
        classPrefix: import("vue").ComputedRef<string>;
        NAME_CLASS: import("vue").ComputedRef<string>;
        innerPopupVisible: import("vue").Ref<boolean>;
        commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
        tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        selectInputRef: import("vue").Ref<any>;
        popupRef: import("vue").Ref<any>;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        onInnerClear: (context: {
            e: MouseEvent;
        }) => void;
        renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        renderSelectSingle: (popupVisible: boolean) => JSX.Element;
        renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
        onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            collapsedTags: import("./type").SelectInputValue;
            count: number;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("..").SlotReturnValue)>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectInputValue>;
        default: any;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("..").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
}>>, {
    classPrefix: import("vue").ComputedRef<string>;
    NAME_CLASS: import("vue").ComputedRef<string>;
    innerPopupVisible: import("vue").Ref<boolean>;
    commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    selectInputRef: import("vue").Ref<any>;
    popupRef: import("vue").Ref<any>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    renderSelectSingle: (popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
    onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: any;
    loading: boolean;
    autofocus: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin<any[]>;
export default SelectInput;
