{"version":3,"file":"tree-node.js","sources":["../../../../src/_common/js/tree/tree-node.ts"],"sourcesContent":["import isNull from 'lodash/isNull';\nimport isFunction from 'lodash/isFunction';\nimport isNumber from 'lodash/isNumber';\nimport uniqueId from 'lodash/uniqueId';\nimport isNil from 'lodash/isNil';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\nimport log from '../log';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport const defaultStatus = {\n  expandMutex: false,\n  activable: false,\n  checkable: false,\n  disabled: false,\n  draggable: false,\n  loading: false,\n};\n\nexport const privateKey = '__tdesign_id__';\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: boolean;\n\n  // 是否可选中\n  public checkable: boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: boolean;\n\n  // 节点是否可拖动\n  public draggable: boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = get(tree, 'config.keys') || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n\n    // 初始化状态\n    this.model = null;\n    this.children = null;\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = false;\n    this.vmIsLocked = false;\n    this.level = 0;\n    this.visible = true;\n\n    // 为节点设置唯一 id\n    // tree 数据替换时，value 相同有可能导致节点状态渲染冲突\n    // 用这个 唯一 id 来解决，用于类似 vue 组件的唯一 key 指定场景\n    this[privateKey] = uniqueId(prefix);\n\n    const spec = {\n      ...defaultStatus,\n      ...data,\n    };\n    const children = spec[propChildren];\n\n    this.set(spec);\n    this.label = spec[propLabel] || '';\n    // 没有 value 的时候，value 默认使用自动生成的 唯一 id\n    this.value = isNil(spec[propValue]) ? this[privateKey] : spec[propValue];\n\n    const { nodeMap, privateMap } = tree;\n    if (nodeMap.get(this.value)) {\n      log.warn('Tree', `Dulplicate value: ${this.value}`);\n    }\n    nodeMap.set(this.value, this);\n    privateMap.set(this[privateKey], this);\n\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    this.actived = false;\n    if (typeof spec.actived !== 'undefined') {\n      this.actived = spec.actived;\n    }\n    this.initActived();\n\n    this.expanded = config.expandAll;\n    if (typeof spec.expanded !== 'undefined') {\n      this.expanded = spec.expanded;\n    }\n    this.initExpanded();\n\n    this.checked = false;\n    if (typeof spec.checked !== 'undefined') {\n      this.checked = spec.checked;\n    }\n    this.initChecked();\n\n    this.update();\n    tree.reflow(this);\n\n    // 这里的子节点加载逻辑不能放到状态计算之前\n    // 因为子节点状态计算依赖父节点状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此初始化状态放到子节点插入之后\n    this.checked = false;\n    this.indeterminate = false;\n    this.updateChecked();\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  // 初始化选中态\n  public initChecked() {\n    const { tree, value, parent } = this;\n    const { checkStrictly } = tree.config;\n    let { checked } = this;\n    checked = parent?.isChecked();\n    if (checked && !checkStrictly) {\n      tree.checkedMap.set(value, true);\n    }\n    this.checked = checked;\n  }\n\n  // 初始化节点展开状态\n  public initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (\n      isNumber(config.expandLevel)\n      && this.getLevel() < config.expandLevel\n    ) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  // 初始化高亮状态\n  public initActived(): void {\n    const { tree, actived } = this;\n    if (actived) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  // 追加数据\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  // 将当前节点追加到某个父节点的子节点列表中\n  public appendTo(\n    tree: TreeStore,\n    parent?: TreeNode,\n    index?: number,\n  ): void {\n    const parentNode = parent;\n    let targetIndex = -1;\n    if (isNumber(index)) {\n      targetIndex = index;\n    }\n\n    const targetParents = parentNode?.getParents() || [];\n    const includeCurrent = targetParents.some((pnode) => pnode === this);\n    if (includeCurrent) {\n      throw new Error('无法将父节点插入到子节点');\n    }\n\n    if (parentNode === this) {\n      throw new Error('无法将节点插入到本节点');\n    }\n\n    if (Array.isArray(parentNode?.children)) {\n      const targetPosNode = parentNode?.children[targetIndex];\n      if (targetPosNode && targetPosNode === this) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    // 先要取得 siblings\n    // 因为要应对节点在同一个 siblings 中变换位置的情况\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode?.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n\n    if (!Array.isArray(siblings)) {\n      throw new Error('无法插入到目标位置，可插入的节点列表不存在');\n    }\n\n    const prevLength = siblings.length;\n    const prevIndex = this.getIndex();\n\n    this.remove();\n\n    if (isNumber(index)) {\n      let targetIndex = index;\n      if (parentNode === this.parent) {\n        // 前置节点被拔出后再插入到同一个 siblings 时，会引起目标 index 的变化\n        // 因此要相应的变更插入位置\n        // 后置节点被拔出时，目标 index 是不变的\n        const curLength = siblings.length;\n        if (\n          curLength < prevLength\n          && prevIndex <= targetIndex\n        ) {\n          targetIndex -= 1;\n        }\n      }\n      siblings.splice(targetIndex, 0, this);\n    } else {\n      siblings.push(this);\n    }\n\n    this.parent = parentNode;\n\n    // 插入节点应当继承展开状态\n    // 但建议不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      tree.privateMap.set(node[privateKey], node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode?.walk() || tree.children.map((item) => item.walk()).flat();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  // 插入一个同级节点数据\n  public insert(\n    item: TypeTreeItem,\n    index?: number,\n  ): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (isNumber(index)) {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  // 在当前节点之前插入节点\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  // 在当前节点之后插入节点\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  // 从一个树移除本节点\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  // 清除本节点与一个树的关系\n  public clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n    tree.privateMap.delete(this[privateKey]);\n  }\n\n  // 异步加载子节点数据\n  public async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (isFunction(config.load)) {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  // 设置状态\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(defaultStatus, key) || key === 'label') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  // 获取单个父节点\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  // 获取所有父节点\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  // 获取兄弟节点，包含自己在内\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  // 获取根节点\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  // 获取节点在父节点的子节点列表中的位置\n  // 如果没有父节点，则获取节点在根节点列表的位置\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  // 返回路径节点\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  // 获取节点所在层级\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  // 判断节点是否被过滤\n  public isRest(): boolean {\n    const {\n      config,\n      filterMap,\n      hasFilter,\n    } = this.tree;\n\n    let rest = false;\n    if (hasFilter) {\n      // 仅在存在过滤条件时，过滤命中才有效\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  // 判断节点是否可视\n  public isVisible(): boolean {\n    const {\n      nodeMap,\n      hasFilter,\n      config,\n    } = this.tree;\n    const { allowFoldNodeOnFilter } = config;\n\n    let visible = true;\n\n    if (!nodeMap.get(this.value)) {\n      // 节点不在当前树上，所以不可见\n      return false;\n    }\n\n    if (hasFilter && !allowFoldNodeOnFilter) {\n      // 如果存在过滤条件\n      // 锁定状态和过滤命中状态，直接呈现\n      visible = (this.vmIsLocked || this.vmIsRest);\n      return visible;\n    }\n\n    // 标志所有父节点展开导致的可见状态\n    let expandVisible = true;\n    const parents = this.getParents();\n    if (parents.length > 0) {\n      expandVisible = parents.every((node: TreeNode) => node.expanded);\n    }\n\n    if (hasFilter) {\n      visible = expandVisible && (this.vmIsRest || this.vmIsLocked);\n    } else {\n      visible = expandVisible;\n    }\n    return visible;\n  }\n\n  // 判断节点是否被禁用\n  public isDisabled() {\n    const { tree } = this;\n    const { hasFilter, config } = tree;\n    const { disabled, allowFoldNodeOnFilter } = config;\n    if (hasFilter && !allowFoldNodeOnFilter && this.vmIsLocked && !this.vmIsRest) return true;\n    return !!(disabled || this.disabled);\n  }\n\n  // 判断节点是否能拖拽\n  public isDraggable() {\n    return !!(get(this, 'tree.config.draggable') || this.draggable);\n  }\n\n  // 判断节点是否支持互斥展开\n  public isExpandMutex() {\n    return !!(get(this, 'tree.config.expandMutex') || this.expandMutex);\n  }\n\n  // 节点可高亮\n  public isActivable() {\n    return !!(get(this, 'tree.config.activable') || this.activable);\n  }\n\n  // 是否可选\n  public isCheckable() {\n    return !!(get(this, 'tree.config.checkable') || this.checkable);\n  }\n\n  // 检查节点是否被激活\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  // 检查节点是否已展开\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    const { hasFilter, config } = tree;\n    const { allowFoldNodeOnFilter } = config;\n    if (hasFilter && !allowFoldNodeOnFilter && vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  // 计算属性，判断节点是否被选中\n  // map: 预期选中项map，用于计算节点在预期环境中的选中态\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    let checked = false;\n    const checkedMap = map || tree.checkedMap;\n    if (tree.nodeMap.get(this.value)) {\n      if (checkedMap.get(this.value)) {\n        // 如果在 checked 节点列表中，则直接为 true\n        checked = true;\n      } else if (\n        Array.isArray(children)\n        && children.length > 0\n        && !checkStrictly\n      ) {\n        // 如果是父节点，需检查所有子节点状态\n        checked = children.every((node) => {\n          const childIsChecked = node.isChecked(checkedMap);\n          return childIsChecked;\n        });\n      } else if (!checkStrictly) {\n        // 从父节点状态推断子节点状态\n        // 这里再调用 isChecked 会导致死循环\n        const parents = this.getParents();\n        checked = parents.some((node) => checkedMap.get(node.value));\n      }\n    }\n    return !!checked;\n  }\n\n  // 是否为半选状态\n  public isIndeterminate(): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    if (checkStrictly) {\n      return false;\n    }\n    let indeterminate = false;\n    if (Array.isArray(children)) {\n      // 叶节点不存在半选状态\n      let childChecked: null | boolean = null;\n      indeterminate = children.some((node: TreeNode) => {\n        if (node.isIndeterminate()) {\n          // 子节点有任意一个半选，则其为半选状态\n          return true;\n        }\n        if (isNull(childChecked)) {\n          childChecked = node.isChecked();\n        }\n        if (childChecked !== node.isChecked()) {\n          // 子节点选中状态不一致，则其为半选状态\n          return true;\n        }\n        return false;\n      });\n    }\n    return indeterminate;\n  }\n\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  // 是叶节点\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  // 锁定节点\n  // 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  // 节点展开关闭后需要调用的状态检查函数\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n  }\n\n  // 展开或者关闭节点\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  // 设置节点展开状态\n  public setExpanded(expanded: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const { config } = tree;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      // 列举需要展开的节点\n      const shouldExpandNodes = [];\n      // 自己一定在展开列表中\n      shouldExpandNodes.push(this);\n      if (config.expandParent) {\n        // expandParent 为 true，则父节点都要展开\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        // 对于每一个节点，都需要判断是否启用手风琴效果\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          // 折叠列表中，先移除同级节点\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n            // 同级节点相关状态更新\n            snode.update();\n            snode.updateChildren();\n          });\n        }\n        // 最后设置自己的折叠状态\n        map.set(node.value, true);\n        node.update();\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n      this.update();\n      this.updateChildren();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  // 切换节点激活态\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  // 设置节点激活态\n  public setActived(actived: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        const prevKeys = Array.from(map.keys());\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        prevKeys.forEach((value) => {\n          const node = tree.getNode(value);\n          node?.update();\n        });\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    this.update();\n    return tree.getActived(map);\n  }\n\n  // 切换选中态\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  // 更新单个节点的选中态\n  // 返回树选中列表\n  public setChecked(checked: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (this.isCheckable() && checked !== this.isChecked()) {\n      if (config.checkStrictly) {\n        if (checked) {\n          map.set(this.value, true);\n        } else {\n          map.delete(this.value);\n        }\n      } else {\n        const children = this.walk();\n        // 子节点的预期选中态与当前节点同步\n        children.forEach((node) => {\n          if (checked) {\n            map.set(node.value, true);\n          } else {\n            map.delete(node.value);\n          }\n        });\n        // 消除全部父节点的预期选中态\n        // 父节点的预期选中态将通过计算得出\n        const parents = this.getParents();\n        parents.forEach((node) => {\n          map.delete(node.value);\n        });\n      }\n    }\n    if (options.directly) {\n      if (config.checkStrictly) {\n        this.updateChecked();\n      } else {\n        const relatedNodes = tree.getRelatedNodes([this.value]);\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    return tree.getChecked(map);\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  // 更新节点状态\n  public update(): void {\n    this.level = this.getLevel();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.vmCheckable = this.isCheckable();\n    this.vmIsRest = this.isRest();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n    this.tree.updated(this);\n  }\n\n  // 更新选中态属性值\n  public updateChecked(isFromValueChange?: boolean): void {\n    const { tree } = this;\n    this.vmCheckable = this.isCheckable();\n    if (this.vmCheckable && (!this.disabled || isFromValueChange)) {\n      this.checked = this.isChecked();\n      if (this.checked) {\n        tree.checkedMap.set(this.value, true);\n      }\n      this.indeterminate = this.isIndeterminate();\n      tree.updated(this);\n    }\n  }\n\n  // 更新所有子节点状态\n  // 注意:不包含自己\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  // 父节点状态更新\n  // 注意:不包含自己\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  // 更新上下游相关节点\n  public updateRelated() {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n    tree.reflow();\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  // 获取包含自己在内所有的子节点\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  // TreeNode 对象 => TypeTreeNodeModel 对象\n  // 用于 treeNode 对外暴露的 api\n  // 经过封装的对象，减少了对外暴露的 api，利于代码重构\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["hasOwnProperty","Object","prototype","defaultStatus","expandMutex","activable","checkable","disabled","draggable","loading","privateKey","TreeNode","tree","data","parent","_classCallCheck","_defineProperty","config","prefix","keys","get","propChildren","children","propLabel","label","propValue","value","model","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","level","visible","uniqueId","spec","_objectSpread","set","isNil","nodeMap","privateMap","log","warn","concat","actived","initActived","expanded","expandAll","initExpanded","checked","initChecked","update","reflow","Array","isArray","append","lazy","loadChildren","indeterminate","updateChecked","_createClass","key","checkStrictly","isChecked","checkedMap","isNumber","expandLevel","getLevel","expandedMap","activedMap","_this","list","push","apply","_toConsumableArray","length","forEach","item","node","appendTo","updateRelated","index","_this2","parentNode","targetIndex","targetParents","getParents","includeCurrent","some","pnode","Error","targetPosNode","siblings","prevLength","prevIndex","getIndex","remove","curLength","splice","nodes","walk","updateNodes","map","flat","insert","getSiblings","sibling","insertBefore","newData","insertAfter","clean","updateParents","_loadChildren","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","isFunction","load","sent","emit","stop","arguments","_this3","call","updated","getParent","parents","getRoot","indexOf","getPath","unshift","reverse","isRest","_this$tree","filterMap","hasFilter","rest","nodeModel","getModel","filter","isVisible","_this$tree2","allowFoldNodeOnFilter","expandVisible","every","isDisabled","isDraggable","isExpandMutex","isActivable","isCheckable","isActived","isExpanded","childIsChecked","isIndeterminate","childChecked","isNull","isFirst","isLast","isLeaf","lock","lockState","afterExpanded","toggleExpanded","setExpanded","opts","options","directly","Map","shouldExpandNodes","expandParent","_tree$config","snode","updateChildren","getExpanded","toggleActived","setActived","prevKeys","from","activeMultiple","clear","getNode","getActived","toggleChecked","setChecked","relatedNodes","getRelatedNodes","getChecked","isFromValueChange","createNodeModel","updateNodeModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAQA,cAAe,GAAIC,MAAO,CAAAC,SAAA,CAA1BF,cAAe,CAAA;AAEhB,IAAMG,aAAgB,GAAA;AAC3BC,EAAAA,WAAa,EAAA,KAAA;AACbC,EAAAA,SAAW,EAAA,KAAA;AACXC,EAAAA,SAAW,EAAA,KAAA;AACXC,EAAAA,QAAU,EAAA,KAAA;AACVC,EAAAA,SAAW,EAAA,KAAA;AACXC,EAAAA,OAAS,EAAA,KAAA;AACX,EAAA;AAEO,IAAMC,UAAa,GAAA,iBAAA;AAInB,IAAMC,QAAS,gBAAA,YAAA;AA4Eb,EAAA,SAAAA,SACLC,IACA,EAAAC,IAAA,EACAC,MACA,EAAA;AAAAC,IAAAA,eAAA,OAAAJ,QAAA,CAAA,CAAA;IAAAK,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACA,IAAA,CAAKH,IAAO,GAAAA,IAAA,CAAA;IACZ,IAAA,CAAKD,IAAO,GAAAA,IAAA,CAAA;AAEN,IAAA,IAAAK,MAAA,GAASL,IAAK,CAAAK,MAAA,IAAU,EAAC,CAAA;AACzB,IAAA,IAAAC,MAAA,GAASD,OAAOC,MAAU,IAAA,GAAA,CAAA;IAChC,IAAMC,IAAO,GAAAC,GAAA,CAAIR,IAAM,EAAA,aAAa,KAAK,EAAC,CAAA;AACpC,IAAA,IAAAS,YAAA,GAAeF,KAAKG,QAAY,IAAA,UAAA,CAAA;AAChC,IAAA,IAAAC,SAAA,GAAYJ,KAAKK,KAAS,IAAA,OAAA,CAAA;AAC1B,IAAA,IAAAC,SAAA,GAAYN,KAAKO,KAAS,IAAA,OAAA,CAAA;IAGhC,IAAA,CAAKC,KAAQ,GAAA,IAAA,CAAA;IACb,IAAA,CAAKL,QAAW,GAAA,IAAA,CAAA;IAChB,IAAA,CAAKM,WAAc,GAAA,KAAA,CAAA;IACnB,IAAA,CAAKC,QAAW,GAAA,KAAA,CAAA;IAChB,IAAA,CAAKC,SAAY,GAAA,KAAA,CAAA;IACjB,IAAA,CAAKC,QAAW,GAAA,KAAA,CAAA;IAChB,IAAA,CAAKC,QAAW,GAAA,KAAA,CAAA;IAChB,IAAA,CAAKC,UAAa,GAAA,KAAA,CAAA;IAClB,IAAA,CAAKC,KAAQ,GAAA,CAAA,CAAA;IACb,IAAA,CAAKC,OAAU,GAAA,IAAA,CAAA;AAKV,IAAA,IAAA,CAAAzB,UAAA,CAAA,GAAc0B,SAASlB,MAAM,CAAA,CAAA;IAElC,IAAMmB,IAAO,GAAAC,aAAA,CAAAA,aAAA,CACRnC,EAAAA,EAAAA,aAAA,CACAU,EAAAA,IAAA,CACL,CAAA;AACA,IAAA,IAAMS,WAAWe,IAAK,CAAAhB,YAAA,CAAA,CAAA;AAEtB,IAAA,IAAA,CAAKkB,IAAIF,IAAI,CAAA,CAAA;IACR,IAAA,CAAAb,KAAA,GAAQa,KAAKd,SAAc,CAAA,IAAA,EAAA,CAAA;AAEhC,IAAA,IAAA,CAAKG,QAAQc,KAAM,CAAAH,IAAA,CAAKZ,UAAU,CAAI,GAAA,IAAA,CAAKf,cAAc2B,IAAK,CAAAZ,SAAA,CAAA,CAAA;AAExD,IAAA,IAAEgB,OAAS,GAAe7B,IAAA,CAAxB6B,OAAS;MAAAC,UAAA,GAAe9B,IAAA,CAAf8B,UAAA,CAAA;IACjB,IAAID,OAAQ,CAAArB,GAAA,CAAI,IAAK,CAAAM,KAAK,CAAG,EAAA;MAC3BiB,GAAA,CAAIC,IAAK,CAAA,MAAA,EAAA,oBAAA,CAAAC,MAAA,CAA6B,IAAA,CAAKnB,KAAO,CAAA,CAAA,CAAA;AACpD,KAAA;IACQe,OAAA,CAAAF,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;IACjBgB,UAAA,CAAAH,GAAA,CAAI,IAAK,CAAA7B,UAAA,CAAA,EAAa,IAAI,CAAA,CAAA;AAEjC,IAAA,IAAAI,MAAA,IAAUA,kBAAkBH,QAAU,EAAA;MACxC,IAAA,CAAKG,MAAS,GAAAA,MAAA,CAAA;AAChB,KAAO,MAAA;MACL,IAAA,CAAKA,MAAS,GAAA,IAAA,CAAA;AAChB,KAAA;IAIA,IAAIQ,aAAa,IAAM,EAAA;MACrB,IAAA,CAAKA,QAAW,GAAAA,QAAA,CAAA;AAClB,KAAA;IAEA,IAAA,CAAKwB,OAAU,GAAA,KAAA,CAAA;AACX,IAAA,IAAA,OAAOT,IAAK,CAAAS,OAAA,KAAY,WAAa,EAAA;AACvC,MAAA,IAAA,CAAKA,UAAUT,IAAK,CAAAS,OAAA,CAAA;AACtB,KAAA;IACA,IAAA,CAAKC,WAAY,EAAA,CAAA;AAEjB,IAAA,IAAA,CAAKC,WAAW/B,MAAO,CAAAgC,SAAA,CAAA;AACnB,IAAA,IAAA,OAAOZ,IAAK,CAAAW,QAAA,KAAa,WAAa,EAAA;AACxC,MAAA,IAAA,CAAKA,WAAWX,IAAK,CAAAW,QAAA,CAAA;AACvB,KAAA;IACA,IAAA,CAAKE,YAAa,EAAA,CAAA;IAElB,IAAA,CAAKC,OAAU,GAAA,KAAA,CAAA;AACX,IAAA,IAAA,OAAOd,IAAK,CAAAc,OAAA,KAAY,WAAa,EAAA;AACvC,MAAA,IAAA,CAAKA,UAAUd,IAAK,CAAAc,OAAA,CAAA;AACtB,KAAA;IACA,IAAA,CAAKC,WAAY,EAAA,CAAA;IAEjB,IAAA,CAAKC,MAAO,EAAA,CAAA;AACZzC,IAAAA,IAAA,CAAK0C,OAAO,IAAI,CAAA,CAAA;AAIZ,IAAA,IAAAC,KAAA,CAAMC,OAAQ,CAAAlC,QAAQ,CAAG,EAAA;AAC3B,MAAA,IAAA,CAAKmC,OAAOnC,QAAQ,CAAA,CAAA;KACX,MAAA,IAAAA,QAAA,KAAa,IAAQ,IAAA,CAACL,OAAOyC,IAAM,EAAA;MAC5C,IAAA,CAAKC,YAAa,EAAA,CAAA;AACpB,KAAA;IAIA,IAAA,CAAKR,OAAU,GAAA,KAAA,CAAA;IACf,IAAA,CAAKS,aAAgB,GAAA,KAAA,CAAA;IACrB,IAAA,CAAKC,aAAc,EAAA,CAAA;AACrB,GAAA;AAAAC,EAAAA,YAAA,CAAAnD,QAAA,EAAA,CAAA;IAAAoD,GAAA,EAAA,aAAA;IAAArC,KAAA,EAKO,SAAA0B,WAAAA,GAAc;AACnB,MAAA,IAAQxC,IAAA,GAAwB,IAAA,CAAxBA,IAAA;QAAMc,KAAO,GAAW,IAAA,CAAlBA,KAAO;QAAAZ,MAAA,GAAW,IAAA,CAAXA,MAAA,CAAA;AACf,MAAA,IAAEkD,aAAc,GAAIpD,IAAK,CAAAK,MAAA,CAAvB+C,aAAc,CAAA;AAClB,MAAA,IAAEb,UAAY,IAAA,CAAZA;MACNA,OAAA,GAAUrC,WAAAA,IAAAA,IAAAA,6BAAAA,OAAQmD,SAAU,EAAA,CAAA;AACxB,MAAA,IAAAd,OAAA,IAAW,CAACa,aAAe,EAAA;QACxBpD,IAAA,CAAAsD,UAAA,CAAW3B,GAAI,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AACjC,OAAA;MACA,IAAA,CAAKyB,OAAU,GAAAA,OAAA,CAAA;AACjB,KAAA;AAAA,GAAA,EAAA;IAAAY,GAAA,EAAA,cAAA;IAAArC,KAAA,EAGO,SAAAwB,YAAAA,GAAqB;AACpB,MAAA,IAAEtC,OAAS,IAAA,CAATA;AACJ,MAAA,IAAEoC,WAAa,IAAA,CAAbA;AACA,MAAA,IAAE/B,SAAWL,IAAA,CAAXK;AAEN,MAAA,IAAAkD,QAAA,CAASlD,OAAOmD,WAAW,CAAA,IACxB,KAAKC,QAAS,EAAA,GAAIpD,OAAOmD,WAC5B,EAAA;QACAxD,IAAA,CAAK0D,WAAY,CAAA/B,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AAC1BsB,QAAAA,QAAA,GAAA,IAAA,CAAA;AACb,OAAA;MACA,IAAI,IAAK,CAAA1B,QAAA,KAAa,IAAQ,IAAAL,MAAA,CAAOyC,IAAM,EAAA;AAC9BV,QAAAA,QAAA,GAAA,KAAA,CAAA;AACb,OAAA;AACA,MAAA,IAAIA,QAAU,EAAA;QACZpC,IAAA,CAAK0D,WAAY,CAAA/B,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AACvC,OAAO,MAAA;AACAd,QAAAA,IAAA,CAAA0D,WAAA,CAAA,QAAA,CAAmB,CAAA,IAAA,CAAK5C,KAAK,CAAA,CAAA;AACpC,OAAA;MACA,IAAA,CAAKsB,QAAW,GAAAA,QAAA,CAAA;AAClB,KAAA;AAAA,GAAA,EAAA;IAAAe,GAAA,EAAA,aAAA;IAAArC,KAAA,EAGO,SAAAqB,WAAAA,GAAoB;AACnB,MAAA,IAAEnC,IAAM,GAAY,IAAA,CAAlBA,IAAM;QAAAkC,OAAA,GAAY,IAAA,CAAZA,OAAA,CAAA;AACd,MAAA,IAAIA,OAAS,EAAA;QACXlC,IAAA,CAAK2D,UAAW,CAAAhC,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AACtC,OAAA;AACF,KAAA;AAAA,GAAA,EAAA;IAAAqC,GAAA,EAAA,QAAA;AAAArC,IAAAA,KAAA,EAKO,SAAA+B,MAAO5C,CAAAA,IAAmD,EAAA;AAAA,MAAA,IAAA2D,KAAA,GAAA,IAAA,CAAA;MAC/D,IAAMC,OAAO,EAAC,CAAA;AACd,MAAA,IAAI,CAAClB,KAAA,CAAMC,OAAQ,CAAA3C,IAAI,CAAG,EAAA;AACxB4D,QAAAA,IAAA,CAAKC,KAAK7D,IAAI,CAAA,CAAA;AAChB,OAAO,MAAA;QACA4D,IAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAF,IAAA,EAAAG,kBAAA,CAAQ/D,IAAI,CAAA,CAAA,CAAA;AACnB,OAAA;AACI,MAAA,IAAA4D,IAAA,CAAKI,UAAU,CAAG,EAAA;AACpB,QAAA,OAAA;AACF,OAAA;MACA,IAAI,CAACtB,KAAA,CAAMC,OAAQ,CAAA,IAAA,CAAKlC,QAAQ,CAAG,EAAA;QACjC,IAAA,CAAKA,WAAW,EAAC,CAAA;AACnB,OAAA;AACM,MAAA,IAAEA,QAAU,GAAS,IAAA,CAAnBA,QAAU;QAAAV,IAAA,GAAS,IAAA,CAATA,IAAA,CAAA;AACb6D,MAAAA,IAAA,CAAAK,OAAA,CAAQ,UAACC,IAAS,EAAA;QACrB,IAAIC,IAAO,GAAA,IAAA,CAAA;QACX,IAAID,gBAAgBpE,QAAU,EAAA;AACrBqE,UAAAA,IAAA,GAAAD,IAAA,CAAA;UACFC,IAAA,CAAAC,QAAA,CAAST,KAAK,CAAA5D,IAAA,EAAM4D,KAAI,CAAA,CAAA;AAC/B,SAAO,MAAA;UACLQ,IAAA,GAAO,IAAIrE,QAAA,CAAS6D,KAAK,CAAA5D,IAAA,EAAMmE,MAAMP,KAAI,CAAA,CAAA;AACzClD,UAAAA,QAAA,CAASoD,KAAKM,IAAI,CAAA,CAAA;AACpB,SAAA;AACF,OAAC,CAAA,CAAA;AACDpE,MAAAA,IAAA,CAAK0C,OAAO,IAAI,CAAA,CAAA;MAChB,IAAA,CAAK4B,aAAc,EAAA,CAAA;AACrB,KAAA;AAAA,GAAA,EAAA;IAAAnB,GAAA,EAAA,UAAA;IAAArC,KAAA,EAGO,SAAAuD,QACLrE,CAAAA,IACA,EAAAE,MAAA,EACAqE,KACM,EAAA;AAAA,MAAA,IAAAC,MAAA,GAAA,IAAA,CAAA;MACN,IAAMC,UAAa,GAAAvE,MAAA,CAAA;MACnB,IAAIwE,WAAc,GAAA,CAAA,CAAA,CAAA;AACd,MAAA,IAAAnB,QAAA,CAASgB,KAAK,CAAG,EAAA;AACLG,QAAAA,WAAA,GAAAH,KAAA,CAAA;AAChB,OAAA;AAEA,MAAA,IAAMI,aAAgB,GAAA,CAAAF,UAAA,KAAAA,IAAAA,IAAAA,UAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAYG,UAAW,EAAA,KAAK,EAAC,CAAA;AACnD,MAAA,IAAMC,iBAAiBF,aAAc,CAAAG,IAAA,CAAK,UAACC,KAAA,EAAA;QAAA,OAAUA,UAAUP,MAAI,CAAA;OAAA,CAAA,CAAA;AACnE,MAAA,IAAIK,cAAgB,EAAA;AACZ,QAAA,MAAA,IAAIG,MAAM,0EAAc,CAAA,CAAA;AAChC,OAAA;MAEA,IAAIP,eAAe,IAAM,EAAA;AACjB,QAAA,MAAA,IAAIO,MAAM,oEAAa,CAAA,CAAA;AAC/B,OAAA;AAEA,MAAA,IAAIrC,KAAM,CAAAC,OAAA,CAAQ6B,UAAY,KAAA,IAAA,IAAZA,UAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZA,UAAY,CAAA/D,QAAQ,CAAG,EAAA;QACjC,IAAAuE,aAAA,GAAgBR,eAAAA,IAAAA,IAAAA,eAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAY/D,QAAS,CAAAgE,WAAA,CAAA,CAAA;AACvC,QAAA,IAAAO,aAAA,IAAiBA,kBAAkB,IAAM,EAAA;AAE3C,UAAA,OAAA;AACF,SAAA;AACF,OAAA;MAIA,IAAIC,QAAW,GAAA,IAAA,CAAA;MACf,IAAIT,sBAAsB1E,QAAU,EAAA;AAClC,QAAA,IAAI,CAAC4C,KAAA,CAAMC,OAAQ,CAAA6B,UAAA,KAAAA,IAAAA,IAAAA,UAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAY/D,QAAQ,CAAG,EAAA;UACxC+D,UAAA,CAAW/D,WAAW,EAAC,CAAA;AACzB,SAAA;QACAwE,QAAA,GAAWhF,MAAO,CAAAQ,QAAA,CAAA;AACpB,OAAO,MAAA;QACLwE,QAAA,GAAWlF,IAAK,CAAAU,QAAA,CAAA;AAClB,OAAA;AAEA,MAAA,IAAI,CAACiC,KAAA,CAAMC,OAAQ,CAAAsC,QAAQ,CAAG,EAAA;AACtB,QAAA,MAAA,IAAIF,MAAM,gIAAuB,CAAA,CAAA;AACzC,OAAA;AAEA,MAAA,IAAMG,aAAaD,QAAS,CAAAjB,MAAA,CAAA;AACtB,MAAA,IAAAmB,SAAA,GAAY,KAAKC,QAAS,EAAA,CAAA;MAEhC,IAAA,CAAKC,MAAO,EAAA,CAAA;AAER,MAAA,IAAA/B,QAAA,CAASgB,KAAK,CAAG,EAAA;QACnB,IAAIG,YAAc,GAAAH,KAAA,CAAA;AACd,QAAA,IAAAE,UAAA,KAAe,KAAKvE,MAAQ,EAAA;AAI9B,UAAA,IAAMqF,YAAYL,QAAS,CAAAjB,MAAA,CAAA;AAEzB,UAAA,IAAAsB,SAAA,GAAYJ,UACT,IAAAC,SAAA,IAAaV,YAChB,EAAA;AACAA,YAAAA,YAAe,IAAA,CAAA,CAAA;AACjB,WAAA;AACF,SAAA;QACSQ,QAAA,CAAAM,MAAA,CAAOd,YAAa,EAAA,CAAA,EAAG,IAAI,CAAA,CAAA;AACtC,OAAO,MAAA;AACLQ,QAAAA,QAAA,CAASpB,KAAK,IAAI,CAAA,CAAA;AACpB,OAAA;MAEA,IAAA,CAAK5D,MAAS,GAAAuE,UAAA,CAAA;AAIR,MAAA,IAAAgB,KAAA,GAAQ,KAAKC,IAAK,EAAA,CAAA;AAClBD,MAAAA,KAAA,CAAAvB,OAAA,CAAQ,UAACC,IAAS,EAAA;QACtB,IAAMC,IAAO,GAAAD,IAAA,CAAA;QACbC,IAAA,CAAKpE,IAAO,GAAAA,IAAA,CAAA;QACZA,IAAA,CAAK6B,OAAQ,CAAAF,GAAA,CAAIyC,IAAK,CAAAtD,KAAA,EAAOsD,IAAI,CAAA,CAAA;QACjCpE,IAAA,CAAK8B,UAAW,CAAAH,GAAA,CAAIyC,IAAK,CAAAtE,UAAA,CAAA,EAAasE,IAAI,CAAA,CAAA;QAC1C,IAAIA,KAAKhC,QAAU,EAAA;UACjBpC,IAAA,CAAK0D,WAAY,CAAA/B,GAAA,CAAIyC,IAAK,CAAAtD,KAAA,EAAO,IAAI,CAAA,CAAA;AACvC,SAAA;AACF,OAAC,CAAA,CAAA;AAED,MAAA,IAAM6E,WAAc,GAAA,CAAAlB,UAAA,KAAAA,IAAAA,IAAAA,UAAA,uBAAAA,UAAA,CAAYiB,IAAK,EAAA,KAAK1F,IAAK,CAAAU,QAAA,CAASkF,GAAI,CAAA,UAACzB,IAAS,EAAA;QAAA,OAAAA,IAAA,CAAKuB,IAAK,EAAC,CAAA;SAAEG,IAAK,EAAA,CAAA;AAC5EF,MAAAA,WAAA,CAAAzB,OAAA,CAAQ,UAACE,IAAS,EAAA;QAC5BA,IAAA,CAAK3B,MAAO,EAAA,CAAA;QACZ2B,IAAA,CAAKnB,aAAc,EAAA,CAAA;AACrB,OAAC,CAAA,CAAA;MAEDjD,IAAA,CAAK0C,MAAO,EAAA,CAAA;AACd,KAAA;AAAA,GAAA,EAAA;IAAAS,GAAA,EAAA,QAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAgF,MAAAA,CACL3B,MACAI,KACM,EAAA;AACA,MAAA,IAAEvE,IAAM,GAAW,IAAA,CAAjBA,IAAM;QAAAE,MAAA,GAAW,IAAA,CAAXA,MAAA,CAAA;AACR,MAAA,IAAAgF,QAAA,GAAW,KAAKa,WAAY,EAAA,CAAA;MAClC,IAAI3B,IAAO,GAAA,IAAA,CAAA;MACX,IAAID,gBAAgBpE,QAAU,EAAA;AACrBqE,QAAAA,IAAA,GAAAD,IAAA,CAAA;QACFC,IAAA,CAAAC,QAAA,CAASrE,IAAM,EAAAE,MAAA,EAAQqE,KAAK,CAAA,CAAA;iBACxBJ,IAAM,EAAA;QACfC,IAAA,GAAO,IAAIrE,QAAA,CAASC,IAAM,EAAAmE,IAAA,EAAMjE,MAAM,CAAA,CAAA;AAClC,QAAA,IAAAqD,QAAA,CAASgB,KAAK,CAAG,EAAA;UACVW,QAAA,CAAAM,MAAA,CAAOjB,KAAO,EAAA,CAAA,EAAGH,IAAI,CAAA,CAAA;AAChC,SAAA;AACSc,QAAAA,QAAA,CAAAhB,OAAA,CAAQ,UAAC8B,OAAY,EAAA;UAC5BA,OAAA,CAAQvD,MAAO,EAAA,CAAA;AACjB,SAAC,CAAA,CAAA;AACH,OAAA;MACAzC,IAAA,CAAK0C,MAAO,EAAA,CAAA;AACd,KAAA;AAAA,GAAA,EAAA;IAAAS,GAAA,EAAA,cAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAmF,YAAaC,CAAAA,OAA6B,EAAA;AACzC,MAAA,IAAA3B,KAAA,GAAQ,KAAKc,QAAS,EAAA,CAAA;AACvB,MAAA,IAAA,CAAAS,MAAA,CAAOI,SAAS3B,KAAK,CAAA,CAAA;AAC5B,KAAA;AAAA,GAAA,EAAA;IAAApB,GAAA,EAAA,aAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAqF,WAAYD,CAAAA,OAA6B,EAAA;AACxC,MAAA,IAAA3B,KAAA,GAAQ,KAAKc,QAAS,EAAA,CAAA;MACvB,IAAA,CAAAS,MAAA,CAAOI,OAAS,EAAA3B,KAAA,GAAQ,CAAC,CAAA,CAAA;AAChC,KAAA;AAAA,GAAA,EAAA;IAAApB,GAAA,EAAA,QAAA;IAAArC,KAAA,EAGO,SAAAwE,MAAAA,GAAe;AACd,MAAA,IAAEtF,OAAS,IAAA,CAATA;AAEF,MAAA,IAAAyF,KAAA,GAAQ,KAAKC,IAAK,EAAA,CAAA;AAClB,MAAA,IAAAR,QAAA,GAAW,KAAKa,WAAY,EAAA,CAAA;AAC5B,MAAA,IAAAxB,KAAA,GAAQ,KAAKc,QAAS,EAAA,CAAA;AAGxB,MAAA,IAAA1C,KAAA,CAAMC,OAAQ,CAAAsC,QAAQ,CAAG,EAAA;AAClBA,QAAAA,QAAA,CAAAM,MAAA,CAAOjB,OAAO,CAAC,CAAA,CAAA;AAC1B,OAAA;AAEMkB,MAAAA,KAAA,CAAAvB,OAAA,CAAQ,UAACE,IAAS,EAAA;QACtBA,IAAA,CAAKgC,KAAM,EAAA,CAAA;AACb,OAAC,CAAA,CAAA;AAEQlB,MAAAA,QAAA,CAAAhB,OAAA,CAAQ,UAACE,IAAS,EAAA;QACzBA,IAAA,CAAK3B,MAAO,EAAA,CAAA;AACd,OAAC,CAAA,CAAA;MAED,IAAA,CAAK4D,aAAc,EAAA,CAAA;MACnBrG,IAAA,CAAK0C,MAAO,EAAA,CAAA;AACd,KAAA;AAAA,GAAA,EAAA;IAAAS,GAAA,EAAA,OAAA;IAAArC,KAAA,EAGO,SAAAsF,KAAAA,GAAc;AACb,MAAA,IAAEpG,IAAM,GAAU,IAAA,CAAhBA,IAAM;QAAAc,KAAA,GAAU,IAAA,CAAVA,KAAA,CAAA;AACTd,MAAAA,IAAA,CAAA2D,UAAA,WAAkB7C,KAAK,CAAA,CAAA;AACvBd,MAAAA,IAAA,CAAAsD,UAAA,WAAkBxC,KAAK,CAAA,CAAA;AACvBd,MAAAA,IAAA,CAAA0D,WAAA,WAAmB5C,KAAK,CAAA,CAAA;AACxBd,MAAAA,IAAA,CAAA6B,OAAA,WAAef,KAAK,CAAA,CAAA;MACpBd,IAAA,CAAA8B,UAAA,CAAkB,QAAA,CAAA,CAAA,IAAA,CAAKhC,UAAW,CAAA,CAAA,CAAA;AACzC,KAAA;AAAA,GAAA,EAAA;IAAAqD,GAAA,EAAA,cAAA;IAAArC,KAAA,EAAA,YAAA;MAAA,IAAAwF,aAAA,GAAAC,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAGA,SAAAC,OAAA,GAAA;QAAA,IAAArG,MAAA,EAAAwD,IAAA,CAAA;AAAA,QAAA,OAAA2C,mBAAA,CAAAG,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,YAAA,KAAA,CAAA;cACQ1G,MAAS,GAAAG,GAAA,CAAI,IAAM,EAAA,aAAa,KAAK,EAAC,CAAA;cAAA,IACxC,EAAA,IAAK,CAAAE,QAAA,KAAa,IAAQ,IAAA,CAAC,KAAKb,OAAS,CAAA,EAAA;AAAAgH,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,eAAA;AAAA,cAAA,IAAA,CACvCC,UAAA,CAAW3G,MAAO,CAAA4G,IAAI,CAAG,EAAA;AAAAJ,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,eAAA;cAC3B,IAAA,CAAKlH,OAAU,GAAA,IAAA,CAAA;cACf,IAAA,CAAK4C,MAAO,EAAA,CAAA;AACRoB,cAAAA,OAAO,EAAC,CAAA;AAAAgD,cAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACC1G,MAAO,CAAA4G,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA;cAAtBpD,IAAA,GAAAgD,QAAA,CAAAK,IAAA,CAAA;AACF,cAAA,IAAA,CAAAlH,IAAA,CAAKmH,KAAK,MAAQ,EAAA;AACrB/C,gBAAAA,IAAM,EAAA,IAAA;AACNnE,gBAAAA,IAAM,EAAA4D,IAAAA;AACR,eAAC,CAAA,CAAA;cACD,IAAA,CAAKhE,OAAU,GAAA,KAAA,CAAA;AACf,cAAA,IAAI8C,MAAMC,OAAQ,CAAAiB,IAAI,CAAK,IAAAA,IAAA,CAAKI,SAAS,CAAG,EAAA;AAC1C,gBAAA,IAAA,CAAKpB,OAAOgB,IAAI,CAAA,CAAA;AAClB,eAAO,MAAA;gBACL,IAAA,CAAKnD,QAAW,GAAA,KAAA,CAAA;AAClB,eAAA;cACA,IAAA,CAAK+B,MAAO,EAAA,CAAA;AAAA,YAAA,KAAA,EAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAoE,QAAA,CAAAO,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA,EAAAV,OAAA,EAAA,IAAA,CAAA,CAAA;OAGlB,CAAA,CAAA,CAAA;AAAA,MAAA,SAAA3D,YAAA,GAAA;AAAA,QAAA,OAAAuD,aAAA,CAAAvC,KAAA,CAAA,IAAA,EAAAsD,SAAA,CAAA,CAAA;AAAA,OAAA;AAAA,MAAA,OAAAtE,YAAA,CAAA;AAAA,KAAA,EAAA;AAAA,GAAA,EAAA;IAAAI,GAAA,EAAA,KAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAa,GAAIwC,CAAAA,IAA2B,EAAA;AAAA,MAAA,IAAAmD,MAAA,GAAA,IAAA,CAAA;AAC9B,MAAA,IAAEtH,OAAS,IAAA,CAATA;AACF,MAAA,IAAAO,IAAA,GAAOlB,MAAO,CAAAkB,IAAA,CAAK4D,IAAI,CAAA,CAAA;AACxB5D,MAAAA,IAAA,CAAA2D,OAAA,CAAQ,UAACf,GAAQ,EAAA;AACpB,QAAA,IAAI/D,eAAemI,IAAK,CAAAhI,aAAA,EAAe4D,GAAG,CAAA,IAAKA,QAAQ,OAAS,EAAA;AAC9DmE,UAAAA,MAAA,CAAKnE,OAAOgB,IAAK,CAAAhB,GAAA,CAAA,CAAA;AACnB,SAAA;AACF,OAAC,CAAA,CAAA;AACDnD,MAAAA,IAAA,CAAKwH,QAAQ,IAAI,CAAA,CAAA;AACnB,KAAA;AAAA,GAAA,EAAA;IAAArE,GAAA,EAAA,WAAA;IAAArC,KAAA,EAKO,SAAA2G,SAAAA,GAAsB;MAC3B,OAAO,IAAK,CAAAvH,MAAA,CAAA;AACd,KAAA;AAAA,GAAA,EAAA;IAAAiD,GAAA,EAAA,YAAA;IAAArC,KAAA,EAGO,SAAA8D,UAAAA,GAAyB;MAC9B,IAAM8C,UAAU,EAAC,CAAA;AACjB,MAAA,IAAItD,OAAO,IAAK,CAAAlE,MAAA,CAAA;AAChB,MAAA,OAAOkE,IAAM,EAAA;AACXsD,QAAAA,OAAA,CAAQ5D,KAAKM,IAAI,CAAA,CAAA;QACjBA,IAAA,GAAOA,IAAK,CAAAlE,MAAA,CAAA;AACd,OAAA;AACO,MAAA,OAAAwH,OAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAAvE,GAAA,EAAA,aAAA;IAAArC,KAAA,EAGO,SAAAiF,WAAAA,GAA0B;AACzB,MAAA,IAAE7F,MAAQ,GAAS,IAAA,CAAjBA,MAAQ;QAAAF,IAAA,GAAS,IAAA,CAATA,IAAA,CAAA;MAChB,IAAI6D,OAAmB,EAAC,CAAA;AACxB,MAAA,IAAI3D,MAAQ,EAAA;QACV,IAAIyC,KAAM,CAAAC,OAAA,CAAQ1C,MAAO,CAAAQ,QAAQ,CAAG,EAAA;UAClCmD,IAAA,GAAO3D,MAAO,CAAAQ,QAAA,CAAA;AAChB,SAAA;iBACSV,IAAM,EAAA;QACf6D,IAAA,GAAO7D,IAAK,CAAAU,QAAA,CAAA;AACd,OAAA;AACO,MAAA,OAAAmD,IAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAAV,GAAA,EAAA,SAAA;IAAArC,KAAA,EAGO,SAAA6G,OAAAA,GAAoB;AACnB,MAAA,IAAAD,OAAA,GAAU,KAAK9C,UAAW,EAAA,CAAA;MACzB,OAAA8C,OAAA,CAAQA,OAAQ,CAAAzD,MAAA,GAAS,CAAM,CAAA,IAAA,IAAA,CAAA;AACxC,KAAA;AAAA,GAAA,EAAA;IAAAd,GAAA,EAAA,UAAA;IAAArC,KAAA,EAIO,SAAAuE,QAAAA,GAAmB;AAClB,MAAA,IAAAxB,IAAA,GAAO,KAAKkC,WAAY,EAAA,CAAA;AACvB,MAAA,OAAAlC,IAAA,CAAK+D,QAAQ,IAAI,CAAA,CAAA;AAC1B,KAAA;AAAA,GAAA,EAAA;IAAAzE,GAAA,EAAA,SAAA;IAAArC,KAAA,EAGO,SAAA+G,OAAAA,GAAsB;AACrB,MAAA,IAAApC,KAAA,GAAQ,KAAKb,UAAW,EAAA,CAAA;AAC9Ba,MAAAA,KAAA,CAAMqC,QAAQ,IAAI,CAAA,CAAA;MAClB,OAAOrC,MAAMsC,OAAQ,EAAA,CAAA;AACvB,KAAA;AAAA,GAAA,EAAA;IAAA5E,GAAA,EAAA,UAAA;IAAArC,KAAA,EAGO,SAAA2C,QAAAA,GAAmB;AAClB,MAAA,IAAAiE,OAAA,GAAU,KAAK9C,UAAW,EAAA,CAAA;MAChC,OAAO8C,OAAQ,CAAAzD,MAAA,CAAA;AACjB,KAAA;AAAA,GAAA,EAAA;IAAAd,GAAA,EAAA,QAAA;IAAArC,KAAA,EAKO,SAAAkH,MAAAA,GAAkB;AACjB,MAAA,IAAAC,UAAA,GAIF,IAAK,CAAAjI,IAAA;QAHPK,MAAA,GAAA4H,UAAA,CAAA5H,MAAA;QACA6H,SAAA,GAAAD,UAAA,CAAAC,SAAA;QACAC,SAAA,GAAAF,UAAA,CAAAE,SAAA,CAAA;MAGF,IAAIC,IAAO,GAAA,KAAA,CAAA;AACX,MAAA,IAAID,SAAW,EAAA;AAEP,QAAA,IAAAE,SAAA,GAAY,KAAKC,QAAS,EAAA,CAAA;AACzBF,QAAAA,IAAA,GAAA/H,MAAA,CAAOkI,OAAOF,SAAS,CAAA,CAAA;AAChC,OAAA;AAEA,MAAA,IAAID,IAAM,EAAA;QACEF,SAAA,CAAAvG,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;OACrB,MAAA,IAAAoH,SAAA,CAAU1H,GAAI,CAAA,IAAA,CAAKM,KAAK,CAAG,EAAA;AAC1BoH,QAAAA,SAAA,CAAA,QAAA,CAAA,CAAO,KAAKpH,KAAK,CAAA,CAAA;AAC7B,OAAA;AAEO,MAAA,OAAAsH,IAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAAjF,GAAA,EAAA,WAAA;IAAArC,KAAA,EAGO,SAAA0H,SAAAA,GAAqB;AACpB,MAAA,IAAAC,WAAA,GAIF,IAAK,CAAAzI,IAAA;QAHP6B,OAAA,GAAA4G,WAAA,CAAA5G,OAAA;QACAsG,SAAA,GAAAM,WAAA,CAAAN,SAAA;QACA9H,MAAA,GAAAoI,WAAA,CAAApI,MAAA,CAAA;AAEI,MAAA,IAAEqI,wBAA0BrI,MAAA,CAA1BqI;MAER,IAAInH,OAAU,GAAA,IAAA,CAAA;MAEd,IAAI,CAACM,OAAA,CAAQrB,GAAI,CAAA,IAAA,CAAKM,KAAK,CAAG,EAAA;AAErB,QAAA,OAAA,KAAA,CAAA;AACT,OAAA;AAEI,MAAA,IAAAqH,SAAA,IAAa,CAACO,qBAAuB,EAAA;AAG5BnH,QAAAA,OAAA,GAAA,IAAA,CAAKF,cAAc,IAAK,CAAAD,QAAA,CAAA;AAC5B,QAAA,OAAAG,OAAA,CAAA;AACT,OAAA;MAGA,IAAIoH,aAAgB,GAAA,IAAA,CAAA;AACd,MAAA,IAAAjB,OAAA,GAAU,KAAK9C,UAAW,EAAA,CAAA;AAC5B,MAAA,IAAA8C,OAAA,CAAQzD,SAAS,CAAG,EAAA;AACtB0E,QAAAA,aAAA,GAAgBjB,OAAQ,CAAAkB,KAAA,CAAM,UAACxE,IAAA,EAAA;UAAA,OAAmBA,KAAKhC,QAAQ,CAAA;SAAA,CAAA,CAAA;AACjE,OAAA;AAEA,MAAA,IAAI+F,SAAW,EAAA;QACH5G,OAAA,GAAAoH,aAAA,KAAkB,IAAK,CAAAvH,QAAA,IAAY,IAAK,CAAAC,UAAA,CAAA,CAAA;AACpD,OAAO,MAAA;AACKE,QAAAA,OAAA,GAAAoH,aAAA,CAAA;AACZ,OAAA;AACO,MAAA,OAAApH,OAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAA4B,GAAA,EAAA,YAAA;IAAArC,KAAA,EAGO,SAAA+H,UAAAA,GAAa;AACZ,MAAA,IAAE7I,OAAS,IAAA,CAATA;AACF,MAAA,IAAEmI,SAAW,GAAWnI,IAAA,CAAtBmI,SAAW;QAAA9H,MAAA,GAAWL,IAAA,CAAXK,MAAA,CAAA;AACb,MAAA,IAAEV,QAAU,GAA0BU,MAAA,CAApCV,QAAU;QAAA+I,qBAAA,GAA0BrI,MAAA,CAA1BqI,qBAAA,CAAA;AAClB,MAAA,IAAIP,aAAa,CAACO,qBAAA,IAAyB,IAAK,CAAArH,UAAA,IAAc,CAAC,IAAK,CAAAD,QAAA,EAAiB,OAAA,IAAA,CAAA;AAC9E,MAAA,OAAA,CAAC,EAAEzB,QAAA,IAAY,IAAK,CAAAA,QAAA,CAAA,CAAA;AAC7B,KAAA;AAAA,GAAA,EAAA;IAAAwD,GAAA,EAAA,aAAA;IAAArC,KAAA,EAGO,SAAAgI,WAAAA,GAAc;AACnB,MAAA,OAAO,CAAC,EAAEtI,GAAA,CAAI,IAAM,EAAA,uBAAuB,KAAK,IAAK,CAAAZ,SAAA,CAAA,CAAA;AACvD,KAAA;AAAA,GAAA,EAAA;IAAAuD,GAAA,EAAA,eAAA;IAAArC,KAAA,EAGO,SAAAiI,aAAAA,GAAgB;AACrB,MAAA,OAAO,CAAC,EAAEvI,GAAA,CAAI,IAAM,EAAA,yBAAyB,KAAK,IAAK,CAAAhB,WAAA,CAAA,CAAA;AACzD,KAAA;AAAA,GAAA,EAAA;IAAA2D,GAAA,EAAA,aAAA;IAAArC,KAAA,EAGO,SAAAkI,WAAAA,GAAc;AACnB,MAAA,OAAO,CAAC,EAAExI,GAAA,CAAI,IAAM,EAAA,uBAAuB,KAAK,IAAK,CAAAf,SAAA,CAAA,CAAA;AACvD,KAAA;AAAA,GAAA,EAAA;IAAA0D,GAAA,EAAA,aAAA;IAAArC,KAAA,EAGO,SAAAmI,WAAAA,GAAc;AACnB,MAAA,OAAO,CAAC,EAAEzI,GAAA,CAAI,IAAM,EAAA,uBAAuB,KAAK,IAAK,CAAAd,SAAA,CAAA,CAAA;AACvD,KAAA;AAAA,GAAA,EAAA;IAAAyD,GAAA,EAAA,WAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAoI,SAAUtD,CAAAA,GAAqC,EAAA;AAC9C,MAAA,IAAE5F,IAAM,GAAU,IAAA,CAAhBA,IAAM;QAAAc,KAAA,GAAU,IAAA,CAAVA,KAAA,CAAA;AACR,MAAA,IAAA6C,UAAA,GAAaiC,OAAO5F,IAAK,CAAA2D,UAAA,CAAA;AACxB,MAAA,OAAA,CAAC,EAAE3D,IAAK,CAAA6B,OAAA,CAAQrB,IAAIM,KAAK,CAAA,IAAK6C,UAAW,CAAAnD,GAAA,CAAIM,KAAK,CAAA,CAAA,CAAA;AAC3D,KAAA;AAAA,GAAA,EAAA;IAAAqC,GAAA,EAAA,YAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAqI,UAAWvD,CAAAA,GAAqC,EAAA;AACrD,MAAA,IAAQ5F,IAAA,GAA4B,IAAA,CAA5BA,IAAA;QAAMc,KAAO,GAAe,IAAA,CAAtBA,KAAO;QAAAO,UAAA,GAAe,IAAA,CAAfA,UAAA,CAAA;AACf,MAAA,IAAE8G,SAAW,GAAWnI,IAAA,CAAtBmI,SAAW;QAAA9H,MAAA,GAAWL,IAAA,CAAXK,MAAA,CAAA;AACb,MAAA,IAAEqI,wBAA0BrI,MAAA,CAA1BqI;MACJ,IAAAP,SAAA,IAAa,CAACO,qBAAyB,IAAArH,UAAA,EAAmB,OAAA,IAAA,CAAA;AACxD,MAAA,IAAAqC,WAAA,GAAckC,OAAO5F,IAAK,CAAA0D,WAAA,CAAA;AACzB,MAAA,OAAA,CAAC,EAAE1D,IAAK,CAAA6B,OAAA,CAAQrB,IAAIM,KAAK,CAAA,IAAK4C,WAAY,CAAAlD,GAAA,CAAIM,KAAK,CAAA,CAAA,CAAA;AAC5D,KAAA;AAAA,GAAA,EAAA;IAAAqC,GAAA,EAAA,WAAA;AAAArC,IAAAA,KAAA,EAIO,SAAAuC,SAAUuC,CAAAA,GAA0B,EAAA;AACnC,MAAA,IAAElF,QAAU,GAAS,IAAA,CAAnBA,QAAU;QAAAV,IAAA,GAAS,IAAA,CAATA,IAAA,CAAA;AACZ,MAAA,IAAEoD,aAAc,GAAIpD,IAAK,CAAAK,MAAA,CAAvB+C,aAAc,CAAA;MACtB,IAAIb,OAAU,GAAA,KAAA,CAAA;AACR,MAAA,IAAAe,UAAA,GAAasC,OAAO5F,IAAK,CAAAsD,UAAA,CAAA;MAC/B,IAAItD,IAAK,CAAA6B,OAAA,CAAQrB,GAAI,CAAA,IAAA,CAAKM,KAAK,CAAG,EAAA;QAChC,IAAIwC,UAAW,CAAA9C,GAAA,CAAI,IAAK,CAAAM,KAAK,CAAG,EAAA;AAEpByB,UAAAA,OAAA,GAAA,IAAA,CAAA;AACZ,SAAA,MAAA,IACEI,MAAMC,OAAQ,CAAAlC,QAAQ,KACnBA,QAAS,CAAAuD,MAAA,GAAS,CAClB,IAAA,CAACb,aACJ,EAAA;AAEUb,UAAAA,OAAA,GAAA7B,QAAA,CAASkI,KAAM,CAAA,UAACxE,IAAS,EAAA;AAC3B,YAAA,IAAAgF,cAAA,GAAiBhF,IAAK,CAAAf,SAAA,CAAUC,UAAU,CAAA,CAAA;AACzC,YAAA,OAAA8F,cAAA,CAAA;AACT,WAAC,CAAA,CAAA;AACH,SAAA,MAAA,IAAW,CAAChG,aAAe,EAAA;AAGnB,UAAA,IAAAsE,OAAA,GAAU,KAAK9C,UAAW,EAAA,CAAA;AACtBrC,UAAAA,OAAA,GAAAmF,OAAA,CAAQ5C,KAAK,UAACV,IAAA,EAAA;AAAA,YAAA,OAASd,WAAW9C,GAAI,CAAA4D,IAAA,CAAKtD,KAAK,CAAC,CAAA;WAAA,CAAA,CAAA;AAC7D,SAAA;AACF,OAAA;MACA,OAAO,CAAC,CAACyB,OAAA,CAAA;AACX,KAAA;AAAA,GAAA,EAAA;IAAAY,GAAA,EAAA,iBAAA;IAAArC,KAAA,EAGO,SAAAuI,eAAAA,GAA2B;AAC1B,MAAA,IAAE3I,QAAU,GAAS,IAAA,CAAnBA,QAAU;QAAAV,IAAA,GAAS,IAAA,CAATA,IAAA,CAAA;AACZ,MAAA,IAAEoD,aAAc,GAAIpD,IAAK,CAAAK,MAAA,CAAvB+C,aAAc,CAAA;AACtB,MAAA,IAAIA,aAAe,EAAA;AACV,QAAA,OAAA,KAAA,CAAA;AACT,OAAA;MACA,IAAIJ,aAAgB,GAAA,KAAA,CAAA;AAChB,MAAA,IAAAL,KAAA,CAAMC,OAAQ,CAAAlC,QAAQ,CAAG,EAAA;QAE3B,IAAI4I,YAA+B,GAAA,IAAA,CAAA;AACnBtG,QAAAA,aAAA,GAAAtC,QAAA,CAASoE,IAAK,CAAA,UAACV,IAAmB,EAAA;AAC5C,UAAA,IAAAA,IAAA,CAAKiF,iBAAmB,EAAA;AAEnB,YAAA,OAAA,IAAA,CAAA;AACT,WAAA;AACI,UAAA,IAAAE,MAAA,CAAOD,YAAY,CAAG,EAAA;AACxBA,YAAAA,YAAA,GAAelF,KAAKf,SAAU,EAAA,CAAA;AAChC,WAAA;AACI,UAAA,IAAAiG,YAAA,KAAiBlF,IAAK,CAAAf,SAAA,EAAa,EAAA;AAE9B,YAAA,OAAA,IAAA,CAAA;AACT,WAAA;AACO,UAAA,OAAA,KAAA,CAAA;AACT,SAAC,CAAA,CAAA;AACH,OAAA;AACO,MAAA,OAAAL,aAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAAG,GAAA,EAAA,SAAA;IAAArC,KAAA,EAEO,SAAA0I,OAAAA,GAAmB;AAClB,MAAA,IAAAtE,QAAA,GAAW,KAAKa,WAAY,EAAA,CAAA;AAClC,MAAA,OAAOb,SAAS,CAAO,CAAA,KAAA,IAAA,CAAA;AACzB,KAAA;AAAA,GAAA,EAAA;IAAA/B,GAAA,EAAA,QAAA;IAAArC,KAAA,EAEO,SAAA2I,MAAAA,GAAkB;AACjB,MAAA,IAAAvE,QAAA,GAAW,KAAKa,WAAY,EAAA,CAAA;MAC3B,OAAAb,QAAA,CAASA,QAAS,CAAAjB,MAAA,GAAS,CAAO,CAAA,KAAA,IAAA,CAAA;AAC3C,KAAA;AAAA,GAAA,EAAA;IAAAd,GAAA,EAAA,QAAA;IAAArC,KAAA,EAGO,SAAA4I,MAAAA,GAAkB;MACvB,IAAIA,MAAS,GAAA,KAAA,CAAA;MACb,IAAI/G,KAAM,CAAAC,OAAA,CAAQ,IAAK,CAAAlC,QAAQ,CAAG,EAAA;AACvBgJ,QAAAA,MAAA,GAAA,IAAA,CAAKhJ,SAASuD,MAAU,IAAA,CAAA,CAAA;AACnC,OAAO,MAAA;AACLyF,QAAAA,MAAA,GAAS,CAAC,IAAK,CAAAhJ,QAAA,CAAA;AACjB,OAAA;AACO,MAAA,OAAAgJ,MAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAAvG,GAAA,EAAA,MAAA;AAAArC,IAAAA,KAAA,EAMO,SAAA6I,IAAKC,CAAAA,SAA0B,EAAA;MACpC,IAAA,CAAKvI,UAAa,GAAAuI,SAAA,CAAA;AACb,MAAA,IAAA,CAAAxH,QAAA,GAAW,KAAK+G,UAAW,EAAA,CAAA;AAC3B,MAAA,IAAA,CAAA5H,OAAA,GAAU,KAAKiH,SAAU,EAAA,CAAA;AAChC,KAAA;AAAA,GAAA,EAAA;IAAArF,GAAA,EAAA,eAAA;IAAArC,KAAA,EAGO,SAAA+I,aAAAA,GAAsB;MAC3B,IAAA,CAAKpH,MAAO,EAAA,CAAA;MAEZ,IAAI,IAAK,CAAAL,QAAA,IAAY,IAAK,CAAA1B,QAAA,KAAa,IAAM,EAAA;QAC3C,IAAA,CAAKqC,YAAa,EAAA,CAAA;AACpB,OAAA;AACF,KAAA;AAAA,GAAA,EAAA;IAAAI,GAAA,EAAA,gBAAA;IAAArC,KAAA,EAGO,SAAAgJ,cAAAA,GAAkC;MACvC,OAAO,IAAK,CAAAC,WAAA,CAAY,CAAC,IAAA,CAAKZ,YAAY,CAAA,CAAA;AAC5C,KAAA;AAAA,GAAA,EAAA;IAAAhG,GAAA,EAAA,aAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAiJ,WAAAA,CAAY3H,UAAmB4H,IAA4C,EAAA;AAC1E,MAAA,IAAEhK,OAAS,IAAA,CAATA;AACF,MAAA,IAAEK,SAAWL,IAAA,CAAXK;MACR,IAAM4J,OAAU,GAAAvI,aAAA,CAAA;AACdwI,QAAAA,QAAU,EAAA,KAAA;AAAA,OAAA,EACPF,IAAA,CACL,CAAA;AAEA,MAAA,IAAIpE,MAAM5F,IAAK,CAAA0D,WAAA,CAAA;AACX,MAAA,IAAA,CAACuG,QAAQC,QAAU,EAAA;AACftE,QAAAA,GAAA,GAAA,IAAIuE,GAAI,CAAAnK,IAAA,CAAK0D,WAAW,CAAA,CAAA;AAChC,OAAA;AAGA,MAAA,IAAItB,QAAU,EAAA;QAEZ,IAAMgI,oBAAoB,EAAC,CAAA;AAE3BA,QAAAA,iBAAA,CAAkBtG,KAAK,IAAI,CAAA,CAAA;QAC3B,IAAIzD,OAAOgK,YAAc,EAAA;UAEvB,IAAA,CAAKzF,UAAW,EAAA,CAAEV,OAAQ,CAAA,UAACE,IAAS,EAAA;AAClCgG,YAAAA,iBAAA,CAAkBtG,KAAKM,IAAI,CAAA,CAAA;AAC7B,WAAC,CAAA,CAAA;AACH,SAAA;AACkBgG,QAAAA,iBAAA,CAAAlG,OAAA,CAAQ,UAACE,IAAS,EAAA;UAClC,IAAI2E,aAAgB,GAAA,KAAA,CAAA;UAEpB,IAAI3E,KAAKlE,MAAQ,EAAA;AACC6I,YAAAA,aAAA,GAAA3E,IAAA,CAAKlE,OAAO6I,aAAc,EAAA,CAAA;AAC5C,WAAO,MAAA;AAAA,YAAA,IAAAuB,YAAA,CAAA;AACLvB,YAAAA,aAAA,GAAgB/I,SAAAA,IAAAA,IAAAA,2CAAAA,KAAMK,MAAQ,MAAAiK,IAAAA,IAAAA,YAAA,KAAdA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAA,CAAc9K,WAAA,CAAA;AAChC,WAAA;AACA,UAAA,IAAIuJ,aAAe,EAAA;AAEX,YAAA,IAAA7D,QAAA,GAAWd,KAAK2B,WAAY,EAAA,CAAA;AACzBb,YAAAA,QAAA,CAAAhB,OAAA,CAAQ,UAACqG,KAAU,EAAA;AACtB3E,cAAAA,GAAA,CAAA,QAAA,CAAA,CAAO2E,MAAMzJ,KAAK,CAAA,CAAA;cAEtByJ,KAAA,CAAM9H,MAAO,EAAA,CAAA;cACb8H,KAAA,CAAMC,cAAe,EAAA,CAAA;AACvB,aAAC,CAAA,CAAA;AACH,WAAA;UAEI5E,GAAA,CAAAjE,GAAA,CAAIyC,IAAK,CAAAtD,KAAA,EAAO,IAAI,CAAA,CAAA;UACxBsD,IAAA,CAAK3B,MAAO,EAAA,CAAA;AACd,SAAC,CAAA,CAAA;AACH,OAAO,MAAA;AACDmD,QAAAA,GAAA,CAAA,QAAA,CAAA,CAAO,KAAK9E,KAAK,CAAA,CAAA;AACvB,OAAA;MAEA,IAAImJ,QAAQC,QAAU,EAAA;QACpB,IAAA,CAAKL,aAAc,EAAA,CAAA;QACnB,IAAA,CAAKpH,MAAO,EAAA,CAAA;QACZ,IAAA,CAAK+H,cAAe,EAAA,CAAA;AACtB,OAAA;AAEO,MAAA,OAAAxK,IAAA,CAAKyK,YAAY7E,GAAG,CAAA,CAAA;AAC7B,KAAA;AAAA,GAAA,EAAA;IAAAzC,GAAA,EAAA,eAAA;IAAArC,KAAA,EAGO,SAAA4J,aAAAA,GAAiC;MACtC,OAAO,IAAK,CAAAC,UAAA,CAAW,CAAC,IAAA,CAAKzB,WAAW,CAAA,CAAA;AAC1C,KAAA;AAAA,GAAA,EAAA;IAAA/F,GAAA,EAAA,YAAA;AAAArC,IAAAA,KAAA,EAGO,SAAA6J,UAAAA,CAAWzI,SAAkB8H,IAA4C,EAAA;AACxE,MAAA,IAAEhK,OAAS,IAAA,CAATA;MACR,IAAMiK,OAAU,GAAAvI,aAAA,CAAA;AACdwI,QAAAA,QAAU,EAAA,KAAA;AAAA,OAAA,EACPF,IAAA,CACL,CAAA;AACM,MAAA,IAAA3J,MAAA,GAASL,IAAK,CAAAK,MAAA,IAAU,EAAC,CAAA;AAC/B,MAAA,IAAIuF,MAAM5F,IAAK,CAAA2D,UAAA,CAAA;AACX,MAAA,IAAA,CAACsG,QAAQC,QAAU,EAAA;AACftE,QAAAA,GAAA,GAAA,IAAIuE,GAAI,CAAAnK,IAAA,CAAK2D,UAAU,CAAA,CAAA;AAC/B,OAAA;AACI,MAAA,IAAA,IAAA,CAAKqF,aAAe,EAAA;AACtB,QAAA,IAAI9G,OAAS,EAAA;UACX,IAAM0I,QAAW,GAAAjI,KAAA,CAAMkI,IAAK,CAAAjF,GAAA,CAAIrF,MAAM,CAAA,CAAA;AAClC,UAAA,IAAA,CAACF,OAAOyK,cAAgB,EAAA;YAC1BlF,GAAA,CAAImF,KAAM,EAAA,CAAA;AACZ,WAAA;AACSH,UAAAA,QAAA,CAAA1G,OAAA,CAAQ,UAACpD,KAAU,EAAA;AACpB,YAAA,IAAAsD,IAAA,GAAOpE,IAAK,CAAAgL,OAAA,CAAQlK,KAAK,CAAA,CAAA;AAC/BsD,YAAAA,IAAA,aAAAA,IAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,IAAA,CAAM3B,MAAO,EAAA,CAAA;AACf,WAAC,CAAA,CAAA;UACGmD,GAAA,CAAAjE,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AAC1B,SAAO,MAAA;AACD8E,UAAAA,GAAA,CAAA,QAAA,CAAA,CAAO,KAAK9E,KAAK,CAAA,CAAA;AACvB,SAAA;AACF,OAAA;MACA,IAAA,CAAK2B,MAAO,EAAA,CAAA;AACL,MAAA,OAAAzC,IAAA,CAAKiL,WAAWrF,GAAG,CAAA,CAAA;AAC5B,KAAA;AAAA,GAAA,EAAA;IAAAzC,GAAA,EAAA,eAAA;IAAArC,KAAA,EAGO,SAAAoK,aAAAA,GAAiC;MACtC,OAAO,IAAK,CAAAC,UAAA,CAAW,CAAC,IAAA,CAAK9H,WAAW,CAAA,CAAA;AAC1C,KAAA;AAAA,GAAA,EAAA;IAAAF,GAAA,EAAA,YAAA;AAAArC,IAAAA,KAAA,EAIO,SAAAqK,UAAAA,CAAW5I,SAAkByH,IAA4C,EAAA;AACxE,MAAA,IAAEhK,OAAS,IAAA,CAATA;AACF,MAAA,IAAAK,MAAA,GAASL,IAAK,CAAAK,MAAA,IAAU,EAAC,CAAA;MAC/B,IAAM4J,OAAU,GAAAvI,aAAA,CAAA;AACdwI,QAAAA,QAAU,EAAA,KAAA;AAAA,OAAA,EACPF,IAAA,CACL,CAAA;AACA,MAAA,IAAIpE,MAAM5F,IAAK,CAAAsD,UAAA,CAAA;AACX,MAAA,IAAA,CAAC2G,QAAQC,QAAU,EAAA;AACftE,QAAAA,GAAA,GAAA,IAAIuE,GAAI,CAAAnK,IAAA,CAAKsD,UAAU,CAAA,CAAA;AAC/B,OAAA;MACA,IAAI,KAAK2F,WAAY,EAAA,IAAK1G,OAAY,KAAA,IAAA,CAAKc,WAAa,EAAA;QACtD,IAAIhD,OAAO+C,aAAe,EAAA;AACxB,UAAA,IAAIb,OAAS,EAAA;YACPqD,GAAA,CAAAjE,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AAC1B,WAAO,MAAA;AACD8E,YAAAA,GAAA,CAAA,QAAA,CAAA,CAAO,KAAK9E,KAAK,CAAA,CAAA;AACvB,WAAA;AACF,SAAO,MAAA;AACC,UAAA,IAAAJ,QAAA,GAAW,KAAKgF,IAAK,EAAA,CAAA;AAElBhF,UAAAA,QAAA,CAAAwD,OAAA,CAAQ,UAACE,IAAS,EAAA;AACzB,YAAA,IAAI7B,OAAS,EAAA;cACPqD,GAAA,CAAAjE,GAAA,CAAIyC,IAAK,CAAAtD,KAAA,EAAO,IAAI,CAAA,CAAA;AAC1B,aAAO,MAAA;AACD8E,cAAAA,GAAA,CAAA,QAAA,CAAA,CAAOxB,KAAKtD,KAAK,CAAA,CAAA;AACvB,aAAA;AACF,WAAC,CAAA,CAAA;AAGK,UAAA,IAAA4G,OAAA,GAAU,KAAK9C,UAAW,EAAA,CAAA;AACxB8C,UAAAA,OAAA,CAAAxD,OAAA,CAAQ,UAACE,IAAS,EAAA;AACpBwB,YAAAA,GAAA,CAAA,QAAA,CAAA,CAAOxB,KAAKtD,KAAK,CAAA,CAAA;AACvB,WAAC,CAAA,CAAA;AACH,SAAA;AACF,OAAA;MACA,IAAImJ,QAAQC,QAAU,EAAA;QACpB,IAAI7J,OAAO+C,aAAe,EAAA;UACxB,IAAA,CAAKH,aAAc,EAAA,CAAA;AACrB,SAAO,MAAA;UACL,IAAMmI,eAAepL,IAAK,CAAAqL,eAAA,CAAgB,CAAC,IAAA,CAAKvK,KAAK,CAAC,CAAA,CAAA;AACzCsK,UAAAA,YAAA,CAAAlH,OAAA,CAAQ,UAACE,IAAS,EAAA;YAC7BA,IAAA,CAAKnB,aAAc,EAAA,CAAA;AACrB,WAAC,CAAA,CAAA;AACH,SAAA;AACF,OAAA;AACO,MAAA,OAAAjD,IAAA,CAAKsL,WAAW1F,GAAG,CAAA,CAAA;AAC5B,KAAA;AAAA,GAAA,EAAA;IAAAzC,GAAA,EAAA,QAAA;IAAArC,KAAA,EAKO,SAAA2B,MAAAA,GAAe;AACf,MAAA,IAAA,CAAAnB,KAAA,GAAQ,KAAKmC,QAAS,EAAA,CAAA;AACtB,MAAA,IAAA,CAAAvC,SAAA,GAAY,KAAKsI,OAAQ,EAAA,CAAA;AACzB,MAAA,IAAA,CAAArI,QAAA,GAAW,KAAKsI,MAAO,EAAA,CAAA;AACvB,MAAA,IAAA,CAAAxI,QAAA,GAAW,KAAKyI,MAAO,EAAA,CAAA;AACvB,MAAA,IAAA,CAAA1I,WAAA,GAAc,KAAKiI,WAAY,EAAA,CAAA;AAC/B,MAAA,IAAA,CAAA7H,QAAA,GAAW,KAAK4G,MAAO,EAAA,CAAA;AACvB,MAAA,IAAA,CAAA9F,OAAA,GAAU,KAAKgH,SAAU,EAAA,CAAA;AACzB,MAAA,IAAA,CAAA9G,QAAA,GAAW,KAAK+G,UAAW,EAAA,CAAA;AAC3B,MAAA,IAAA,CAAA5H,OAAA,GAAU,KAAKiH,SAAU,EAAA,CAAA;AACzB,MAAA,IAAA,CAAAxI,IAAA,CAAKwH,QAAQ,IAAI,CAAA,CAAA;AACxB,KAAA;AAAA,GAAA,EAAA;IAAArE,GAAA,EAAA,eAAA;AAAArC,IAAAA,KAAA,EAGO,SAAAmC,aAAcsI,CAAAA,iBAAmC,EAAA;AAChD,MAAA,IAAEvL,OAAS,IAAA,CAATA;AACH,MAAA,IAAA,CAAAgB,WAAA,GAAc,KAAKiI,WAAY,EAAA,CAAA;MACpC,IAAI,IAAK,CAAAjI,WAAA,KAAgB,CAAC,IAAA,CAAKrB,YAAY4L,iBAAoB,CAAA,EAAA;AACxD,QAAA,IAAA,CAAAhJ,OAAA,GAAU,KAAKc,SAAU,EAAA,CAAA;QAC9B,IAAI,KAAKd,OAAS,EAAA;UAChBvC,IAAA,CAAKsD,UAAW,CAAA3B,GAAA,CAAI,IAAK,CAAAb,KAAA,EAAO,IAAI,CAAA,CAAA;AACtC,SAAA;AACK,QAAA,IAAA,CAAAkC,aAAA,GAAgB,KAAKqG,eAAgB,EAAA,CAAA;AAC1CrJ,QAAAA,IAAA,CAAKwH,QAAQ,IAAI,CAAA,CAAA;AACnB,OAAA;AACF,KAAA;AAAA,GAAA,EAAA;IAAArE,GAAA,EAAA,gBAAA;IAAArC,KAAA,EAIO,SAAA0J,cAAAA,GAAuB;AACtB,MAAA,IAAE9J,WAAa,IAAA,CAAbA;AACJ,MAAA,IAAAiC,KAAA,CAAMC,OAAQ,CAAAlC,QAAQ,CAAG,EAAA;AAClBA,QAAAA,QAAA,CAAAwD,OAAA,CAAQ,UAACE,IAAS,EAAA;UACzBA,IAAA,CAAK3B,MAAO,EAAA,CAAA;UACZ2B,IAAA,CAAKnB,aAAc,EAAA,CAAA;UACnBmB,IAAA,CAAKoG,cAAe,EAAA,CAAA;AACtB,SAAC,CAAA,CAAA;AACH,OAAA;AACF,KAAA;AAAA,GAAA,EAAA;IAAArH,GAAA,EAAA,eAAA;IAAArC,KAAA,EAIO,SAAAuF,aAAAA,GAAsB;AACrB,MAAA,IAAEnG,SAAW,IAAA,CAAXA;AACR,MAAA,IAAIA,MAAQ,EAAA;QACVA,MAAA,CAAOuC,MAAO,EAAA,CAAA;QACdvC,MAAA,CAAO+C,aAAc,EAAA,CAAA;QACrB/C,MAAA,CAAOmG,aAAc,EAAA,CAAA;AACvB,OAAA;AACF,KAAA;AAAA,GAAA,EAAA;IAAAlD,GAAA,EAAA,eAAA;IAAArC,KAAA,EAGO,SAAAwD,aAAAA,GAAgB;AACf,MAAA,IAAEtE,OAAS,IAAA,CAATA;MACR,IAAMoL,eAAepL,IAAK,CAAAqL,eAAA,CAAgB,CAAC,IAAA,CAAKvK,KAAK,CAAC,CAAA,CAAA;AACzCsK,MAAAA,YAAA,CAAAlH,OAAA,CAAQ,UAACE,IAAS,EAAA;QAC7BA,IAAA,CAAK3B,MAAO,EAAA,CAAA;QACZ2B,IAAA,CAAKnB,aAAc,EAAA,CAAA;AACrB,OAAC,CAAA,CAAA;MACDjD,IAAA,CAAK0C,MAAO,EAAA,CAAA;AACd,KAAA;AAAA,GAAA,EAAA;IAAAS,GAAA,EAAA,MAAA;IAAArC,KAAA,EAKO,SAAA4E,IAAAA,GAAmB;AAClB,MAAA,IAAEhF,WAAa,IAAA,CAAbA;MACR,IAAImD,OAAmB,EAAC,CAAA;AACxBA,MAAAA,IAAA,CAAKC,KAAK,IAAI,CAAA,CAAA;AACd,MAAA,IAAInB,MAAMC,OAAQ,CAAAlC,QAAQ,CAAK,IAAAA,QAAA,CAASuD,SAAS,CAAG,EAAA;AACzCvD,QAAAA,QAAA,CAAAwD,OAAA,CAAQ,UAACE,IAAS,EAAA;UACzBP,IAAA,GAAOA,IAAK,CAAA5B,MAAA,CAAOmC,IAAK,CAAAsB,IAAA,EAAM,CAAA,CAAA;AAChC,SAAC,CAAA,CAAA;AACH,OAAA;AACO,MAAA,OAAA7B,IAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAAV,GAAA,EAAA,UAAA;IAAArC,KAAA,EAKO,SAAAwH,QAAAA,GAA8B;AAC/B,MAAA,IAAEvH,QAAU,IAAA,CAAVA;MACN,IAAI,CAACA,KAAO,EAAA;AACVA,QAAAA,KAAA,GAAQyK,gBAAgB,IAAI,CAAA,CAAA;QAC5B,IAAA,CAAKzK,KAAQ,GAAAA,KAAA,CAAA;AACf,OAAA;AACA0K,MAAAA,eAAA,CAAgB1K,OAAO,IAAI,CAAA,CAAA;AACpB,MAAA,OAAAA,KAAA,CAAA;AACT,KAAA;AAAA,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAhB,QAAA,CAAA;AAAA,CAAA;;;;"}