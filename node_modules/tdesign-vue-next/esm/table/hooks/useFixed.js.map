{"version":3,"file":"useFixed.js","sources":["../../../src/table/hooks/useFixed.ts"],"sourcesContent":["import {\n  ref,\n  reactive,\n  watch,\n  toRefs,\n  SetupContext,\n  onMounted,\n  computed,\n  ComputedRef,\n  onBeforeUnmount,\n  Ref,\n} from 'vue';\nimport get from 'lodash/get';\nimport debounce from 'lodash/debounce';\nimport log from '../../_common/js/log';\nimport { ClassName, Styles } from '../../common';\nimport { BaseTableCol, BaseTableInstanceFunctions, TableRowData, TdBaseTableProps } from '../type';\nimport { getScrollbarWidthWithCSS } from '../../_common/js/utils/getScrollbarWidth';\nimport { on, off } from '../../utils/dom';\nimport { FixedColumnInfo, TableRowFixedClasses, RowAndColFixedPosition, TableColFixedClasses } from '../interface';\nimport { getIEVersion } from '../../_common/js/utils/helper';\n\n// 固定列相关类名处理\nexport function getColumnFixedStyles(\n  col: TdBaseTableProps['columns'][0],\n  index: number,\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableColFixedClasses: TableColFixedClasses,\n): { style?: Styles; classes?: ClassName } {\n  const fixedPos = rowAndColFixedPosition?.get(col.colKey || index);\n  if (!fixedPos) return {};\n  const thClasses = {\n    [tableColFixedClasses.left]: col.fixed === 'left',\n    [tableColFixedClasses.right]: col.fixed === 'right',\n    [tableColFixedClasses.lastLeft]: col.fixed === 'left' && fixedPos.lastLeftFixedCol,\n    [tableColFixedClasses.firstRight]: col.fixed === 'right' && fixedPos.firstRightFixedCol,\n  };\n  const thStyles = {\n    left: col.fixed === 'left' ? `${fixedPos.left}px` : undefined,\n    right: col.fixed === 'right' ? `${fixedPos.right}px` : undefined,\n  };\n  return {\n    style: thStyles,\n    classes: thClasses,\n  };\n}\n\n// 固定行相关类名处理\nexport function getRowFixedStyles(\n  rowId: string | number,\n  rowIndex: number,\n  rowLength: number,\n  fixedRows: TdBaseTableProps['fixedRows'],\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableRowFixedClasses: TableRowFixedClasses,\n): { style: Styles; classes: ClassName } {\n  if (!fixedRows || !fixedRows.length) return { style: undefined, classes: undefined };\n  const fixedTop = rowIndex < fixedRows[0];\n  const fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];\n  const firstFixedBottomRow = rowLength - fixedRows[1];\n  const fixedPos = rowAndColFixedPosition?.get(rowId) || {};\n  const rowClasses = {\n    [tableRowFixedClasses.top]: fixedTop,\n    [tableRowFixedClasses.bottom]: fixedBottom,\n    [tableRowFixedClasses.firstBottom]: rowIndex === firstFixedBottomRow,\n    [tableRowFixedClasses.withoutBorderBottom]: rowIndex === firstFixedBottomRow - 1,\n  };\n  const rowStyles = {\n    top: fixedTop ? `${fixedPos.top}px` : undefined,\n    bottom: fixedBottom ? `${fixedPos.bottom}px` : undefined,\n  };\n  return {\n    style: rowStyles,\n    classes: rowClasses,\n  };\n}\n\nexport default function useFixed(\n  props: TdBaseTableProps,\n  context: SetupContext,\n  finalColumns: ComputedRef<BaseTableCol<TableRowData>[]>,\n  affixRef: Record<string, Ref>,\n) {\n  const {\n    columns,\n    tableLayout,\n    tableContentWidth,\n    fixedRows,\n    firstFullRow,\n    lastFullRow,\n    maxHeight,\n    headerAffixedTop,\n    footerAffixedBottom,\n    bordered,\n    resizable,\n    allowResizeColumnWidth,\n  } = toRefs(props);\n  const data = ref<TableRowData[]>([]);\n  const tableRef = ref<HTMLDivElement>();\n  const tableContentRef = ref<HTMLDivElement>();\n  const isFixedHeader = ref(false);\n  const isWidthOverflow = ref(false);\n  const tableElmRef = ref<HTMLTableElement>();\n  // CSS 样式设置了固定 6px\n  const scrollbarWidth = ref(6);\n  // 固定列、固定表头、固定表尾等内容的位置信息\n  const rowAndColFixedPosition = ref<RowAndColFixedPosition>(new Map());\n  const showColumnShadow = reactive({\n    left: false,\n    right: false,\n  });\n  // 虚拟滚动不能使用 CSS sticky 固定表头\n  const virtualScrollHeaderPos = ref<{ left: number; top: number }>({ left: 0, top: 0 });\n  const tableWidth = ref(0);\n  const tableElmWidth = ref(0);\n  const thWidthList = ref<{ [colKey: string]: number }>({});\n\n  const isFixedColumn = ref(false);\n  const isFixedRightColumn = ref(false);\n  const isFixedLeftColumn = ref(false);\n\n  const columnResizable = computed(() => allowResizeColumnWidth.value ?? resizable.value ?? false);\n\n  // 没有表头吸顶，没有虚拟滚动，则不需要表头宽度计算\n  const notNeedThWidthList = computed(\n    () =>\n      !(\n        props.headerAffixedTop ||\n        props.footerAffixedBottom ||\n        props.horizontalScrollAffixedBottom ||\n        props.scroll?.type === 'virtual'\n      ),\n  );\n\n  function setUseFixedTableElmRef(val: HTMLTableElement) {\n    tableElmRef.value = val;\n  }\n\n  function getColumnMap(\n    columns: BaseTableCol[],\n    map: RowAndColFixedPosition = new Map(),\n    levelNodes: FixedColumnInfo[][] = [],\n    level = 0,\n    parent?: FixedColumnInfo,\n  ) {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (['left', 'right'].includes(col.fixed)) {\n        isFixedColumn.value = true;\n      }\n      if (col.fixed === 'right') {\n        isFixedRightColumn.value = true;\n      }\n      if (col.fixed === 'left') {\n        isFixedLeftColumn.value = true;\n      }\n      const key = col.colKey || i;\n      const columnInfo: FixedColumnInfo = { col, parent, index: i };\n      map.set(key, columnInfo);\n      if (col.children?.length) {\n        getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);\n      }\n      if (levelNodes[level]) {\n        levelNodes[level].push(columnInfo);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        levelNodes[level] = [columnInfo];\n      }\n    }\n    return {\n      newColumnsMap: map,\n      levelNodes,\n    };\n  }\n\n  const setFixedLeftPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (col.fixed === 'right') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i - 1;\n      while (lastColIndex >= 0 && columns[lastColIndex].fixed !== 'left') {\n        lastColIndex -= 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === 0 ? parent?.left || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i - 1);\n      if (colInfo) {\n        colInfo.left = (lastColInfo?.left || defaultWidth) + (lastColInfo?.width || 0);\n      }\n      // 多级表头\n      if (col.children?.length) {\n        setFixedLeftPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  const setFixedRightPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = columns.length - 1; i >= 0; i--) {\n      const col = columns[i];\n      if (col.fixed === 'left') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i + 1;\n      while (lastColIndex < columns.length && columns[lastColIndex].fixed !== 'right') {\n        lastColIndex += 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === columns.length - 1 ? parent?.right || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i + 1);\n      if (colInfo) {\n        colInfo.right = (lastColInfo?.right || defaultWidth) + (lastColInfo?.width || 0);\n      }\n      // 多级表头\n      if (col.children?.length) {\n        setFixedRightPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  // 获取固定列位置信息。先获取节点宽度，再计算\n  const setFixedColPosition = (trList: HTMLCollection, initialColumnMap: RowAndColFixedPosition) => {\n    if (!trList) return;\n    for (let i = 0, len = trList.length; i < len; i++) {\n      const thList = trList[i].children;\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        if (!colKey) {\n          log.warn('TDesign Table', `${th.innerText} missing colKey. colKey is required for fixed column feature.`);\n        }\n        const obj = initialColumnMap.get(colKey || j);\n        if (obj?.col?.fixed) {\n          initialColumnMap.set(colKey, { ...obj, width: th.getBoundingClientRect().width });\n        }\n      }\n    }\n    setFixedLeftPos(columns.value, initialColumnMap);\n    setFixedRightPos(columns.value, initialColumnMap);\n  };\n\n  // 设置固定行位置信息 top/bottom\n  const setFixedRowPosition = (\n    trList: HTMLCollection,\n    initialColumnMap: RowAndColFixedPosition,\n    thead: HTMLTableSectionElement,\n    tfoot: HTMLTableSectionElement,\n  ) => {\n    const [fixedTopRows, fixedBottomRows] = fixedRows.value || [];\n    const { data, rowKey = 'id' } = props;\n    for (let i = 0; i < fixedTopRows; i++) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i - 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === 0) {\n        defaultBottom = thead?.getBoundingClientRect().height || 0;\n      }\n      thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr.getBoundingClientRect().height });\n    }\n    for (let i = data.length - 1; i >= data.length - fixedBottomRows; i--) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i + 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === data.length - 1) {\n        defaultBottom = tfoot?.getBoundingClientRect().height || 0;\n      }\n      thisRowInfo.bottom = (lastRowInfo.bottom || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr.getBoundingClientRect().height });\n    }\n  };\n\n  const updateRowAndColFixedPosition = (tableContentElm: HTMLElement, initialColumnMap: RowAndColFixedPosition) => {\n    rowAndColFixedPosition.value.clear();\n    if (!tableContentElm) return;\n    const thead = tableContentElm.querySelector('thead');\n    // 处理固定列\n    thead && setFixedColPosition(thead.children, initialColumnMap);\n    // 处理冻结行\n    const tbody = tableContentElm.querySelector('tbody');\n    const tfoot = tableContentElm.querySelector('tfoot');\n    tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);\n    // 更新最终 Map\n    rowAndColFixedPosition.value = initialColumnMap;\n  };\n\n  let shadowLastScrollLeft: number;\n  const updateColumnFixedShadow = (target: HTMLElement, extra?: { skipScrollLimit?: boolean }) => {\n    if (!isFixedColumn.value || !target) return;\n    const { scrollLeft } = target;\n    // 只有左右滚动，需要更新固定列阴影\n    if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;\n    shadowLastScrollLeft = scrollLeft;\n    const isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;\n    const isShowLeft = scrollLeft > 0;\n    if (showColumnShadow.left === isShowLeft && showColumnShadow.right === isShowRight) return;\n    showColumnShadow.left = isShowLeft && isFixedLeftColumn.value;\n    showColumnShadow.right = isShowRight && isFixedRightColumn.value;\n  };\n\n  // 多级表头场景较为复杂：为了滚动的阴影效果，需要知道哪些列是边界列，左侧固定列的最后一列，右侧固定列的第一列，每一层表头都需要兼顾\n  const setIsLastOrFirstFixedCol = (levelNodes: FixedColumnInfo[][]) => {\n    for (let t = 0; t < levelNodes.length; t++) {\n      const nodes = levelNodes[t];\n      for (let i = 0, len = nodes.length; i < len; i++) {\n        const colMapInfo = nodes[i];\n        const nextColMapInfo = nodes[i + 1];\n        const { parent } = colMapInfo;\n        const isParentLastLeftFixedCol = !parent || parent?.lastLeftFixedCol;\n        if (isParentLastLeftFixedCol && colMapInfo.col.fixed === 'left' && nextColMapInfo?.col.fixed !== 'left') {\n          colMapInfo.lastLeftFixedCol = true;\n        }\n        const lastColMapInfo = nodes[i - 1];\n        const isParentFirstRightFixedCol = !parent || parent?.firstRightFixedCol;\n        if (isParentFirstRightFixedCol && colMapInfo.col.fixed === 'right' && lastColMapInfo?.col.fixed !== 'right') {\n          colMapInfo.firstRightFixedCol = true;\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const updateFixedStatus = () => {\n    const { newColumnsMap, levelNodes } = getColumnMap(columns.value);\n    setIsLastOrFirstFixedCol(levelNodes);\n    const timer = setTimeout(() => {\n      if (isFixedColumn.value || fixedRows.value?.length) {\n        updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);\n      }\n      clearTimeout(timer);\n    }, 0);\n    return () => {\n      clearTimeout(timer);\n    };\n  };\n\n  const updateFixedHeader = () => {\n    const timer = setTimeout(() => {\n      if (!tableContentRef.value) return;\n      isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;\n      isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;\n      const pos = tableContentRef.value.getBoundingClientRect();\n      virtualScrollHeaderPos.value = {\n        top: pos.top,\n        left: pos.left,\n      };\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const updateTableWidth = () => {\n    const rect = tableContentRef.value?.getBoundingClientRect();\n    if (!rect) return;\n    // 存在纵向滚动条，且固定表头时，需去除滚动条宽度\n    const reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;\n    tableWidth.value = Math.floor(rect.width - reduceWidth - (props.bordered ? 1 : 0));\n    const elmRect = tableElmRef?.value?.getBoundingClientRect();\n    tableElmWidth.value = elmRect?.width;\n  };\n\n  const updateAffixPosition = () => {\n    // 在表格高度变化的时候 需要手动调整affix的位置 因为affix本身无法监听到这些变化触发重新计算\n    affixRef.paginationAffixRef.value?.handleScroll?.();\n    affixRef.horizontalScrollAffixRef.value?.handleScroll?.();\n    affixRef.headerTopAffixRef.value?.handleScroll?.();\n    affixRef.footerBottomAffixRef.value?.handleScroll?.();\n  };\n\n  const calculateThWidthList = (trList: HTMLCollection) => {\n    const widthMap: { [colKey: string]: number } = {};\n    for (let i = 0, len = trList.length; i < len; i++) {\n      const thList = trList[i].children;\n      // second for used for multiple row header\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        widthMap[colKey] = th.getBoundingClientRect().width;\n      }\n    }\n    return widthMap;\n  };\n\n  const updateThWidthList = (trList: HTMLCollection | { [colKey: string]: number }) => {\n    if (trList instanceof HTMLCollection) {\n      if (columnResizable.value) return;\n      thWidthList.value = calculateThWidthList(trList);\n    } else {\n      thWidthList.value = thWidthList.value || {};\n      Object.entries(trList).forEach(([colKey, width]) => {\n        thWidthList.value[colKey] = width;\n      });\n    }\n    return thWidthList.value;\n  };\n\n  const updateThWidthListHandler = () => {\n    if (notNeedThWidthList.value) return;\n    const timer = setTimeout(() => {\n      updateTableWidth();\n      const thead = tableContentRef.value?.querySelector('thead');\n      if (!thead) return;\n      updateThWidthList(thead.children);\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const resetThWidthList = () => {\n    thWidthList.value = {};\n  };\n\n  const emitScrollEvent = (e: WheelEvent) => {\n    props.onScrollX?.({ e });\n    props.onScrollY?.({ e });\n    props.onScroll?.({ e });\n  };\n\n  const getThWidthList = (type?: 'default' | 'calculate') => {\n    if (type === 'calculate') {\n      const trList = tableContentRef.value?.querySelector('thead')?.children;\n      return calculateThWidthList(trList);\n    }\n    return thWidthList.value || {};\n  };\n\n  watch(\n    [\n      data,\n      columns,\n      bordered,\n      tableLayout,\n      tableContentWidth,\n      isFixedHeader,\n      isWidthOverflow,\n      isFixedColumn,\n      fixedRows,\n      firstFullRow,\n      lastFullRow,\n    ],\n    updateFixedStatus,\n    { immediate: true },\n  );\n\n  watch(\n    [isFixedColumn, columns],\n    () => {\n      const timer = setTimeout(() => {\n        if (isFixedColumn.value) {\n          updateColumnFixedShadow(tableContentRef.value);\n        }\n        clearTimeout(timer);\n      }, 0);\n    },\n    { immediate: true },\n  );\n\n  watch([maxHeight, data, columns, bordered], updateFixedHeader, { immediate: true });\n\n  watch(finalColumns, () => {\n    resetThWidthList();\n  });\n\n  // 影响表头宽度的元素\n  watch(\n    [\n      data,\n      columns,\n      bordered,\n      tableLayout,\n      fixedRows,\n      isFixedHeader,\n      headerAffixedTop,\n      footerAffixedBottom,\n      tableContentWidth,\n    ],\n    () => {\n      updateThWidthListHandler();\n      updateAffixPosition();\n    },\n    { immediate: true },\n  );\n\n  const refreshTable: BaseTableInstanceFunctions['refreshTable'] = () => {\n    updateTableWidth();\n    updateFixedHeader();\n    updateThWidthListHandler();\n    updateAffixPosition();\n\n    if (isFixedColumn.value || isFixedHeader.value) {\n      updateFixedStatus();\n      updateColumnFixedShadow(tableContentRef.value, { skipScrollLimit: true });\n    }\n  };\n\n  const onResize = debounce(() => {\n    refreshTable();\n  }, 30);\n\n  let resizeObserver: ResizeObserver = null;\n  function addTableResizeObserver(tableElement: HTMLDivElement) {\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    if (getIEVersion() < 11 || typeof window.ResizeObserver === 'undefined') return;\n    off(window, 'resize', onResize);\n    resizeObserver = new window.ResizeObserver(() => {\n      refreshTable();\n      const timer = setTimeout(() => {\n        refreshTable();\n        clearTimeout(timer);\n      }, 250);\n    });\n    resizeObserver.observe(tableElement);\n    tableRef.value = tableElement;\n  }\n\n  onMounted(() => {\n    const scrollWidth = getScrollbarWidthWithCSS();\n    scrollbarWidth.value = scrollWidth;\n    const timer = setTimeout(() => {\n      updateTableWidth();\n      clearTimeout(timer);\n    });\n    const isWatchResize = isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value || !data.value.length;\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    if ((isWatchResize && getIEVersion() < 11) || typeof window.ResizeObserver === 'undefined') {\n      on(window, 'resize', onResize);\n    }\n  });\n\n  onBeforeUnmount(() => {\n    off(window, 'resize', onResize);\n    resizeObserver?.unobserve(tableRef.value);\n    resizeObserver?.disconnect();\n  });\n\n  const setData = (dataSource: TableRowData[]) => {\n    data.value = dataSource;\n  };\n\n  const setTableElmWidth = (width: number) => {\n    if (tableElmWidth.value === width) return;\n    tableElmWidth.value = width;\n  };\n\n  const updateTableAfterColumnResize = () => {\n    updateFixedStatus();\n    updateFixedHeader();\n  };\n\n  return {\n    tableWidth,\n    tableElmWidth,\n    thWidthList,\n    isFixedHeader,\n    isWidthOverflow,\n    tableContentRef,\n    isFixedColumn,\n    showColumnShadow,\n    rowAndColFixedPosition,\n    virtualScrollHeaderPos,\n    scrollbarWidth,\n    setData,\n    refreshTable,\n    setTableElmWidth,\n    emitScrollEvent,\n    updateThWidthListHandler,\n    updateColumnFixedShadow,\n    setUseFixedTableElmRef,\n    getThWidthList,\n    updateThWidthList,\n    addTableResizeObserver,\n    updateTableAfterColumnResize,\n  };\n}\n"],"names":["getColumnFixedStyles","col","index","rowAndColFixedPosition","tableColFixedClasses","_thClasses","fixedPos","get","colKey","thClasses","_defineProperty","left","fixed","right","lastLeft","lastLeftFixedCol","firstRight","firstRightFixedCol","thStyles","concat","style","classes","getRowFixedStyles","rowId","rowIndex","rowLength","fixedRows","tableRowFixedClasses","_rowClasses","length","fixedTop","fixedBottom","firstFixedBottomRow","rowClasses","top","bottom","firstBottom","withoutBorderBottom","rowStyles","useFixed","props","context","finalColumns","affixRef","_toRefs","toRefs","columns","tableLayout","tableContentWidth","firstFullRow","lastFullRow","maxHeight","headerAffixedTop","footerAffixedBottom","bordered","resizable","allowResizeColumnWidth","data","ref","tableRef","tableContentRef","isFixedHeader","isWidthOverflow","tableElmRef","scrollbarWidth","Map","showColumnShadow","reactive","virtualScrollHeaderPos","tableWidth","tableElmWidth","thWidthList","isFixedColumn","isFixedRightColumn","isFixedLeftColumn","columnResizable","computed","_ref","_allowResizeColumnWid","value","notNeedThWidthList","_props$scroll","horizontalScrollAffixedBottom","scroll","type","setUseFixedTableElmRef","val","getColumnMap","map","arguments","undefined","levelNodes","level","parent","i","len","_col$children","includes","key","columnInfo","set","children","push","newColumnsMap","setFixedLeftPos","initialColumnMap","_col$children2","colInfo","lastColIndex","lastCol","defaultWidth","lastColInfo","width","setFixedRightPos","_col$children3","setFixedColPosition","trList","thList","j","thLen","_obj$col","th","dataset","colkey","log","warn","innerText","obj","_objectSpread","getBoundingClientRect","setFixedRowPosition","thead","tfoot","_ref2","_ref3","_slicedToArray","fixedTopRows","fixedBottomRows","_props$rowKey","rowKey","tr","thisRowInfo","lastRowId","lastRowInfo","defaultBottom","height","updateRowAndColFixedPosition","tableContentElm","clear","querySelector","tbody","shadowLastScrollLeft","updateColumnFixedShadow","target","extra","scrollLeft","skipScrollLimit","isShowRight","clientWidth","scrollWidth","isShowLeft","setIsLastOrFirstFixedCol","t","nodes","colMapInfo","nextColMapInfo","isParentLastLeftFixedCol","lastColMapInfo","isParentFirstRightFixedCol","updateFixedStatus","_getColumnMap","timer","setTimeout","_fixedRows$value","clearTimeout","updateFixedHeader","scrollHeight","clientHeight","pos","updateTableWidth","_tableContentRef$valu","_tableElmRef$value","rect","reduceWidth","Math","floor","elmRect","updateAffixPosition","_affixRef$paginationA","_affixRef$paginationA2","_affixRef$horizontalS","_affixRef$horizontalS2","_affixRef$headerTopAf","_affixRef$headerTopAf2","_affixRef$footerBotto","_affixRef$footerBotto2","paginationAffixRef","handleScroll","call","horizontalScrollAffixRef","headerTopAffixRef","footerBottomAffixRef","calculateThWidthList","widthMap","updateThWidthList","HTMLCollection","Object","entries","forEach","_ref4","_ref5","updateThWidthListHandler","_tableContentRef$valu2","resetThWidthList","emitScrollEvent","e","_props$onScrollX","_props$onScrollY","_props$onScroll","onScrollX","onScrollY","onScroll","getThWidthList","_tableContentRef$valu3","_tableContentRef$valu4","watch","immediate","refreshTable","onResize","debounce","resizeObserver","addTableResizeObserver","tableElement","getIEVersion","window","ResizeObserver","off","observe","onMounted","getScrollbarWidthWithCSS","isWatchResize","on","onBeforeUnmount","_resizeObserver","_resizeObserver2","unobserve","disconnect","setData","dataSource","setTableElmWidth","updateTableAfterColumnResize"],"mappings":"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"}