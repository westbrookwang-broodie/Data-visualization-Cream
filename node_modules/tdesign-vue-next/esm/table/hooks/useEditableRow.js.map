{"version":3,"file":"useEditableRow.js","sources":["../../../src/table/hooks/useEditableRow.ts"],"sourcesContent":["import { ref, computed } from 'vue';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { PrimaryTableProps } from '../interface';\nimport { getEditableKeysMap } from '../utils';\nimport { validate } from '../../form/form-model';\nimport {\n  PrimaryTableRowEditContext,\n  TableRowData,\n  TableErrorListMap,\n  PrimaryTableInstanceFunctions,\n  ErrorListObjectType,\n} from '../type';\nimport { getCellKey } from './useRowspanAndColspan';\nimport { OnEditableChangeContext } from '../editable-cell';\n\nexport interface TablePromiseErrorData {\n  errors: ErrorListObjectType<TableRowData>[];\n  errorMap: TableErrorListMap;\n}\n\nconst cellRuleMap = new Map<any, PrimaryTableRowEditContext<TableRowData>[]>();\n\nexport default function useRowEdit(props: PrimaryTableProps) {\n  // 校验不通过的错误信息，其中 key 值为 [rowValue, col.colKey].join('__')\n  const errorListMap = ref<TableErrorListMap>({});\n  // 处于编辑态的表格行\n  const editableKeysMap = computed(() => getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || 'id'));\n  // 当前编辑的单元格\n  const editingCells = ref<{ [cellKey: string]: OnEditableChangeContext<TableRowData> }>({});\n\n  const getErrorListMapByErrors = (errors: ErrorListObjectType<TableRowData>[]): TableErrorListMap => {\n    const errorMap: TableErrorListMap = {};\n    errors.forEach(({ row, col, errorList }) => {\n      const rowValue = get(row, props.rowKey || 'id');\n      const key = [rowValue, col.colKey].join('__');\n      if (errorList?.length) {\n        errorMap[key] = errorList;\n      } else {\n        delete errorMap[key];\n      }\n    });\n    return errorMap;\n  };\n\n  // 校验一行的数据\n  const validateOneRowData = (rowValue: any) => {\n    const rowRules = cellRuleMap.get(rowValue);\n    if (!rowRules) return;\n    const list = rowRules.map(\n      (item) =>\n        new Promise<ErrorListObjectType<TableRowData>>((resolve) => {\n          const { editedRow, col } = item;\n          const rules = isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;\n          if (!col.edit || !rules || !rules.length) {\n            resolve({ ...item, errorList: [] });\n            return;\n          }\n          validate(editedRow[col.colKey], rules).then((r) => {\n            resolve({ ...item, errorList: r.filter((t) => !t.result) });\n          });\n        }),\n    );\n    return new Promise<TablePromiseErrorData>((resolve, reject) => {\n      Promise.all(list).then((errors) => {\n        resolve({\n          errors: errors.filter((t) => t.errorList?.length),\n          errorMap: getErrorListMapByErrors(errors),\n        });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验表格单行数据（对外开放方法，修改时需慎重）\n   * @param rowValue 行唯一标识\n   */\n  const validateRowData: PrimaryTableInstanceFunctions['validateRowData'] = (rowValue: any) =>\n    new Promise((resolve, reject) => {\n      validateOneRowData(rowValue).then(({ errors, errorMap }) => {\n        errorListMap.value = errorMap;\n        // 缺少校验文本显示\n        const tTrigger = 'parent';\n        props.onRowValidate?.({ trigger: tTrigger, result: errors });\n        resolve({ trigger: tTrigger, result: errors });\n      }, reject);\n    });\n\n  // 校验可编辑单元格\n  const validateTableCellData = (): Promise<{ result: TableErrorListMap }> => {\n    const cellKeys = Object.keys(editingCells.value);\n    const promiseList = cellKeys.map((cellKey) => editingCells.value[cellKey].validateEdit('parent'));\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((arr) => {\n        const allErrorListMap: TableErrorListMap = {};\n        arr.forEach((result, index) => {\n          if (result === true) return;\n          allErrorListMap[cellKeys[index]] = result;\n        });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验整个表格数据（对外开放方法，修改时需慎重）\n   */\n  const validateTableData: PrimaryTableInstanceFunctions['validateTableData'] = () => {\n    if (Object.keys(editingCells.value).length) {\n      return validateTableCellData();\n    }\n    const promiseList: Promise<TablePromiseErrorData>[] = [];\n    const data = props.data || [];\n    for (let i = 0, len = data.length; i < len; i++) {\n      const rowValue = get(data[i], props.rowKey || 'id');\n      promiseList.push(validateOneRowData(rowValue));\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((rList) => {\n        const allErrorListMap: TableErrorListMap = {};\n        rList.forEach(({ errorMap } = { errors: [], errorMap: {} }) => {\n          errorMap && Object.assign(allErrorListMap, errorMap);\n        });\n        errorListMap.value = allErrorListMap;\n        props.onValidate?.({ result: allErrorListMap });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  const onRuleChange = (context: PrimaryTableRowEditContext<TableRowData>) => {\n    // 编辑行，预存校验信息，方便最终校验\n    if (props.editableRowKeys) {\n      const rowValue = get(context.row, props.rowKey || 'id');\n      const rules = cellRuleMap.get(rowValue);\n      if (rules) {\n        const index = rules.findIndex((t) => t.col.colKey === context.col.colKey);\n        if (index === -1) {\n          rules.push(context);\n        } else {\n          rules[index] = context;\n        }\n        cellRuleMap.set(rowValue, rules);\n      } else {\n        cellRuleMap.set(rowValue, [context]);\n      }\n    }\n  };\n\n  const clearValidateData = () => {\n    errorListMap.value = {};\n  };\n\n  const onPrimaryTableCellEditChange = (params: OnEditableChangeContext<TableRowData>) => {\n    const cellKey = getCellKey(params.row, props.rowKey, params.col.colKey, params.colIndex);\n    if (params.isEdit) {\n      // @ts-ignore\n      editingCells.value[cellKey] = params;\n    } else {\n      delete editingCells.value[cellKey];\n    }\n  };\n\n  return {\n    errorListMap,\n    editableKeysMap,\n    validateTableData,\n    validateRowData,\n    onRuleChange,\n    clearValidateData,\n    onPrimaryTableCellEditChange,\n  };\n}\n"],"names":["cellRuleMap","Map","useRowEdit","props","errorListMap","ref","editableKeysMap","computed","getEditableKeysMap","editableRowKeys","data","rowKey","editingCells","getErrorListMapByErrors","errors","errorMap","forEach","_ref","row","col","errorList","rowValue","get","key","colKey","join","length","validateOneRowData","rowRules","list","map","item","Promise","resolve","editedRow","rules","isFunction","edit","_objectSpread","validate","then","r","filter","t","result","reject","all","_t$errorList","validateRowData","_ref2","_props$onRowValidate","value","tTrigger","onRowValidate","call","trigger","validateTableCellData","cellKeys","Object","keys","promiseList","cellKey","validateEdit","arr","allErrorListMap","index","validateTableData","i","len","push","rList","_props$onValidate","_ref3","arguments","undefined","assign","onValidate","onRuleChange","context","findIndex","set","clearValidateData","onPrimaryTableCellEditChange","params","getCellKey","colIndex","isEdit"],"mappings":"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"}