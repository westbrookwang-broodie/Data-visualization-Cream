{"version":3,"file":"useDragSort.js","sources":["../../../src/table/hooks/useDragSort.ts"],"sourcesContent":["// 表格 行拖拽 + 列拖拽功能\nimport { SetupContext, computed, toRefs, ref, watch, h } from 'vue';\nimport Sortable, { SortableEvent, SortableOptions, MoveEvent } from 'sortablejs';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { TableRowData, TdPrimaryTableProps, DragSortContext } from '../type';\nimport useClassName from './useClassName';\nimport log from '../../_common/js/log';\nimport { hasClass } from '../../utils/dom';\nimport swapDragArrayElement from '../../_common/js/utils/swapDragArrayElement';\nimport { BaseTableColumns } from '../interface';\nimport { getColumnDataByKey, getColumnIndexByKey } from '../utils';\n\nexport default function useDragSort(props: TdPrimaryTableProps, context: SetupContext) {\n  const { sortOnRowDraggable, dragSort, data, rowKey } = toRefs(props);\n  const { tableDraggableClasses, tableBaseClass, tableFullRowClasses } = useClassName();\n  const primaryTableRef = ref(null);\n  const columns = ref<BaseTableColumns>(props.columns || []);\n  // @ts-ignore 判断是否有拖拽列\n  const dragCol = computed(() => columns.value.find((item) => item.colKey === 'drag'));\n  // 行拖拽判断条件\n  const isRowDraggable = computed(() => sortOnRowDraggable.value || dragSort.value === 'row');\n  // 行拖拽判断条件-手柄列\n  const isRowHandlerDraggable = computed(\n    () => ['row-handler', 'row-handler-col'].includes(dragSort.value) && !!dragCol.value,\n  );\n  // 列拖拽判断条件\n  const isColDraggable = computed(() => ['col', 'row-handler-col'].includes(dragSort.value));\n  // 行拖拽排序，存储上一次的变化结果\n  const lastRowList = ref([]);\n  // 列拖拽排序，存储上一次的变化结果\n  const lastColList = ref([]);\n\n  // 行拖拽实例\n  let dragRowInstanceTmp: Sortable = null;\n  // 列拖拽实例\n  let dragColInstanceTmp: Sortable = null;\n\n  if (props.sortOnRowDraggable) {\n    log.error('Table', \"`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.\");\n  }\n\n  watch(\n    [data],\n    ([data]) => {\n      lastRowList.value = data?.map((item) => get(item, rowKey.value)) || [];\n      // Hack 处理：数据变化时，DOM 元素无法自动变化，只得手动设置顺序和重置数据\n      const timer = setTimeout(() => {\n        if (data.length) {\n          dragRowInstanceTmp?.sort(lastRowList.value);\n        } else {\n          const trList = primaryTableRef.value?.$el.querySelectorAll('tr[data-id]');\n          trList?.forEach((node: HTMLElement) => node.remove());\n        }\n        clearTimeout(timer);\n      }, 0);\n    },\n    { immediate: true },\n  );\n\n  watch(\n    columns,\n    (columns) => {\n      lastColList.value = columns ? columns.map((t) => t.colKey) : [];\n      // Hack 处理：数据变化时，DOM 元素无法自动变化，只得手动设置顺序和重置数据\n      const timer = setTimeout(() => {\n        if (!dragColInstanceTmp || !dragColInstanceTmp.el) return;\n        dragColInstanceTmp?.sort(lastColList.value);\n        clearTimeout(timer);\n      }, 0);\n    },\n    // { immediate: true },\n  );\n\n  // 本地分页的表格，index 不同，需加上分页计数\n  function getDataPageIndex(index: number) {\n    const { pagination } = props;\n    // 开启本地分页的场景\n    if (!props.disableDataPage && pagination && data.value.length > pagination.pageSize) {\n      return pagination.pageSize * (pagination.current - 1) + index;\n    }\n    return index;\n  }\n\n  // 行拖拽排序\n  const registerRowDragEvent = (element: HTMLDivElement): void => {\n    if (!isRowHandlerDraggable.value && !isRowDraggable.value) return;\n    const dragContainer = element?.querySelector('tbody');\n    if (!dragContainer) {\n      console.error('tbody does not exist.');\n      return null;\n    }\n    const baseOptions: SortableOptions = {\n      animation: 150,\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      filter: `.${tableFullRowClasses.base}`, // 过滤首行尾行固定\n      onMove: (evt: MoveEvent) => !hasClass(evt.related, tableFullRowClasses.base),\n      onEnd(evt: SortableEvent) {\n        if (evt.newIndex === evt.oldIndex) return;\n        // 处理受控：拖拽列表恢复原始排序\n        dragRowInstanceTmp?.sort(lastRowList.value);\n        let { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n        if ((isFunction(props.firstFullRow) && props.firstFullRow(h)) || context.slots.firstFullRow) {\n          currentIndex -= 1;\n          targetIndex -= 1;\n        }\n        const params: DragSortContext<TableRowData> = {\n          data: data.value,\n          currentIndex,\n          current: data.value[currentIndex],\n          targetIndex,\n          target: data.value[targetIndex],\n          newData: swapDragArrayElement([...props.data], getDataPageIndex(currentIndex), getDataPageIndex(targetIndex)),\n          e: evt,\n          sort: 'row',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        props.onDragSort?.(params);\n      },\n      ...props.dragSortOptions,\n    };\n\n    if (!dragContainer) return;\n    if (isRowDraggable.value) {\n      dragRowInstanceTmp = new Sortable(dragContainer, { ...baseOptions });\n    } else {\n      dragRowInstanceTmp = new Sortable(dragContainer, {\n        ...baseOptions,\n        handle: `.${tableDraggableClasses.handle}`,\n      });\n    }\n    lastRowList.value = dragRowInstanceTmp.toArray();\n  };\n\n  const registerOneLevelColDragEvent = (container: HTMLElement, recover: boolean) => {\n    const options: SortableOptions = {\n      animation: 150,\n      dataIdAttr: 'data-colkey',\n      direction: 'vertical',\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      handle: `.${tableBaseClass.thCellInner}`,\n      // 存在类名：t-table__th--drag-sort 的列才允许拖拽调整顺序（注意：添加 draggable 之后，固定列的表头 和 吸顶表头 位置顺序会错位，暂时注释）\n      // draggable: `th.${tableDraggableClasses.dragSortTh}`,\n      onEnd: (evt: SortableEvent) => {\n        if (evt.newIndex === evt.oldIndex) return;\n        if (recover) {\n          // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n          dragColInstanceTmp?.sort([...lastColList.value]);\n        }\n        const { oldIndex, newIndex, target: targetElement } = evt;\n        let currentIndex = recover ? oldIndex : newIndex;\n        let targetIndex = recover ? newIndex : oldIndex;\n        const oldElement = targetElement.children[currentIndex] as HTMLElement;\n        const newElement = targetElement.children[targetIndex] as HTMLElement;\n        const current = getColumnDataByKey(columns.value, oldElement.dataset.colkey);\n        const target = getColumnDataByKey(columns.value, newElement.dataset.colkey);\n        if (!current || !current.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(current)}`);\n        }\n        if (!target || !target.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(target)}`);\n        }\n        // 寻找外部数据 props.columns 中的真正下标\n        currentIndex = getColumnIndexByKey(props.columns, current.colKey);\n        targetIndex = getColumnIndexByKey(props.columns, target.colKey);\n        const params: DragSortContext<TableRowData> = {\n          data: columns.value,\n          currentIndex,\n          current,\n          targetIndex,\n          target,\n          newData: swapDragArrayElement([...props.columns], currentIndex, targetIndex),\n          e: evt,\n          sort: 'col',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        props.onDragSort?.(params);\n      },\n      ...props.dragSortOptions,\n    };\n    if (!container) return;\n    dragColInstanceTmp = new Sortable(container, options);\n    return dragColInstanceTmp;\n  };\n\n  // 列拖拽排序：涉及到多级表头、自定义显示列 等综合场景\n  const registerColDragEvent = (tableElement: HTMLElement) => {\n    if (!isColDraggable.value || !tableElement) return;\n    const trList = tableElement.querySelectorAll('thead > tr');\n    if (trList.length <= 1) {\n      const [container] = trList;\n      const dragInstanceTmp = registerOneLevelColDragEvent(container as HTMLElement, true);\n      lastColList.value = dragInstanceTmp?.toArray();\n    } else {\n      // 多级表头只抛出事件，不处理其他未知逻辑（如多层表头之间具体如何交换）\n      trList?.forEach((container) => {\n        registerOneLevelColDragEvent(container as HTMLElement, false);\n      });\n    }\n  };\n\n  function setDragSortPrimaryTableRef(primaryTableElement: any) {\n    primaryTableRef.value = primaryTableElement;\n  }\n\n  function setDragSortColumns(val: BaseTableColumns) {\n    columns.value = val;\n  }\n\n  // 注册拖拽事件\n  watch([primaryTableRef], ([val]: [any]) => {\n    if (!val || !val.$el) return;\n    registerRowDragEvent(val.$el);\n    registerColDragEvent(val.$el);\n    /** 待表头节点准备完成后 */\n    const timer = setTimeout(() => {\n      if (val.$refs.affixHeaderRef) {\n        registerColDragEvent(val.$refs.affixHeaderRef);\n      }\n      clearTimeout(timer);\n    });\n  });\n\n  return {\n    isRowDraggable,\n    isRowHandlerDraggable,\n    isColDraggable,\n    setDragSortPrimaryTableRef,\n    setDragSortColumns,\n  };\n}\n"],"names":["useDragSort","props","context","_toRefs","toRefs","sortOnRowDraggable","dragSort","data","rowKey","_useClassName","useClassName","tableDraggableClasses","tableBaseClass","tableFullRowClasses","primaryTableRef","ref","columns","dragCol","computed","value","find","item","colKey","isRowDraggable","isRowHandlerDraggable","includes","isColDraggable","lastRowList","lastColList","dragRowInstanceTmp","dragColInstanceTmp","log","error","watch","_ref","_ref2","_slicedToArray","map","get","timer","setTimeout","length","_dragRowInstanceTmp","sort","_primaryTableRef$valu","trList","$el","querySelectorAll","forEach","node","remove","clearTimeout","immediate","t","_dragColInstanceTmp","el","getDataPageIndex","index","pagination","disableDataPage","pageSize","current","registerRowDragEvent","element","dragContainer","querySelector","console","baseOptions","_objectSpread","animation","ghostClass","ghost","chosenClass","chosen","dragClass","dragging","filter","concat","base","onMove","evt","hasClass","related","onEnd","_dragRowInstanceTmp2","_props$onDragSort","newIndex","oldIndex","currentIndex","targetIndex","isFunction","firstFullRow","h","slots","params","target","newData","swapDragArrayElement","_toConsumableArray","e","currentData","onDragSort","call","dragSortOptions","Sortable","handle","toArray","registerOneLevelColDragEvent","container","recover","options","dataIdAttr","direction","thCellInner","_props$onDragSort2","_dragColInstanceTmp2","targetElement","oldElement","children","newElement","getColumnDataByKey","dataset","colkey","JSON","stringify","getColumnIndexByKey","registerColDragEvent","tableElement","_trList","dragInstanceTmp","setDragSortPrimaryTableRef","primaryTableElement","setDragSortColumns","val","_ref3","_ref4","$refs","affixHeaderRef"],"mappings":"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"}