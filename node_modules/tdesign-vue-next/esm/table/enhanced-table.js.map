{"version":3,"file":"enhanced-table.js","sources":["../../src/table/enhanced-table.tsx"],"sourcesContent":["import { defineComponent, SetupContext, computed, ref, getCurrentInstance } from 'vue';\nimport baseTableProps from './base-table-props';\nimport primaryTableProps from './primary-table-props';\nimport enhancedTableProps from './enhanced-table-props';\nimport PrimaryTable from './primary-table';\nimport { TdEnhancedTableProps, PrimaryTableCol, TableRowData, DragSortContext, TdPrimaryTableProps } from './type';\nimport useTreeData from './hooks/useTreeData';\nimport useTreeSelect from './hooks/useTreeSelect';\nimport { ScrollToElementParams } from '../hooks/useVirtualScrollNew';\n\nexport default defineComponent({\n  name: 'TEnhancedTable',\n\n  props: {\n    ...baseTableProps,\n    ...primaryTableProps,\n    ...enhancedTableProps,\n  },\n\n  setup(props: TdEnhancedTableProps, context: SetupContext) {\n    const primaryTableRef = ref(null);\n    const { store, dataSource, formatTreeColumn, swapData, ...treeInstanceFunctions } = useTreeData(props, context);\n\n    const treeDataMap = ref(store.value.treeDataMap);\n\n    const { tIndeterminateSelectedRowKeys, onInnerSelectChange } = useTreeSelect(props, treeDataMap);\n\n    // 影响列和单元格内容的因素有：树形节点需要添加操作符 [+] [-]\n    const getColumns = (columns: PrimaryTableCol<TableRowData>[]) => {\n      const arr: PrimaryTableCol<TableRowData>[] = [];\n      for (let i = 0, len = columns.length; i < len; i++) {\n        let item = { ...columns[i] };\n        item = formatTreeColumn(item);\n        if (item.children?.length) {\n          item.children = getColumns(item.children);\n        }\n        // 多级表头和自定义列配置特殊逻辑：要么子节点不存在，要么子节点长度大于 1，方便做自定义列配置\n        if (!item.children || item.children?.length) {\n          arr.push(item);\n        }\n      }\n      return arr;\n    };\n\n    const tColumns = computed(() => {\n      // 暂时只有树形结构需要处理 column.cell\n      const isTreeData = !props.tree || !Object.keys(props.tree).length;\n      return isTreeData ? props.columns : getColumns(props.columns);\n    });\n\n    const onDragSortChange = (params: DragSortContext<TableRowData>) => {\n      if (props.beforeDragSort && !props.beforeDragSort(params)) return;\n      swapData({\n        current: params.current,\n        target: params.target,\n        currentIndex: params.currentIndex,\n        targetIndex: params.targetIndex,\n      });\n      props.onDragSort?.(params);\n    };\n\n    const onEnhancedTableRowClick: TdPrimaryTableProps['onRowClick'] = (p) => {\n      if (props.tree?.expandTreeNodeOnClick) {\n        treeInstanceFunctions.toggleExpandData(\n          {\n            row: p.row,\n            rowIndex: p.index,\n          },\n          'row-click',\n        );\n      }\n      props.onRowClick?.(p);\n    };\n\n    context.expose({\n      store: store.value,\n      dataSource: dataSource.value,\n      ...treeInstanceFunctions,\n      primaryTableRef,\n      validateRowData: (rowValue: any) => {\n        return primaryTableRef.value.validateRowData(rowValue);\n      },\n      validateTableData: () => {\n        return primaryTableRef.value.validateTableData();\n      },\n      clearValidateData: () => {\n        primaryTableRef.value.clearValidateData();\n      },\n      refreshTable: () => {\n        primaryTableRef.value.refreshTable();\n      },\n      scrollToElement: (data: ScrollToElementParams) => {\n        primaryTableRef.value.scrollToElement(data);\n      },\n    });\n\n    return () => {\n      const { vnode } = getCurrentInstance();\n      const enhancedProps: TdPrimaryTableProps = {\n        ...vnode.props,\n        rowKey: props.rowKey || 'id',\n        data: dataSource.value,\n        columns: tColumns.value,\n        // 半选状态节点\n        indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys.value,\n        // 树形结构不允许本地数据分页\n        disableDataPage: Boolean(props.tree && Object.keys(props.tree).length),\n        onSelectChange: onInnerSelectChange,\n        onDragSort: onDragSortChange,\n      };\n      if (props.tree?.expandTreeNodeOnClick) {\n        enhancedProps.onRowClick = onEnhancedTableRowClick;\n      }\n      // @ts-ignore ref 顺序很重要，如果移动到 v-slots 前面，会让 EnhancedTable 所有实例方法失效，勿动\n      return <PrimaryTable v-slots={context.slots} {...enhancedProps} ref={primaryTableRef} />;\n    };\n  },\n});\n"],"names":["defineComponent","name","props","_objectSpread","baseTableProps","primaryTableProps","enhancedTableProps","setup","context","primaryTableRef","ref","_useTreeData","useTreeData","store","dataSource","formatTreeColumn","swapData","treeInstanceFunctions","_objectWithoutProperties","_excluded","treeDataMap","value","_useTreeSelect","useTreeSelect","tIndeterminateSelectedRowKeys","onInnerSelectChange","getColumns","columns","arr","i","len","length","_item$children","_item$children2","item","children","push","tColumns","computed","isTreeData","tree","Object","keys","onDragSortChange","params","_props$onDragSort","beforeDragSort","current","target","currentIndex","targetIndex","onDragSort","call","onEnhancedTableRowClick","p","_props$tree","_props$onRowClick","expandTreeNodeOnClick","toggleExpandData","row","rowIndex","index","onRowClick","expose","validateRowData","rowValue","validateTableData","clearValidateData","refreshTable","scrollToElement","data","_props$tree2","_getCurrentInstance","getCurrentInstance","vnode","enhancedProps","rowKey","indeterminateSelectedRowKeys","disableDataPage","Boolean","onSelectChange","_createVNode","PrimaryTable","_mergeProps","slots"],"mappings":"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"}