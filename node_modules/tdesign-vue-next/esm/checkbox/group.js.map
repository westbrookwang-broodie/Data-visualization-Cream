{"version":3,"file":"group.js","sources":["../../src/checkbox/group.tsx"],"sourcesContent":["import { defineComponent, provide, computed, h, reactive, watchEffect, ref, toRefs } from 'vue';\nimport intersection from 'lodash/intersection';\nimport Checkbox from './checkbox';\nimport props from './checkbox-group-props';\nimport { CheckboxOptionObj, TdCheckboxProps, CheckboxGroupValue } from './type';\nimport { CheckboxGroupInjectionKey } from './constants';\n\n// hooks\nimport useVModel from '../hooks/useVModel';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useTNodeJSX } from '../hooks/tnode';\nimport { useChildComponentSlots } from '../hooks/slot';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport isUndefined from 'lodash/isUndefined';\n\nexport default defineComponent({\n  name: 'TCheckboxGroup',\n  props,\n\n  setup(props) {\n    /** 样式 */\n    const COMPONENT_NAME = usePrefixClass('checkbox-group');\n    const renderTNodeJSX = useTNodeJSX();\n\n    const { isArray } = Array;\n    const { value, modelValue } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const checkedMap = computed(() => {\n      const map = {};\n      if (isArray(innerValue.value)) {\n        innerValue.value.forEach((item: string | number) => {\n          map[item] = true;\n        });\n      }\n      return map;\n    });\n    const optionList = ref<Array<CheckboxOptionObj>>([]);\n\n    const intersectionLen = computed<number>(() => {\n      if (!isArray(innerValue.value)) return 0;\n      const values = optionList.value.map((item) => item.value);\n      const n = intersection(innerValue.value, values);\n      return n.length;\n    });\n\n    const isCheckAll = computed<boolean>(() => {\n      const excludeCount = optionList.value.filter((item) => item.disabled || item.checkAll).length;\n      if (isArray(innerValue.value) && innerValue.value.length !== optionList.value.length - excludeCount) return false;\n      return intersectionLen.value === optionList.value.length - excludeCount;\n    });\n\n    const indeterminate = computed<boolean>(\n      () => !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0,\n    );\n\n    const maxExceeded = computed<boolean>(() => !isUndefined(props.max) && innerValue.value.length === props.max);\n\n    watchEffect(() => {\n      if (!props.options) return [];\n      optionList.value = props.options.map((item) => {\n        return isObject(item)\n          ? { ...item, disabled: item.disabled ?? props.disabled }\n          : { label: String(item), value: item };\n      });\n    });\n\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<TdCheckboxProps['value']>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.disabled) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value: CheckboxGroupValue = checked ? getAllCheckboxValue() : [];\n      setInnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n        option: undefined,\n      });\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (!isArray(innerValue.value)) {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n        return;\n      }\n      const val = [...innerValue.value];\n      if (data.checked) {\n        val.push(currentValue);\n      } else {\n        const i = val.indexOf(currentValue);\n        val.splice(i, 1);\n      }\n      setInnerValue(val, {\n        e: data.e,\n        current: data.option.value,\n        option: data.option,\n        type: data.checked ? 'check' : 'uncheck',\n      });\n    };\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const getChildComponentSlots = useChildComponentSlots();\n\n    const getOptionListBySlots = () => {\n      const nodes = getChildComponentSlots('Checkbox');\n      const arr: Array<CheckboxOptionObj> = [];\n      nodes?.forEach((node) => {\n        const option = node.props as CheckboxOptionObj;\n        if (!option) return;\n        if (option['check-all'] === '' || option['check-all'] === true) {\n          option.checkAll = true;\n        }\n        arr.push(option);\n      });\n      return arr;\n    };\n\n    const renderLabel = (option: CheckboxOptionObj) => {\n      if (isFunction(option.label)) {\n        return option.label(h);\n      }\n      return option.label;\n    };\n\n    // provide\n    const { name, disabled } = toRefs(props);\n    provide(\n      CheckboxGroupInjectionKey,\n      reactive({\n        name,\n        isCheckAll,\n        checkedMap,\n        maxExceeded,\n        disabled,\n        indeterminate,\n        handleCheckboxChange,\n        onCheckedChange,\n      }),\n    );\n\n    return () => {\n      let children = null;\n      if (props.options?.length) {\n        children = optionList.value?.map((option, index) => (\n          <Checkbox key={`${option.value}${index}`} {...option} checked={checkedMap.value[option.value]}>\n            {renderLabel(option)}\n          </Checkbox>\n        ));\n      } else {\n        const nodes = renderTNodeJSX('default');\n        optionList.value = getOptionListBySlots();\n        children = nodes;\n      }\n      return <div class={COMPONENT_NAME.value}>{children}</div>;\n    };\n  },\n});\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","name","props","setup","COMPONENT_NAME","usePrefixClass","renderTNodeJSX","useTNodeJSX","isArray","Array","_toRefs","toRefs","value","modelValue","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","innerValue","setInnerValue","checkedMap","computed","map","forEach","item","optionList","ref","intersectionLen","values","n","intersection","length","isCheckAll","excludeCount","filter","disabled","checkAll","indeterminate","maxExceeded","isUndefined","max","watchEffect","options","_item$disabled","isObject","_objectSpread","label","String","getAllCheckboxValue","val","Set","i","len","add","_toConsumableArray","onCheckAllChange","checked","context","e","type","current","option","handleCheckboxChange","data","currentValue","console","warn","concat","_typeof","push","indexOf","splice","onCheckedChange","p","getChildComponentSlots","useChildComponentSlots","getOptionListBySlots","nodes","arr","node","renderLabel","isFunction","h","_toRefs2","provide","CheckboxGroupInjectionKey","reactive","_props2$options","children","_optionList$value","index","_slot","_createVNode","Checkbox","_mergeProps","_default"],"mappings":"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"}