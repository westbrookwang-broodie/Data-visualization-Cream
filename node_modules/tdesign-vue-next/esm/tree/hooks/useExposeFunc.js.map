{"version":3,"file":"useExposeFunc.js","sources":["../../../src/tree/hooks/useExposeFunc.ts"],"sourcesContent":["import { Ref } from 'vue';\nimport upperFirst from 'lodash/upperFirst';\nimport TreeStore from '../../_common/js/tree/tree-store';\nimport TreeNode from '../../_common/js/tree/tree-node';\nimport { TreeOptionData } from '../../common';\nimport { getNode } from '../util';\nimport isArray from 'lodash/isArray';\n\nimport { TreeNodeValue, TreeNodeState, TypeTreeNodeModel } from '../interface';\n\nexport default function useExposeFunc(treeStore: Ref<TreeStore>, expose: (exposed: Record<string, any>) => void) {\n  const setItem = (value: TreeNodeValue, options: TreeNodeState) => {\n    const node: TreeNode = treeStore.value.getNode(value);\n    const spec = options;\n    const keys = Object.keys(spec);\n    if (node && spec) {\n      ['expanded', 'actived', 'checked'].forEach((name) => {\n        if (keys.includes(name)) {\n          node[`set${upperFirst(name)}`](spec[name], { directly: true });\n        }\n      });\n    }\n  };\n\n  const getItem = (value: TreeNodeValue): TypeTreeNodeModel => {\n    const node: TreeNode = treeStore.value.getNode(value);\n    return node?.getModel();\n  };\n\n  const getItems = (value?: TreeNodeValue): TypeTreeNodeModel[] => {\n    const nodes = treeStore.value.getNodes(value);\n    return nodes.map((node: TreeNode) => node.getModel());\n  };\n\n  const appendTo = (para?: TreeNodeValue, item?: TreeOptionData | TreeOptionData[]) => {\n    let list = [];\n    if (isArray(item)) {\n      list = item;\n    } else {\n      list = [item];\n    }\n    list.forEach((item) => {\n      const val = item?.value || '';\n      const node = getNode(treeStore.value, val);\n      if (node) {\n        treeStore.value.appendNodes(para, node);\n      } else {\n        treeStore.value.appendNodes(para, item);\n      }\n    });\n  };\n\n  const insertBefore = (value: TreeNodeValue, item: TreeOptionData) => {\n    const val = item?.value || '';\n    const node = getNode(treeStore.value, val);\n    if (node) {\n      // TODO type fix\n      treeStore.value.insertBefore(value, node as any);\n    } else {\n      treeStore.value.insertBefore(value, item);\n    }\n  };\n\n  const insertAfter = (value: TreeNodeValue, item: TreeOptionData) => {\n    const val = item?.value || '';\n    const node = getNode(treeStore.value, val);\n    if (node) {\n      // TODO type fix\n      treeStore.value.insertAfter(value, node as any);\n    } else {\n      treeStore.value.insertAfter(value, item);\n    }\n  };\n\n  const remove = (value?: TreeNodeValue) => {\n    return treeStore.value.remove(value);\n  };\n\n  const getIndex = (value: TreeNodeValue) => {\n    return treeStore.value.getNodeIndex(value);\n  };\n\n  const getParent = (value: TreeNodeValue) => {\n    const node = treeStore.value.getParent(value);\n    return node?.getModel();\n  };\n\n  const getParents = (value: TreeNodeValue) => {\n    const nodes = treeStore.value.getParents(value);\n    return nodes.map((node: TreeNode) => node.getModel());\n  };\n\n  const getPath = (value: TreeNodeValue) => {\n    const node = treeStore.value.getNode(value);\n    let pathNodes: any[] = [];\n    if (node) {\n      pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n    }\n    return pathNodes;\n  };\n\n  expose({\n    setItem,\n    getItem,\n    getItems,\n    appendTo,\n    insertBefore,\n    insertAfter,\n    remove,\n    getIndex,\n    getParent,\n    getParents,\n    getPath,\n  });\n}\n"],"names":["useExposeFunc","treeStore","expose","setItem","value","options","node","getNode","spec","keys","Object","forEach","name","includes","concat","upperFirst","directly","getItem","getModel","getItems","nodes","getNodes","map","appendTo","para","item","list","isArray","val","appendNodes","insertBefore","insertAfter","remove","getIndex","getNodeIndex","getParent","getParents","getPath","pathNodes"],"mappings":"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"}