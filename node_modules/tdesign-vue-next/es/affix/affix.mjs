/**
 * tdesign v1.3.1
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _asyncToGenerator, r as regenerator } from '../_chunks/dep-cc784903.mjs';
import { defineComponent, ref, nextTick, watch, onMounted, onActivated, onDeactivated, onBeforeUnmount, createVNode } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-14b6ba18.mjs';
import { i as isUndefined_1 } from '../_chunks/dep-dea8521c.mjs';
import { getScrollContainer, on, off } from '../utils/dom.mjs';
import props from './props.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import '../_chunks/dep-dbb72607.mjs';
import '../_chunks/dep-bec45e18.mjs';
import '../_chunks/dep-339a814a.mjs';
import '../_chunks/dep-ed4e2839.mjs';
import '../_chunks/dep-81ef22a5.mjs';
import '../_chunks/dep-0f434994.mjs';
import '../_chunks/dep-f5c677eb.mjs';
import '../_chunks/dep-546c20ab.mjs';
import '../utils/easing.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-c19618d4.mjs';
import '../_chunks/dep-cd3b0fa6.mjs';
import '../_chunks/dep-c9ce648e.mjs';
import '../_chunks/dep-4d256b91.mjs';
import '../_chunks/dep-0d7bf0e3.mjs';
import '../_chunks/dep-201da76e.mjs';
import '../_chunks/dep-e62c24d1.mjs';
import '../_chunks/dep-fe69e368.mjs';
import '../_chunks/dep-976f9516.mjs';
import '../_chunks/dep-11e36026.mjs';
import '../_chunks/dep-428963eb.mjs';
import '../_chunks/dep-019ee94c.mjs';
import '../_chunks/dep-3d1dcd03.mjs';
import '../_chunks/dep-72f2a0b4.mjs';
import '../_chunks/dep-56623c1f.mjs';
import '../_chunks/dep-f694a61e.mjs';
import '../_chunks/dep-d96da68c.mjs';
import '../_chunks/dep-f4a1f294.mjs';
import '../_chunks/dep-99aaf398.mjs';
import '../_chunks/dep-9e4f2d05.mjs';
import '../_chunks/dep-2351c759.mjs';
import '../_chunks/dep-2d971205.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-3be1a481.mjs';
import '../_chunks/dep-b76005d0.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-ac072285.mjs';
import '../_chunks/dep-7c35655e.mjs';
import '../_chunks/dep-c6a9d3e7.mjs';
import '../_chunks/dep-8b01f133.mjs';
import '../_chunks/dep-80f4d76a.mjs';
import '../_chunks/dep-59f92248.mjs';
import '../_chunks/dep-cb8e09e3.mjs';
import '../_chunks/dep-62d92cbc.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-094ccbd7.mjs';

var _Affix = defineComponent({
  name: "TAffix",
  props: props,
  emits: ["fixedChange"],
  setup: function setup(props2, context) {
    var _document;
    var COMPONENT_NAME = usePrefixClass("affix");
    var renderTNodeJSX = useTNodeJSX();
    var affixWrapRef = ref(null);
    var affixRef = ref(null);
    var placeholderEL = ref((_document = document) === null || _document === void 0 ? void 0 : _document.createElement("div"));
    var ticking = ref(false);
    var binded = ref(false);
    var scrollContainer = ref();
    var affixStyle = ref();
    var handleScroll = function handleScroll() {
      if (!ticking.value) {
        window.requestAnimationFrame(function () {
          var _affixWrapRef$value$g;
          var _ref = (_affixWrapRef$value$g = affixWrapRef.value.getBoundingClientRect()) !== null && _affixWrapRef$value$g !== void 0 ? _affixWrapRef$value$g : {
              top: 0,
              width: 0,
              height: 0
            },
            wrapToTop = _ref.top,
            wrapWidth = _ref.width,
            wrapHeight = _ref.height;
          var containerTop = 0;
          if (scrollContainer.value instanceof HTMLElement) {
            containerTop = scrollContainer.value.getBoundingClientRect().top;
          }
          var fixedTop;
          var calcTop = wrapToTop - containerTop;
          var containerHeight = scrollContainer.value[scrollContainer.value instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
          var calcBottom = containerTop + containerHeight - props2.offsetBottom;
          if (!isUndefined_1(props2.offsetTop) && calcTop <= props2.offsetTop) {
            fixedTop = containerTop + props2.offsetTop;
          } else if (!isUndefined_1(props2.offsetBottom) && wrapToTop >= calcBottom) {
            fixedTop = calcBottom;
          } else {
            fixedTop = false;
          }
          if (affixRef.value) {
            var affixed = fixedTop !== false;
            var placeholderStatus = affixWrapRef.value.contains(placeholderEL.value);
            if (affixed) {
              affixRef.value.className = COMPONENT_NAME.value;
              affixStyle.value = {
                top: "".concat(fixedTop, "px"),
                width: "".concat(wrapWidth, "px"),
                height: "".concat(wrapHeight, "px"),
                zIndex: props2.zIndex
              };
              if (!placeholderStatus) {
                placeholderEL.value.style.width = "".concat(wrapWidth, "px");
                placeholderEL.value.style.height = "".concat(wrapHeight, "px");
                affixWrapRef.value.appendChild(placeholderEL.value);
              }
            } else {
              affixRef.value.removeAttribute("class");
              affixStyle.value = void 0;
              placeholderStatus && placeholderEL.value.remove();
            }
            context.emit("fixedChange", affixed, {
              top: Number(fixedTop)
            });
            if (isFunction_1(props2.onFixedChange)) props2.onFixedChange(affixed, {
              top: Number(fixedTop)
            });
          }
          ticking.value = false;
        });
        ticking.value = true;
      }
    };
    var bindScroll = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return nextTick();
            case 2:
              if (!binded.value) {
                _context.next = 4;
                break;
              }
              return _context.abrupt("return");
            case 4:
              scrollContainer.value = getScrollContainer(props2.container);
              on(scrollContainer.value, "scroll", handleScroll);
              on(window, "resize", handleScroll);
              binded.value = true;
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function bindScroll() {
        return _ref2.apply(this, arguments);
      };
    }();
    var unbindScroll = function unbindScroll() {
      if (!scrollContainer.value || !binded.value) return;
      off(scrollContainer.value, "scroll", handleScroll);
      off(window, "resize", handleScroll);
      binded.value = false;
    };
    watch(function () {
      return props2.offsetTop;
    }, function () {
      handleScroll();
    });
    watch(function () {
      return props2.offsetBottom;
    }, function () {
      handleScroll();
    });
    watch(function () {
      return props2.zIndex;
    }, function () {
      handleScroll();
    });
    onMounted(bindScroll);
    onActivated(bindScroll);
    onDeactivated(unbindScroll);
    onBeforeUnmount(unbindScroll);
    return {
      affixWrapRef: affixWrapRef,
      affixRef: affixRef,
      bindScroll: bindScroll,
      unbindScroll: unbindScroll,
      handleScroll: handleScroll,
      scrollContainer: scrollContainer,
      renderTNodeJSX: renderTNodeJSX,
      affixStyle: affixStyle
    };
  },
  render: function render() {
    return createVNode("div", {
      "ref": "affixWrapRef"
    }, [createVNode("div", {
      "ref": "affixRef",
      "style": this.affixStyle
    }, [this.renderTNodeJSX("default")])]);
  }
});

export { _Affix as default };
//# sourceMappingURL=affix.mjs.map
