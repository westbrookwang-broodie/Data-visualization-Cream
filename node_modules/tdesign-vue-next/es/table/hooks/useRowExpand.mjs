/**
 * tdesign v1.3.1
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-9ddd4050.mjs';
import { _ as _toConsumableArray } from '../../_chunks/dep-89c2d338.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-7856a613.mjs';
import { toRefs, computed, createVNode } from 'vue';
import { ChevronRightCircleIcon } from 'tdesign-icons-vue-next';
import { g as get_1 } from '../../_chunks/dep-16df0d70.mjs';
import useClassName from './useClassName.mjs';
import { useTNodeJSX } from '../../hooks/tnode.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-dbb72607.mjs';
import '../../_chunks/dep-e827c721.mjs';
import '../../_chunks/dep-bec45e18.mjs';
import '../../_chunks/dep-a0dff9f9.mjs';
import '../../_chunks/dep-0f434994.mjs';
import '../../_chunks/dep-f5c677eb.mjs';
import '../../_chunks/dep-c6a9d3e7.mjs';
import '../../_chunks/dep-339a814a.mjs';
import '../../_chunks/dep-546c20ab.mjs';
import '../../_chunks/dep-4d256b91.mjs';
import '../../_chunks/dep-0d7bf0e3.mjs';
import '../../_chunks/dep-14b6ba18.mjs';
import '../../_chunks/dep-ed4e2839.mjs';
import '../../_chunks/dep-201da76e.mjs';
import '../../_chunks/dep-e62c24d1.mjs';
import '../../_chunks/dep-7c35655e.mjs';
import '../../_chunks/dep-c19618d4.mjs';
import '../../_chunks/dep-cd3b0fa6.mjs';
import '../../_chunks/dep-c9ce648e.mjs';
import '../../_chunks/dep-fe69e368.mjs';
import '../../_chunks/dep-976f9516.mjs';
import '../../_chunks/dep-11e36026.mjs';
import '../../_chunks/dep-428963eb.mjs';
import '../../_chunks/dep-019ee94c.mjs';
import '../../_chunks/dep-3d1dcd03.mjs';
import '../../_chunks/dep-72f2a0b4.mjs';
import '../../_chunks/dep-56623c1f.mjs';
import '../../_chunks/dep-f694a61e.mjs';
import '../../_chunks/dep-d96da68c.mjs';
import '../../_chunks/dep-81ef22a5.mjs';
import '../../_chunks/dep-f4a1f294.mjs';
import '../../_chunks/dep-99aaf398.mjs';
import '../../_chunks/dep-9e4f2d05.mjs';
import '../../_chunks/dep-2351c759.mjs';
import '../../_chunks/dep-2d971205.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-3be1a481.mjs';
import '../../_chunks/dep-b76005d0.mjs';
import '../../config-provider/type.mjs';
import '../../_chunks/dep-ac072285.mjs';
import '../../_chunks/dep-8b01f133.mjs';
import '../../_chunks/dep-80f4d76a.mjs';
import '../../_chunks/dep-59f92248.mjs';
import '../../_chunks/dep-cb8e09e3.mjs';
import '../../_chunks/dep-62d92cbc.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-094ccbd7.mjs';

function useRowExpand(props, context) {
  var _toRefs = toRefs(props),
    expandedRowKeys = _toRefs.expandedRowKeys;
  var renderTNode = useTNodeJSX();
  var _useConfig = useConfig("table"),
    t = _useConfig.t,
    globalConfig = _useConfig.globalConfig;
  var _useGlobalIcon = useGlobalIcon({
      ChevronRightCircleIcon: ChevronRightCircleIcon
    }),
    ChevronRightCircleIcon$1 = _useGlobalIcon.ChevronRightCircleIcon;
  var _useClassName = useClassName(),
    tableExpandClasses = _useClassName.tableExpandClasses,
    positiveRotate90 = _useClassName.positiveRotate90,
    tableFullRowClasses = _useClassName.tableFullRowClasses;
  var _useDefaultValue = useDefaultValue(expandedRowKeys, props.defaultExpandedRowKeys || [], props.onExpandChange, "expandedRowKeys"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    tExpandedRowKeys = _useDefaultValue2[0],
    setTExpandedRowKeys = _useDefaultValue2[1];
  var showExpandedRow = computed(function () {
    return Boolean(props.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
  });
  var showExpandIconColumn = computed(function () {
    return props.expandIcon !== false && showExpandedRow.value;
  });
  var isFirstColumnFixed = computed(function () {
    var _props$columns, _props$columns$;
    return ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";
  });
  var onToggleExpand = function onToggleExpand(e, row) {
    props.expandOnRowClick && e.stopPropagation();
    var currentId = get_1(row, props.rowKey || "id");
    var index = tExpandedRowKeys.value.indexOf(currentId);
    var newKeys = _toConsumableArray(tExpandedRowKeys.value);
    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
    setTExpandedRowKeys(newKeys, {
      expandedRowData: props.data.filter(function (t2) {
        return newKeys.includes(get_1(t2, props.rowKey || "id"));
      }),
      currentRowData: row
    });
  };
  var renderExpandIcon = function renderExpandIcon(_, p) {
    var row = p.row,
      rowIndex = p.rowIndex;
    var currentId = get_1(row, props.rowKey || "id");
    var expanded = tExpandedRowKeys.value.includes(currentId);
    var icon = renderTNode("expandIcon", {
      defaultNode: t(globalConfig.value.expandIcon) || createVNode(ChevronRightCircleIcon$1, null, null),
      params: {
        row: row,
        index: rowIndex
      }
    });
    if (!icon) return null;
    var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty({}, positiveRotate90, expanded)];
    return createVNode("span", {
      "class": classes,
      "onClick": function onClick(e) {
        return onToggleExpand(e, row);
      }
    }, [icon]);
  };
  var getExpandColumn = function getExpandColumn() {
    var expandCol = {
      colKey: "__EXPAND_ROW_ICON_COLUMN__",
      width: 46,
      className: tableExpandClasses.iconCell,
      fixed: isFirstColumnFixed.value ? "left" : void 0,
      cell: renderExpandIcon,
      stopPropagation: true
    };
    return expandCol;
  };
  var renderExpandedRow = function renderExpandedRow(p) {
    var rowId = get_1(p.row, props.rowKey || "id");
    if (!tExpandedRowKeys.value || !tExpandedRowKeys.value.includes(rowId)) return null;
    var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
      return item.fixed === "left";
    });
    return createVNode("tr", {
      "key": "expand_".concat(rowId),
      "class": [tableExpandClasses.row, _defineProperty({}, tableFullRowClasses.base, isFixedLeft)]
    }, [createVNode("td", {
      "colspan": p.columns.length
    }, [createVNode("div", {
      "class": [tableExpandClasses.rowInner, _defineProperty({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
      "style": isFixedLeft ? {
        width: "".concat(p.tableWidth, "px")
      } : {}
    }, [createVNode("div", {
      "class": tableFullRowClasses.innerFullElement
    }, [renderTNode("expandedRow", {
      params: p
    })])])])]);
  };
  var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
    onToggleExpand(p.e, p.row);
  };
  return {
    showExpandedRow: showExpandedRow,
    showExpandIconColumn: showExpandIconColumn,
    getExpandColumn: getExpandColumn,
    renderExpandedRow: renderExpandedRow,
    onInnerExpandRowClick: onInnerExpandRowClick
  };
}

export { useRowExpand as default };
//# sourceMappingURL=useRowExpand.mjs.map
