{"version":3,"file":"useTreeData.mjs","sources":["../../../src/table/hooks/useTreeData.tsx"],"sourcesContent":["import { SetupContext, ref, watch, toRefs, onUnmounted, computed, h, shallowRef } from 'vue';\nimport {\n  AddRectangleIcon as TdAddRectangleIcon,\n  MinusRectangleIcon as TdMinusRectangleIcon,\n} from 'tdesign-icons-vue-next';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport TableTreeStore, { SwapParams } from '../../_common/js/table/tree-store';\nimport {\n  TdEnhancedTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  TableRowValue,\n  TableRowState,\n  PrimaryTableCellParams,\n} from '../type';\nimport useClassName from './useClassName';\nimport { renderCell } from '../tr';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport { useTNodeDefault } from '../../hooks';\n\nexport default function useTreeData(props: TdEnhancedTableProps, context: SetupContext) {\n  const { data, columns } = toRefs(props);\n  const { t, globalConfig } = useConfig('table');\n  const { AddRectangleIcon, MinusRectangleIcon } = useGlobalIcon({\n    AddRectangleIcon: TdAddRectangleIcon,\n    MinusRectangleIcon: TdMinusRectangleIcon,\n  });\n\n  const store = ref(new TableTreeStore());\n  const treeNodeCol = shallowRef<PrimaryTableCol>();\n  const dataSource = ref<TdEnhancedTableProps['data']>([]);\n  const { tableTreeClasses } = useClassName();\n  const renderTNode = useTNodeDefault();\n\n  const rowDataKeys = computed(() => ({\n    rowKey: props.rowKey || 'id',\n    childrenKey: props.tree?.childrenKey || 'children',\n  }));\n\n  const checkedColumn = computed(() => columns.value.find((col) => col.colKey === 'row-select'));\n\n  watch(checkedColumn, (column) => {\n    if (!store.value) return;\n    store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);\n  });\n\n  const foldIcon = (context: PrimaryTableCellParams<TableRowData>) => {\n    const params = { ...context, type: 'fold' };\n    const defaultFoldIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || <MinusRectangleIcon />;\n    return renderTNode('treeExpandAndFoldIcon', {\n      defaultNode: defaultFoldIcon,\n      params,\n    });\n  };\n\n  const expandIcon = (context: PrimaryTableCellParams<TableRowData>) => {\n    const params = { ...context, type: 'expand' };\n    const defaultExpandIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || <AddRectangleIcon />;\n    return renderTNode('treeExpandAndFoldIcon', {\n      defaultNode: defaultExpandIcon,\n      params,\n    });\n  };\n\n  const uniqueKeys = computed(() => store.value?.getAllUniqueKeys(data.value, rowDataKeys.value)?.join() || '');\n\n  watch(\n    [uniqueKeys],\n    () => {\n      if (!data.value) return;\n      // 如果没有树形解构，则不需要相关逻辑\n      if (!props.tree) {\n        dataSource.value = data.value;\n        return;\n      }\n      resetData(data.value);\n    },\n    { immediate: true },\n  );\n\n  // 不能启用这部分代码。如果启用，会导致选中树形结构子节点时数据被重置，全部节点收起\n  // watch([columns, rowDataKeys], ([columns, rowDataKeys]) => {\n  //   store.value.initialTreeStore(data.value, columns, rowDataKeys);\n  // });\n\n  onUnmounted(() => {\n    if (!props.tree) return;\n    store.value.treeDataMap?.clear();\n    store.value = null;\n  });\n\n  watch(\n    () => [columns, props.tree?.treeNodeColumnIndex],\n    () => {\n      treeNodeCol.value = getTreeNodeColumnCol();\n    },\n    { immediate: true },\n  );\n\n  function resetData(data: TableRowData[]) {\n    let newVal = cloneDeep(data);\n    store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);\n    if (props.tree?.defaultExpandAll) {\n      newVal = store.value.expandAll(newVal, rowDataKeys.value);\n    }\n    dataSource.value = newVal;\n  }\n\n  function getTreeNodeStyle(level: number) {\n    if (level === undefined) return;\n    const indent = props.tree?.indent === undefined ? 24 : props.tree?.indent;\n    // 默认 1px 是为了临界省略\n    return indent ? { paddingLeft: `${level * indent || 1}px` } : {};\n  }\n\n  /**\n   * 组件实例方法，展开或收起某一行\n   * @param p 行数据\n   */\n  function toggleExpandData(p: { row: TableRowData; rowIndex: number }, trigger?: 'expand-fold-icon' | 'row-click') {\n    const currentData = { ...p };\n    if (p.row.__VIRTUAL_SCROLL_INDEX !== undefined) {\n      currentData.rowIndex = p.row.__VIRTUAL_SCROLL_INDEX;\n    }\n    dataSource.value = [...store.value.toggleExpandData(currentData, dataSource.value, rowDataKeys.value)];\n    const rowValue = get(p.row, rowDataKeys.value.rowKey);\n    const rowState = store.value?.treeDataMap?.get(rowValue);\n    props.onTreeExpandChange?.({\n      row: p.row,\n      rowIndex: p.rowIndex,\n      rowState,\n      trigger,\n    });\n  }\n\n  function getTreeNodeColumnCol() {\n    const { columns } = props;\n    let treeNodeColumnIndex = props.tree?.treeNodeColumnIndex || 0;\n    // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移\n    while (\n      columns[treeNodeColumnIndex]?.type ||\n      columns[treeNodeColumnIndex]?.colKey === '__EXPAND_ROW_ICON_COLUMN__'\n    ) {\n      treeNodeColumnIndex += 1;\n    }\n    return columns[treeNodeColumnIndex];\n  }\n\n  function formatTreeColumn(col: PrimaryTableCol): PrimaryTableCol {\n    if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;\n    const newCol = { ...treeNodeCol.value };\n    newCol.cell = (h, p) => {\n      const cellInfo = renderCell({ ...p, col: { ...treeNodeCol.value } }, context.slots, {\n        cellEmptyContent: props.cellEmptyContent,\n      });\n      const currentState = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey));\n      const colStyle = getTreeNodeStyle(currentState?.level);\n      const classes = { [tableTreeClasses.inlineCol]: !!col.ellipsis };\n      const childrenNodes = get(p.row, rowDataKeys.value.childrenKey);\n      if ((childrenNodes && childrenNodes instanceof Array) || childrenNodes === true) {\n        const iconNode = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey))?.expanded\n          ? foldIcon(p)\n          : expandIcon(p);\n        return (\n          <div class={[tableTreeClasses.col, classes]} style={colStyle}>\n            {!!(childrenNodes.length || childrenNodes === true) && (\n              <span\n                class={tableTreeClasses.icon}\n                onClick={(e: MouseEvent) => {\n                  toggleExpandData(p, 'expand-fold-icon');\n                  e.stopPropagation();\n                }}\n              >\n                {iconNode}\n              </span>\n            )}\n            {cellInfo}\n          </div>\n        );\n      }\n      return (\n        <div style={colStyle} class={[classes, tableTreeClasses.leafNode]}>\n          <span class={tableTreeClasses.icon}></span>\n          {cellInfo}\n        </div>\n      );\n    };\n    // 树形节点会显示操作符号 [+] 和 [-]，但省略显示的浮层中不需要操作符\n    if (newCol.ellipsis === true) {\n      newCol.ellipsis = (h, p) => renderCell({ ...p, col: { ...treeNodeCol.value } }, context.slots);\n    }\n    return newCol;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，设置行数据，自动刷新界面\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   */\n  function setData<T>(key: TableRowValue, newRowData: T) {\n    const rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);\n    const newData = [...dataSource.value];\n    newData[rowIndex] = newRowData;\n    dataSource.value = newData;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  function getData(key: TableRowValue): TableRowState {\n    return store.value.getData(key);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，移除指定节点\n   * @param key 行唯一标识\n   */\n  function remove(key: TableRowValue) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    dataSource.value = [...store.value.remove(key, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识，值为空，则表示给根节点添加元素\n   * @param newData 待添加的新节点\n   */\n  function appendTo<T>(key: TableRowValue = '', newData: T | T[]) {\n    if (!key) {\n      dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);\n      return;\n    }\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    dataSource.value = [...store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertAfter<T>(rowValue: TableRowValue, newData: T) {\n    dataSource.value = [...store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertBefore<T>(rowValue: TableRowValue, newData: T) {\n    dataSource.value = [...store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，展开所有节点\n   */\n  function expandAll() {\n    dataSource.value = [...store.value.expandAll(dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，收起所有节点\n   */\n  function foldAll() {\n    dataSource.value = [...store.value.foldAll(dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，交换行数据\n   */\n  function swapData(params: SwapParams<TableRowData>) {\n    const r = store.value.swapData(dataSource.value, params, rowDataKeys.value);\n    if (r.result) {\n      dataSource.value = [...r.dataSource];\n    } else {\n      const params = {\n        code: r.code,\n        reason: r.reason,\n      };\n      props.onAbnormalDragSort?.(params);\n    }\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取全部数据的树形结构\n   * @param key 节点唯一标识\n   */\n  function getTreeNode() {\n    return store.value.getTreeNode(dataSource.value, rowDataKeys.value);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取树形结构展开的节点\n   */\n  function getTreeExpandedRow(type: 'unique' | 'data' | 'all' = 'data') {\n    return store.value.getTreeExpandedRow(dataSource.value, rowDataKeys.value, type);\n  }\n\n  return {\n    store,\n    rowDataKeys,\n    dataSource,\n    swapData,\n    setData,\n    getData,\n    remove,\n    appendTo,\n    insertAfter,\n    insertBefore,\n    formatTreeColumn,\n    toggleExpandData,\n    expandAll,\n    foldAll,\n    getTreeNode,\n    resetData,\n    getTreeExpandedRow,\n  };\n}\n"],"names":["useTreeData","props","context","_toRefs","toRefs","data","columns","_useConfig","useConfig","t","globalConfig","_useGlobalIcon","useGlobalIcon","AddRectangleIcon","TdAddRectangleIcon","MinusRectangleIcon","TdMinusRectangleIcon","store","ref","TableTreeStore","treeNodeCol","shallowRef","dataSource","_useClassName","useClassName","tableTreeClasses","renderTNode","useTNodeDefault","rowDataKeys","computed","_props$tree","rowKey","childrenKey","tree","checkedColumn","value","find","col","colKey","watch","column","updateDisabledState","foldIcon","params","_objectSpread","type","defaultFoldIcon","treeExpandAndFoldIcon","h","_createVNode","defaultNode","expandIcon","defaultExpandIcon","uniqueKeys","_store$value","_store$value$getAllUn","getAllUniqueKeys","join","resetData","immediate","onUnmounted","_store$value$treeData","treeDataMap","clear","_props$tree2","treeNodeColumnIndex","getTreeNodeColumnCol","_props$tree3","newVal","cloneDeep","initialTreeStore","defaultExpandAll","expandAll","getTreeNodeStyle","level","_props$tree4","_props$tree5","indent","paddingLeft","concat","toggleExpandData","p","trigger","_store$value2","_store$value2$treeDat","_props$onTreeExpandCh","currentData","row","__VIRTUAL_SCROLL_INDEX","rowIndex","_toConsumableArray","rowValue","get","rowState","onTreeExpandChange","call","_props$tree6","_columns2$treeNodeCol","_columns2$treeNodeCol2","formatTreeColumn","newCol","cell","cellInfo","renderCell","slots","cellEmptyContent","currentState","colStyle","classes","_defineProperty","inlineCol","ellipsis","childrenNodes","Array","_store$value$treeData2","iconNode","expanded","length","icon","onClick","e","stopPropagation","leafNode","setData","key","newRowData","updateData","newData","getData","remove","appendTo","arguments","undefined","appendToRoot","insertAfter","insertBefore","foldAll","swapData","r","result","_props$onAbnormalDrag","code","reason","onAbnormalDragSort","getTreeNode","getTreeExpandedRow"],"mappings":"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"}