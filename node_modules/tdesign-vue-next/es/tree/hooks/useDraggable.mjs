/**
 * tdesign v1.3.1
 * (c) 2023 tdesign
 * @license MIT
 */

import { toRefs, inject, ref } from 'vue';
import { t as throttle_1 } from '../../_chunks/dep-0b330504.mjs';
import { dragInjectKey } from '../constants.mjs';
import '../../_chunks/dep-bec45e18.mjs';
import '../../_chunks/dep-609fffc1.mjs';
import '../../_chunks/dep-ed4e2839.mjs';
import '../../_chunks/dep-dbb72607.mjs';
import '../../_chunks/dep-14b6ba18.mjs';
import '../../_chunks/dep-339a814a.mjs';
import '../../_chunks/dep-4876170f.mjs';
import '../../_chunks/dep-c6a9d3e7.mjs';
import '../../_chunks/dep-546c20ab.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-c19618d4.mjs';
import '../../_chunks/dep-cd3b0fa6.mjs';
import '../../_chunks/dep-c9ce648e.mjs';
import '../../_chunks/dep-4d256b91.mjs';
import '../../_chunks/dep-0d7bf0e3.mjs';
import '../../_chunks/dep-201da76e.mjs';
import '../../_chunks/dep-e62c24d1.mjs';
import '../../_chunks/dep-fe69e368.mjs';
import '../../_chunks/dep-976f9516.mjs';
import '../../_chunks/dep-11e36026.mjs';
import '../../_chunks/dep-0f434994.mjs';
import '../../_chunks/dep-f5c677eb.mjs';
import '../../_chunks/dep-428963eb.mjs';
import '../../_chunks/dep-019ee94c.mjs';
import '../../_chunks/dep-3d1dcd03.mjs';
import '../../_chunks/dep-72f2a0b4.mjs';
import '../../_chunks/dep-56623c1f.mjs';
import '../../_chunks/dep-f694a61e.mjs';
import '../../_chunks/dep-d96da68c.mjs';
import '../../_chunks/dep-81ef22a5.mjs';
import '../../_chunks/dep-f4a1f294.mjs';
import '../../_chunks/dep-99aaf398.mjs';
import '../../_chunks/dep-9e4f2d05.mjs';
import '../../_chunks/dep-2351c759.mjs';
import '../../_chunks/dep-2d971205.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-3be1a481.mjs';
import '../../_chunks/dep-b76005d0.mjs';
import '../../config-provider/type.mjs';

function useDraggable(props) {
  var _toRefs = toRefs(props),
    nodeRef = _toRefs.nodeRef,
    node = _toRefs.node;
  var onDrag = inject(dragInjectKey);
  var isDragOver = ref(false);
  var isDragging = ref(false);
  var dropPosition = ref(0);
  var updateDropPosition = throttle_1(function (e) {
    if (typeof window === "undefined") return;
    if (!nodeRef.value) return;
    var rect = nodeRef.value.getBoundingClientRect();
    var offsetY = window.pageYOffset + rect.top;
    var pageY = e.pageY;
    var gapHeight = rect.height / 4;
    var diff = pageY - offsetY;
    if (diff < gapHeight) {
      dropPosition.value = -1;
    } else if (diff < rect.height - gapHeight) {
      dropPosition.value = 0;
    } else {
      dropPosition.value = 1;
    }
  });
  var setDragStatus = function setDragStatus(status, e) {
    var _onDrag$onDragStart, _onDrag$onDragEnd, _onDrag$onDragOver, _onDrag$onDragLeave, _onDrag$onDrop;
    switch (status) {
      case "dragStart":
        isDragging.value = true;
        dropPosition.value = 0;
        (_onDrag$onDragStart = onDrag.onDragStart) === null || _onDrag$onDragStart === void 0 ? void 0 : _onDrag$onDragStart.call(onDrag, {
          node: node.value,
          e: e
        });
        e.dataTransfer.effectAllowed = "move";
        break;
      case "dragEnd":
        isDragging.value = false;
        isDragOver.value = false;
        dropPosition.value = 0;
        updateDropPosition.cancel();
        (_onDrag$onDragEnd = onDrag.onDragEnd) === null || _onDrag$onDragEnd === void 0 ? void 0 : _onDrag$onDragEnd.call(onDrag, {
          node: node.value,
          e: e
        });
        break;
      case "dragOver":
        isDragOver.value = true;
        updateDropPosition(e);
        (_onDrag$onDragOver = onDrag.onDragOver) === null || _onDrag$onDragOver === void 0 ? void 0 : _onDrag$onDragOver.call(onDrag, {
          node: node.value,
          e: e
        });
        break;
      case "dragLeave":
        isDragOver.value = false;
        dropPosition.value = 0;
        updateDropPosition.cancel();
        (_onDrag$onDragLeave = onDrag.onDragLeave) === null || _onDrag$onDragLeave === void 0 ? void 0 : _onDrag$onDragLeave.call(onDrag, {
          node: node.value,
          e: e
        });
        break;
      case "drop":
        (_onDrag$onDrop = onDrag.onDrop) === null || _onDrag$onDrop === void 0 ? void 0 : _onDrag$onDrop.call(onDrag, {
          node: node.value,
          dropPosition: dropPosition.value,
          e: e
        });
        isDragOver.value = false;
        updateDropPosition.cancel();
        break;
      default:
        break;
    }
  };
  return {
    isDragOver: isDragOver,
    isDragging: isDragging,
    dropPosition: dropPosition,
    setDragStatus: setDragStatus
  };
}

export { useDraggable as default };
//# sourceMappingURL=useDraggable.mjs.map
