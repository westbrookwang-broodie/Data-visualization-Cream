/**
 * tdesign v1.3.1
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9ddd4050.mjs';
import { h } from 'vue';
import { p as pick_1 } from '../_chunks/dep-fa470f1c.mjs';
import { i as isFunction_1 } from '../_chunks/dep-14b6ba18.mjs';
import { i as isString_1 } from '../_chunks/dep-81ef22a5.mjs';
import { i as isArray_1 } from '../_chunks/dep-0f434994.mjs';
import { i as isNumber_1 } from '../_chunks/dep-d60edf68.mjs';
import '../_chunks/dep-dbb72607.mjs';
import '../_chunks/dep-bec45e18.mjs';
import '../_chunks/dep-a0dff9f9.mjs';
import '../_chunks/dep-f5c677eb.mjs';
import '../_chunks/dep-c6a9d3e7.mjs';
import '../_chunks/dep-339a814a.mjs';
import '../_chunks/dep-546c20ab.mjs';
import '../_chunks/dep-4d256b91.mjs';
import '../_chunks/dep-0d7bf0e3.mjs';
import '../_chunks/dep-201da76e.mjs';
import '../_chunks/dep-ed4e2839.mjs';
import '../_chunks/dep-e62c24d1.mjs';
import '../_chunks/dep-7c35655e.mjs';
import '../_chunks/dep-1d5f11a5.mjs';
import '../_chunks/dep-fe69e368.mjs';
import '../_chunks/dep-976f9516.mjs';
import '../_chunks/dep-72f2a0b4.mjs';
import '../_chunks/dep-11e36026.mjs';
import '../_chunks/dep-019ee94c.mjs';
import '../_chunks/dep-4bb6a466.mjs';
import '../_chunks/dep-d96da68c.mjs';
import '../_chunks/dep-9e4f2d05.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getParentsToRoot(element, root) {
  var list = [];
  var el = element;
  while (el && el.parentNode) {
    list.push(el);
    if (el === root) {
      break;
    }
    el = el.parentNode;
  }
  return list;
}
function getParentMarks(name, element, root) {
  var list = getParentsToRoot(element, root);
  return list.map(function (el) {
    var mark = {
      name: name,
      value: el.getAttribute(name) || "",
      el: el
    };
    return mark;
  }).filter(function (mark) {
    return mark.value;
  });
}
function getMark(name, element, root) {
  var list = getParentMarks(name, element, root);
  var info = list.pop() || null;
  return info;
}
function getTNode(prop) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tnode = null;
  var item = null;
  var conf = _objectSpread({}, options);
  if (isFunction_1(prop)) {
    var _conf$node;
    item = prop(h, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
  } else if (isString_1(prop)) {
    item = prop;
  }
  if (isString_1(item)) {
    tnode = item;
  } else if (item) {
    tnode = item;
  }
  return tnode;
}
function getLineModel(nodes, node, index) {
  var lineModel = {
    top: false,
    right: false,
    bottom: false,
    left: false
  };
  var nodeChildren = [];
  if (isArray_1(node.children)) {
    nodeChildren = node.children;
  }
  var childNode = nodes[index - 1] || null;
  var nodeItemIndex = childNode ? childNode.getIndex() : 0;
  if (index === 0) {
    lineModel.left = !!node.parent;
    lineModel.bottom = node.children && node.expanded;
    lineModel.right = node.parent && !node.children;
  } else if (index === 1) {
    lineModel.top = true;
    lineModel.right = true;
    lineModel.bottom = nodeItemIndex < nodeChildren.length - 1;
  } else if (nodeItemIndex < nodeChildren.length - 1) {
    lineModel.top = true;
    lineModel.bottom = true;
  }
  return lineModel;
}
function isTreeNodeValue(item) {
  return isString_1(item) || isNumber_1(item);
}
function getNode(store, item) {
  var node = null;
  var val = null;
  if (isString_1(item) || isNumber_1(item)) {
    val = item;
  } else if (item && isTreeNodeValue(item.value)) {
    val = item.value;
  }
  node = store.getNode(val);
  return node;
}
var getStoreConfig = function getStoreConfig(props) {
  var storeProps = pick_1(props, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "draggable", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
  return storeProps;
};

export { getLineModel, getMark, getNode, getParentMarks, getParentsToRoot, getStoreConfig, getTNode, isTreeNodeValue };
//# sourceMappingURL=util.mjs.map
