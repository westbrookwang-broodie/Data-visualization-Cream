{"version":3,"file":"tree-item.mjs","sources":["../../src/tree/tree-item.tsx"],"sourcesContent":["import { computed, h, defineComponent, ref, PropType, inject, reactive } from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport isBoolean from 'lodash/isBoolean';\nimport { CaretRightSmallIcon as TdCaretRightSmallIcon } from 'tdesign-icons-vue-next';\n\nimport TCheckBox from '../checkbox';\nimport TLoading from '../loading';\n\nimport { getTNode } from './util';\nimport { useCLASSNAMES, injectKey } from './constants';\nimport TreeNode from '../_common/js/tree/tree-node';\n\nimport useRipple from '../hooks/useRipple';\nimport { useConfig, usePrefixClass } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport useDraggable from './hooks/useDraggable';\n\nimport type { TypeEventState, TreeNodeModel } from './interface';\n\nexport default defineComponent({\n  name: 'TTreeNode',\n  props: {\n    node: {\n      type: Object as PropType<TreeNode>,\n    },\n    onClick: Function as PropType<(e: TypeEventState) => void>,\n    onChange: Function as PropType<(e: TypeEventState) => void>,\n    onDrop: Function as PropType<(node: TreeNode, val: number, e: DragEvent) => void>,\n    onDragStart: Function as PropType<(node: TreeNode, e: DragEvent) => void>,\n    expandOnClickNode: Boolean,\n  },\n  setup(props) {\n    const treeScope = inject(injectKey);\n    const isClicked = ref(false);\n    const label = ref<HTMLElement>();\n    useRipple(label);\n\n    const CLASS_NAMES = useCLASSNAMES();\n\n    const { globalConfig } = useConfig('tree');\n    const classPrefix = usePrefixClass();\n    const { CaretRightSmallIcon } = useGlobalIcon({ CaretRightSmallIcon: TdCaretRightSmallIcon });\n\n    const handleClick = (evt: MouseEvent) => {\n      const { node, expandOnClickNode } = props;\n      const state: TypeEventState = {\n        mouseEvent: evt,\n        event: evt,\n        node,\n        path: node.getPath(),\n      };\n\n      const srcTarget = evt.target as HTMLElement;\n      const isBranchTrigger =\n        node.children &&\n        props.expandOnClickNode &&\n        (srcTarget.className === `${classPrefix.value}-checkbox__input` || srcTarget.tagName.toLowerCase() === 'input');\n      // checkbox 上也有 click 事件, 避免重复的 click 事件触发\n      if (isClicked.value || isBranchTrigger) return;\n\n      // 处理expandOnClickNode时与checkbox的选中的逻辑冲突\n      if (\n        expandOnClickNode &&\n        node.children &&\n        srcTarget.className?.indexOf?.(`${classPrefix.value}-tree__label`) !== -1\n      )\n        evt.preventDefault();\n\n      isClicked.value = true;\n      setTimeout(() => {\n        isClicked.value = false;\n      });\n\n      props.onClick?.(state);\n    };\n\n    const nodeRef = ref<HTMLElement>();\n    const { isDragOver, isDragging, dropPosition, setDragStatus } = useDraggable(\n      reactive({ nodeRef, node: props.node }),\n    );\n\n    const handleDragStart = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragStart', evt);\n      evt.dataTransfer.effectAllowed = 'move';\n\n      try {\n        // ie throw error firefox-need-it\n        evt.dataTransfer?.setData('text/plain', '');\n      } catch (e) {\n        // empty\n      }\n      props.onDragStart?.(node, evt);\n    };\n\n    const handleDragEnd = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragEnd', evt);\n    };\n\n    const handleDragOver = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      evt.preventDefault();\n      setDragStatus('dragOver', evt);\n    };\n\n    const handleDragLeave = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragLeave', evt);\n    };\n\n    const handleDrop = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      evt.preventDefault();\n      setDragStatus('drop', evt);\n      props.onDrop?.(node, dropPosition.value, evt);\n    };\n\n    const handleChange = () => {\n      const { node } = props;\n      const event = new Event('change');\n      const state: TypeEventState = {\n        event,\n        node,\n      };\n      props.onChange?.(state);\n    };\n\n    const itemStyles = computed(() => {\n      const { level } = props.node;\n      const styles = `--level: ${level};`;\n      return styles;\n    });\n\n    const itemClassList = computed(() => {\n      const { node } = props;\n      const list = [];\n      list.push(CLASS_NAMES.value.treeNode);\n      list.push({\n        [CLASS_NAMES.value.treeNodeOpen]: node.expanded,\n        [CLASS_NAMES.value.actived]: node.isActivable() ? node.actived : false,\n        [CLASS_NAMES.value.disabled]: node.isDisabled(),\n      });\n      // 拖拽相关 class\n      list.push({\n        [CLASS_NAMES.value.treeNodeDraggable]: node.isDraggable(),\n        [CLASS_NAMES.value.treeNodeDragging]: isDragging.value,\n        [CLASS_NAMES.value.treeNodeDragTipTop]: isDragOver.value && dropPosition.value < 0,\n        [CLASS_NAMES.value.treeNodeDragTipBottom]: isDragOver.value && dropPosition.value > 0,\n        [CLASS_NAMES.value.treeNodeDragTipHighlight]: !isDragging.value && isDragOver.value && dropPosition.value === 0,\n      });\n      return list;\n    });\n\n    const renderLine = () => {\n      const { node } = props;\n      const { line, scopedSlots } = treeScope.value;\n      const iconVisible = !!treeScope.value.icon;\n\n      let lineNode = null;\n      if (line === true) {\n        if (scopedSlots?.line) {\n          lineNode = scopedSlots.line({\n            node: node?.getModel(),\n          });\n        } else if (node.parent && node.tree) {\n          const { vmIsLeaf, vmIsFirst, level } = node;\n\n          const lineClasses = [];\n\n          // 每个节点绘制抵达上一层级的折线\n          lineClasses.push(CLASS_NAMES.value.line);\n\n          // 叶子节点，折线宽度延长，因为没有 icon 呈现\n          // 任意节点，icon 不呈现时也是要延长折线宽度\n          if (vmIsLeaf || !iconVisible) {\n            lineClasses.push(CLASS_NAMES.value.lineIsLeaf);\n          }\n\n          // 分支首节点，到上一节点的折线高度要缩短，让位给 icon 呈现\n          // 如果 icon 隐藏了，则不必缩短折线高度\n          if (vmIsFirst && iconVisible) {\n            lineClasses.push(CLASS_NAMES.value.lineIsFirst);\n          }\n\n          // 如果节点的父节点，不是最后的节点\n          // 则需要绘制节点延长线\n          const shadowStyles: string[] = [];\n          const parents = node.getParents();\n          parents.pop();\n          parents.forEach((pNode: TreeNode, index: number) => {\n            if (!pNode.vmIsLast) {\n              shadowStyles.push(`calc(-${index + 1} * var(--space)) 0 var(--color)`);\n            }\n          });\n\n          const styles = {\n            '--level': level,\n            'box-shadow': shadowStyles.join(','),\n          };\n\n          lineNode = <span class={lineClasses} style={styles}></span>;\n        }\n      } else {\n        lineNode = getTNode(line, {\n          node,\n        });\n      }\n      return lineNode;\n    };\n\n    const renderIcon = () => {\n      const getFolderIcon = () => {\n        if (isFunction(globalConfig.value.folderIcon)) {\n          return globalConfig.value.folderIcon(h);\n        }\n        return <CaretRightSmallIcon />;\n      };\n\n      const { node } = props;\n      const { icon, scopedSlots } = treeScope.value;\n      let isDefaultIcon = false;\n\n      let iconNode = null;\n      if (icon === true) {\n        if (scopedSlots?.icon) {\n          iconNode = scopedSlots.icon({\n            node: node?.getModel(),\n          });\n        } else if (!node.vmIsLeaf) {\n          isDefaultIcon = true;\n          iconNode = getFolderIcon();\n          if (node.loading && node.expanded) {\n            iconNode = <TLoading />;\n          }\n        } else {\n          iconNode = '';\n        }\n      } else {\n        iconNode = getTNode(icon, {\n          node,\n        });\n      }\n      iconNode = (\n        <span\n          class={[\n            CLASS_NAMES.value.treeIcon,\n            CLASS_NAMES.value.folderIcon,\n            isDefaultIcon ? CLASS_NAMES.value.treeIconDefault : '',\n          ]}\n          trigger=\"expand\"\n          ignore=\"active\"\n        >\n          {iconNode}\n        </span>\n      );\n\n      return iconNode;\n    };\n\n    const renderLabel = () => {\n      const { node } = props;\n      const { label, scopedSlots, disableCheck } = treeScope.value;\n      const checkProps = treeScope.value.checkProps || {};\n\n      let labelNode = null;\n      if (label === true) {\n        if (scopedSlots.label) {\n          labelNode = scopedSlots.label({\n            node: node.getModel(),\n          });\n        } else {\n          labelNode = node.label || '';\n        }\n      } else {\n        labelNode = getTNode(label, {\n          node,\n        });\n      }\n\n      const labelClasses = [\n        CLASS_NAMES.value.treeLabel,\n        CLASS_NAMES.value.treeLabelStrictly,\n        {\n          [CLASS_NAMES.value.actived]: node.isActivable() ? node.actived : false,\n        },\n      ];\n\n      if (node.vmCheckable) {\n        let checkboxDisabled = false;\n        if (isFunction(disableCheck)) {\n          checkboxDisabled = disableCheck(node as TreeNodeModel & TreeNode);\n        } else {\n          checkboxDisabled = !!disableCheck || node.data?.checkable === false;\n        }\n        if (node.isDisabled()) {\n          checkboxDisabled = true;\n        }\n        const itemCheckProps = {\n          ...checkProps,\n          disabled: checkboxDisabled,\n        };\n\n        // 当开启expandOnClickNode且为非叶子节点时 点击label不选中选项\n        const shouldStopLabelTrigger = computed(() => {\n          const isNormalBranchNode = Array.isArray(node.children) && node.children?.length > 0;\n          const isLazyLoadChildBranchNode = isBoolean(node.children) && node.children; // 懒加载子节点场景\n\n          const isBranchNode = isNormalBranchNode || isLazyLoadChildBranchNode;\n\n          return props.expandOnClickNode && isBranchNode;\n        });\n\n        labelNode = (\n          <TCheckBox\n            class={labelClasses}\n            checked={node.checked}\n            indeterminate={node.indeterminate}\n            disabled={node.isDisabled()}\n            name={node.value.toString()}\n            onChange={() => handleChange()}\n            ignore=\"expand\"\n            stopLabelTrigger={shouldStopLabelTrigger.value}\n            needRipple={true}\n            {...itemCheckProps}\n          >\n            {labelNode}\n          </TCheckBox>\n        );\n      } else {\n        const inner = <span style=\"position: relative\">{labelNode}</span>;\n        labelNode = node.isActivable() ? ( // 使用key是为了避免元素复用，从而顺利移除ripple指令\n          <span key=\"1\" ref=\"label\" class={labelClasses} title={node.label}>\n            {inner}\n          </span>\n        ) : (\n          <span key=\"2\" class={labelClasses} title={node.label}>\n            {inner}\n          </span>\n        );\n      }\n\n      return labelNode;\n    };\n\n    const renderOperations = () => {\n      const { node } = props;\n      const { operations, scopedSlots } = treeScope.value;\n\n      let opNode = null;\n      if (scopedSlots?.operations) {\n        opNode = scopedSlots.operations({\n          node: node?.getModel(),\n        });\n      } else {\n        opNode = getTNode(operations, {\n          node,\n        });\n      }\n      if (opNode) {\n        opNode = (\n          <span class={CLASS_NAMES.value.treeOperations} ignore=\"active,expand\">\n            {opNode}\n          </span>\n        );\n      }\n      return opNode;\n    };\n\n    return () => {\n      const { node } = props;\n\n      return (\n        <div\n          ref={nodeRef}\n          class={itemClassList.value}\n          data-value={node.value}\n          data-level={node.level}\n          style={itemStyles.value}\n          onClick={(evt: MouseEvent) => handleClick(evt)}\n          draggable={node.isDraggable()}\n          onDragstart={(evt: DragEvent) => handleDragStart(evt)}\n          onDragend={(evt: DragEvent) => handleDragEnd(evt)}\n          onDragover={(evt: DragEvent) => handleDragOver(evt)}\n          onDragleave={(evt: DragEvent) => handleDragLeave(evt)}\n          onDrop={(evt: DragEvent) => handleDrop(evt)}\n        >\n          {renderLine()}\n          {renderIcon()}\n          {renderLabel()}\n          {renderOperations()}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","name","props","node","type","onClick","Function","onChange","onDrop","onDragStart","expandOnClickNode","Boolean","setup","treeScope","inject","injectKey","isClicked","ref","label","useRipple","CLASS_NAMES","useCLASSNAMES","_useConfig","useConfig","globalConfig","classPrefix","usePrefixClass","_useGlobalIcon","useGlobalIcon","CaretRightSmallIcon","TdCaretRightSmallIcon","handleClick","evt","_srcTarget$className","_srcTarget$className$","_props$onClick","state","mouseEvent","event","path","getPath","srcTarget","target","isBranchTrigger","children","className","concat","value","tagName","toLowerCase","indexOf","preventDefault","setTimeout","nodeRef","_useDraggable","useDraggable","reactive","isDragOver","isDragging","dropPosition","setDragStatus","handleDragStart","_props$onDragStart","isDraggable","stopPropagation","dataTransfer","effectAllowed","_evt$dataTransfer","setData","e","handleDragEnd","handleDragOver","handleDragLeave","handleDrop","_props$onDrop","handleChange","_props$onChange","Event","itemStyles","computed","level","styles","itemClassList","_list$push","_list$push2","list","push","treeNode","_defineProperty","treeNodeOpen","expanded","actived","isActivable","disabled","isDisabled","treeNodeDraggable","treeNodeDragging","treeNodeDragTipTop","treeNodeDragTipBottom","treeNodeDragTipHighlight","renderLine","_treeScope$value","line","scopedSlots","iconVisible","icon","lineNode","getModel","parent","tree","vmIsLeaf","vmIsFirst","lineClasses","lineIsLeaf","lineIsFirst","shadowStyles","parents","getParents","pop","forEach","pNode","index","vmIsLast","join","_createVNode","getTNode","renderIcon","getFolderIcon","isFunction","folderIcon","h","_treeScope$value2","isDefaultIcon","iconNode","loading","TLoading","_iconNode","treeIcon","treeIconDefault","renderLabel","_treeScope$value3","disableCheck","checkProps","labelNode","labelClasses","treeLabel","treeLabelStrictly","vmCheckable","checkboxDisabled","_node$data","data","checkable","itemCheckProps","_objectSpread","shouldStopLabelTrigger","_node$children","isNormalBranchNode","Array","isArray","length","isLazyLoadChildBranchNode","isBoolean","isBranchNode","_labelNode","TCheckBox","_mergeProps","checked","indeterminate","inner","renderOperations","_treeScope$value4","operations","opNode","_opNode","treeOperations","onDragstart","onDragend","onDragover","onDragleave"],"mappings":"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"}