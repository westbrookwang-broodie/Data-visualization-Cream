{"version":3,"file":"useUpload.mjs","sources":["../../../src/upload/hooks/useUpload.ts"],"sourcesContent":["import { ref, computed, toRefs } from 'vue';\nimport merge from 'lodash/merge';\nimport { SizeLimitObj, TdUploadProps, UploadChangeContext, UploadFile, UploadRemoveContext } from '../type';\nimport {\n  getFilesAndErrors,\n  validateFile,\n  upload,\n  getTriggerTextField,\n  getDisplayFiles,\n  formatToUploadFile,\n} from '../../_common/js/upload/main';\nimport { getFileUrlByFileRaw } from '../../_common/js/upload/utils';\nimport useVModel from '../../hooks/useVModel';\nimport { InnerProgressContext, OnResponseErrorContext, SuccessContext } from '../../_common/js/upload/types';\nimport { useConfig } from '../../hooks/useConfig';\n\nexport type ValidateParams = Parameters<TdUploadProps['onValidate']>[0];\n\n/**\n * 上传组件全部逻辑，方便脱离 UI，自定义 UI 组件\n */\nexport default function useUpload(props: TdUploadProps) {\n  const inputRef = ref<HTMLInputElement>();\n  // TODO: Form 表单控制上传组件是否禁用\n  const { disabled, autoUpload, isBatchUpload, multiple, files, modelValue, defaultFiles } = toRefs(props);\n  const { globalConfig, t, classPrefix } = useConfig('upload');\n  const [uploadValue, setUploadValue] = useVModel(files, modelValue, defaultFiles.value, props.onChange, 'files');\n  const xhrReq = ref<{ files: UploadFile[]; xhrReq: XMLHttpRequest }[]>([]);\n  const toUploadFiles = ref<UploadFile[]>([]);\n  const sizeOverLimitMessage = ref('');\n\n  const locale = computed(() => merge({}, globalConfig.value, props.locale));\n\n  const tipsClasses = `${classPrefix.value}-upload__tips ${classPrefix.value}-size-s`;\n  const errorClasses = [tipsClasses].concat(`${classPrefix.value}-upload__tips-error`);\n  const placeholderClass = `${classPrefix.value}-upload__placeholder`;\n\n  // 单文件场景：触发元素文本\n  const triggerUploadText = computed(() => {\n    const field = getTriggerTextField({\n      isBatchUpload: isBatchUpload.value,\n      multiple: multiple.value,\n      status: uploadValue.value?.[0]?.status,\n      autoUpload: autoUpload.value,\n    });\n    return locale.value.triggerUploadText[field];\n  });\n\n  const uploading = ref(false);\n\n  // 文件列表显示的内容（自动上传和非自动上传有所不同）\n  const displayFiles = computed(() => {\n    return getDisplayFiles({\n      multiple: props.multiple,\n      toUploadFiles: toUploadFiles.value,\n      uploadValue: uploadValue.value,\n      autoUpload: autoUpload.value,\n      isBatchUpload: isBatchUpload.value,\n    });\n  });\n\n  const updateFilesProgress = () => {\n    if (props.autoUpload) {\n      toUploadFiles.value = [...toUploadFiles.value];\n    }\n  };\n\n  const onResponseError = (p: OnResponseErrorContext) => {\n    if (!p || !p.files || !p.files[0]) return;\n    const { response, event, files } = p;\n    updateFilesProgress();\n    props.onOneFileFail?.({\n      e: event,\n      file: files?.[0],\n      currentFiles: files,\n      failedFiles: files,\n      response,\n    });\n    // 单选或多文件替换，需要清空上一次上传成功的文件\n    if (!props.multiple || props.isBatchUpload) {\n      setUploadValue([], {\n        trigger: 'progress-fail',\n        e: p.event,\n        file: p.files[0],\n      });\n    }\n  };\n\n  // 多文件上传场景，单个文件进度\n  const onResponseProgress = (p: InnerProgressContext) => {\n    updateFilesProgress();\n    props.onProgress?.({\n      e: p.event,\n      file: p.file,\n      currentFiles: p.files,\n      percent: p.percent,\n      type: p.type,\n      XMLHttpRequest: p.XMLHttpRequest,\n    });\n  };\n\n  // 多文件上传场景，单个文件上传成功后\n  const onResponseSuccess = (p: SuccessContext) => {\n    // 只有多个上传请求同时触发时才需 onOneFileSuccess\n    if (props.multiple && !props.uploadAllFilesInOneRequest) {\n      updateFilesProgress();\n      props.onOneFileSuccess?.({\n        e: p.event,\n        file: p.files[0],\n        response: p.response,\n      });\n    }\n  };\n\n  function getSizeLimitError(sizeLimitObj: SizeLimitObj) {\n    const limit = sizeLimitObj;\n    return limit.message\n      ? t(limit.message, { sizeLimit: limit.size })\n      : `${t(locale.value.sizeLimitMessage, { sizeLimit: limit.size })} ${limit.unit}`;\n  }\n\n  const handleNotAutoUpload = (toFiles: UploadFile[]) => {\n    const tmpFiles = props.multiple && !isBatchUpload.value ? uploadValue.value.concat(toFiles) : toFiles;\n    if (!tmpFiles.length) return;\n\n    // 图片需要本地预览\n    if (['image', 'image-flow'].includes(props.theme)) {\n      const list = tmpFiles.map(\n        (file) =>\n          new Promise((resolve) => {\n            getFileUrlByFileRaw(file.raw).then((url) => {\n              resolve({ ...file, url: file.url || url });\n            });\n          }),\n      );\n      Promise.all(list).then((files) => {\n        setUploadValue(files, {\n          trigger: 'add',\n          index: uploadValue.value.length,\n          file: toFiles[0],\n          files: toFiles,\n        });\n      });\n    } else {\n      setUploadValue(tmpFiles, {\n        trigger: 'add',\n        index: uploadValue.value.length,\n        file: tmpFiles[0],\n      });\n    }\n    toUploadFiles.value = [];\n  };\n\n  const onFileChange = (files: FileList) => {\n    if (disabled.value) return;\n    const params = { currentSelectedFiles: formatToUploadFile([...files], props.format) };\n    // @ts-ignore\n    props.onSelectChange?.([...files], params);\n    validateFile({\n      uploadValue: uploadValue.value,\n      // @ts-ignore\n      files: [...files],\n      allowUploadDuplicateFile: props.allowUploadDuplicateFile,\n      max: props.max,\n      sizeLimit: props.sizeLimit,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: autoUpload.value,\n      format: props.format,\n      beforeUpload: props.beforeUpload,\n      beforeAllFilesUpload: props.beforeAllFilesUpload,\n    }).then((args) => {\n      // 自定义全文件校验不通过\n      if (args.validateResult?.type === 'BEFORE_ALL_FILES_UPLOAD') {\n        const params: ValidateParams = { type: 'BEFORE_ALL_FILES_UPLOAD', files: args.files };\n        props.onValidate?.(params);\n        return;\n      }\n      // 文件数量校验不通过\n      if (args.lengthOverLimit) {\n        const params: ValidateParams = { type: 'FILES_OVER_LENGTH_LIMIT', files: args.files };\n        props.onValidate?.(params);\n        if (!args.files.length) return;\n      }\n      // 过滤相同的文件名\n      if (args.hasSameNameFile) {\n        const params: ValidateParams = { type: 'FILTER_FILE_SAME_NAME', files: args.files };\n        props.onValidate?.(params);\n      }\n      // 文件大小校验结果处理（已过滤超出限制的文件）\n      if (args.fileValidateList instanceof Array) {\n        const { sizeLimitErrors, beforeUploadErrorFiles, toFiles } = getFilesAndErrors(\n          args.fileValidateList,\n          getSizeLimitError,\n        );\n        const tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);\n        toUploadFiles.value = tmpWaitingFiles;\n        props.onWaitingUploadFilesChange?.({ files: tmpWaitingFiles, trigger: 'validate' });\n        // 文件大小处理\n        if (sizeLimitErrors[0]) {\n          sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;\n          props.onValidate?.({ type: 'FILE_OVER_SIZE_LIMIT', files: sizeLimitErrors.map((t) => t.file) });\n        } else {\n          sizeOverLimitMessage.value = '';\n          // 自定义方法 beforeUpload 拦截的文件\n          if (beforeUploadErrorFiles.length) {\n            const params: ValidateParams = { type: 'CUSTOM_BEFORE_UPLOAD', files: beforeUploadErrorFiles };\n            props.onValidate?.(params);\n          }\n        }\n        // 如果是自动上传\n        if (autoUpload.value) {\n          uploadFiles(tmpWaitingFiles);\n        } else {\n          handleNotAutoUpload(tmpWaitingFiles);\n        }\n      }\n    });\n\n    // 清空 <input type=\"file\"> 元素的文件，避免出现重复文件无法选择的情况\n    inputRef.value.value = null;\n  };\n\n  const onNormalFileChange = (e: InputEvent) => {\n    onFileChange?.((e.target as HTMLInputElement).files);\n  };\n\n  function onDragFileChange(e: DragEvent) {\n    onFileChange?.(e.dataTransfer.files);\n  }\n\n  /**\n   * 上传文件。对外暴露方法，修改时需谨慎\n   * @param toFiles 本地上传的文件列表\n   */\n  function uploadFiles(toFiles?: UploadFile[]) {\n    const notUploadedFiles = uploadValue.value.filter((t) => t.status !== 'success');\n    const files = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;\n    if (!files || !files.length) return;\n    uploading.value = true;\n    xhrReq.value = [];\n    upload({\n      action: props.action,\n      headers: props.headers,\n      method: props.method,\n      name: props.name,\n      withCredentials: props.withCredentials,\n      uploadedFiles: uploadValue.value,\n      toUploadFiles: files,\n      multiple: props.multiple,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: props.autoUpload,\n      uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,\n      useMockProgress: props.useMockProgress,\n      data: props.data,\n      mockProgressDuration: props.mockProgressDuration,\n      requestMethod: props.requestMethod,\n      formatRequest: props.formatRequest,\n      formatResponse: props.formatResponse,\n      onResponseProgress,\n      onResponseSuccess,\n      onResponseError,\n      setXhrObject: (xhr) => {\n        if (xhr.files[0]?.raw && xhrReq.value.find((item) => item.files[0]?.raw === xhr.files[0].raw)) return;\n        xhrReq.value = xhrReq.value.concat(xhr);\n      },\n    }).then(\n      // 多文件场景时，全量文件完成后\n      ({ status, data, list, failedFiles }) => {\n        uploading.value = false;\n        if (status === 'success') {\n          if (props.autoUpload) {\n            setUploadValue([...data.files], {\n              trigger: 'add',\n              file: data.files[0],\n            });\n          }\n          xhrReq.value = [];\n          props.onSuccess?.({\n            fileList: data.files,\n            currentFiles: files,\n            file: files[0],\n            // 只有全部请求完成后，才会存在该字段\n            results: list?.map((t) => t.data),\n            // 单文件单请求有一个 response，多文件多请求有多个 response\n            response: data.response || list.map((t) => t.data.response),\n            XMLHttpRequest: data.XMLHttpRequest,\n          });\n        } else if (failedFiles?.[0]) {\n          props.onFail?.({\n            e: data.event,\n            file: failedFiles[0],\n            failedFiles,\n            currentFiles: files,\n            response: data.response,\n            XMLHttpRequest: data.XMLHttpRequest,\n          });\n        }\n\n        // 非自动上传，文件都在 uploadValue，不涉及 toUploadFiles\n        if (autoUpload.value) {\n          toUploadFiles.value = failedFiles;\n          props.onWaitingUploadFilesChange?.({ files: failedFiles, trigger: 'uploaded' });\n        }\n      },\n    );\n  }\n\n  function onInnerRemove(p: UploadRemoveContext) {\n    sizeOverLimitMessage.value = '';\n    p.e.stopPropagation?.();\n    const changePrams: UploadChangeContext = {\n      e: p.e,\n      trigger: 'remove',\n      index: p.index,\n      file: p.file,\n    };\n    // remove all files for batchUpload\n    if (props.isBatchUpload || !props.multiple) {\n      toUploadFiles.value = [];\n      props.onWaitingUploadFilesChange?.({ files: [], trigger: 'remove' });\n      setUploadValue([], changePrams);\n    } else if (!props.autoUpload) {\n      uploadValue.value.splice(p.index, 1);\n      setUploadValue([...uploadValue.value], changePrams);\n    } else {\n      // autoUpload 场景下， p.index < uploadValue.length 表示移除已经上传成功的文件；反之表示移除待上传列表文件\n      // eslint-disable-next-line\n      if (p.index < uploadValue.value.length) {\n        uploadValue.value.splice(p.index, 1);\n        setUploadValue([...uploadValue.value], changePrams);\n      } else {\n        toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);\n        toUploadFiles.value = [...toUploadFiles.value];\n        props.onWaitingUploadFilesChange?.({ files: [...toUploadFiles.value], trigger: 'remove' });\n      }\n    }\n    props.onRemove?.(p);\n  }\n\n  const triggerUpload = (e?: MouseEvent) => {\n    if (disabled.value || !inputRef.value) return;\n    e?.stopPropagation?.();\n    (inputRef.value as HTMLInputElement).click();\n  };\n\n  const cancelUpload = (context?: { file?: UploadFile; e?: MouseEvent }) => {\n    xhrReq.value?.forEach((item) => {\n      item.xhrReq?.abort();\n    });\n    uploading.value = false;\n\n    if (autoUpload.value) {\n      toUploadFiles.value = toUploadFiles.value.map((item) => ({ ...item, status: 'waiting' }));\n    } else {\n      setUploadValue(\n        uploadValue.value.map((item) => {\n          if (item.status !== 'success') {\n            return { ...item, status: 'waiting' };\n          }\n          return item;\n        }),\n        { trigger: 'abort' },\n      );\n    }\n\n    if (context?.file && !autoUpload.value) {\n      onInnerRemove?.({ file: context.file, e: context.e, index: 0 });\n    }\n\n    props.onCancelUpload?.();\n  };\n\n  return {\n    t,\n    locale,\n    classPrefix,\n    triggerUploadText,\n    toUploadFiles,\n    uploadValue,\n    displayFiles,\n    sizeOverLimitMessage,\n    uploading,\n    tipsClasses,\n    errorClasses,\n    placeholderClass,\n    inputRef,\n    disabled,\n    xhrReq,\n    uploadFiles,\n    onFileChange,\n    onNormalFileChange,\n    onDragFileChange,\n    onInnerRemove,\n    triggerUpload,\n    cancelUpload,\n  };\n}\n"],"names":["useUpload","props","inputRef","ref","_toRefs","toRefs","disabled","autoUpload","isBatchUpload","multiple","files","modelValue","defaultFiles","_useConfig","useConfig","globalConfig","t","classPrefix","_useVModel","useVModel","value","onChange","_useVModel2","_slicedToArray","uploadValue","setUploadValue","xhrReq","toUploadFiles","sizeOverLimitMessage","locale","computed","merge","tipsClasses","concat","errorClasses","placeholderClass","triggerUploadText","_uploadValue$value","_uploadValue$value$","field","getTriggerTextField","status","uploading","displayFiles","getDisplayFiles","updateFilesProgress","_toConsumableArray","onResponseError","p","_props$onOneFileFail","response","event","onOneFileFail","call","e","file","currentFiles","failedFiles","trigger","onResponseProgress","_props$onProgress","onProgress","percent","type","XMLHttpRequest","onResponseSuccess","uploadAllFilesInOneRequest","_props$onOneFileSucce","onOneFileSuccess","getSizeLimitError","sizeLimitObj","limit","message","sizeLimit","size","sizeLimitMessage","unit","handleNotAutoUpload","toFiles","tmpFiles","length","includes","theme","list","map","Promise","resolve","getFileUrlByFileRaw","raw","then","url","_objectSpread","all","index","onFileChange","_props$onSelectChange","params","currentSelectedFiles","formatToUploadFile","format","onSelectChange","validateFile","allowUploadDuplicateFile","max","beforeUpload","beforeAllFilesUpload","args","_args$validateResult","validateResult","_props$onValidate","onValidate","lengthOverLimit","_props$onValidate2","hasSameNameFile","_props$onValidate3","fileValidateList","Array","_props$onWaitingUploa","_getFilesAndErrors","getFilesAndErrors","sizeLimitErrors","beforeUploadErrorFiles","tmpWaitingFiles","onWaitingUploadFilesChange","_props$onValidate4","error","_props$onValidate5","uploadFiles","onNormalFileChange","target","onDragFileChange","dataTransfer","notUploadedFiles","filter","upload","action","headers","method","name","withCredentials","uploadedFiles","useMockProgress","data","mockProgressDuration","requestMethod","formatRequest","formatResponse","setXhrObject","xhr","_xhr$files$","find","item","_item$files$","_ref","_props$onSuccess","onSuccess","fileList","results","_props$onFail","onFail","_props$onWaitingUploa2","onInnerRemove","_p$e$stopPropagation","_p$e","_props$onRemove","stopPropagation","changePrams","_props$onWaitingUploa3","splice","_props$onWaitingUploa4","onRemove","triggerUpload","_e$stopPropagation","click","cancelUpload","context","_xhrReq$value","_props$onCancelUpload","forEach","_item$xhrReq","abort","onCancelUpload"],"mappings":"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"}