{"version":3,"file":"tree-select.mjs","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { defineComponent, ref, computed, watch, onMounted, toRefs } from 'vue';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\n\nimport Tree, { TreeProps, TreeNodeModel, TreeNodeValue } from '../tree';\nimport SelectInput, { TdSelectInputProps } from '../select-input';\nimport { TagInputChangeContext, TagInputValue } from '../tag-input';\nimport { InputValue } from '../input';\nimport FakeArrow from '../common-components/fake-arrow';\nimport { PopupVisibleChangeContext } from '../popup';\n\nimport { INodeOptions } from './interface';\nimport { TreeSelectValue, TdTreeSelectProps, TreeSelectValueChangeTrigger } from './type';\nimport { TreeOptionData } from '../common';\nimport props from './props';\n\n// hooks\nimport { usePrefixClass, useConfig } from '../hooks/useConfig';\nimport { useFormDisabled } from '../form/hooks';\nimport { useTNodeJSX, useTNodeDefault } from '../hooks/tnode';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\n\nexport default defineComponent({\n  name: 'TTreeSelect',\n  props,\n  setup(props: TdTreeSelectProps, { slots }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderDefaultTNode = useTNodeDefault();\n    const classPrefix = usePrefixClass();\n    const { globalConfig } = useConfig('treeSelect');\n    const formDisabled = useFormDisabled();\n\n    // ref\n    const treeRef = ref(null);\n\n    // data\n    const filterByText = ref(null);\n    const actived = ref([]);\n    const expanded = ref([]);\n    const nodeInfo = ref(null);\n    const treeKey = ref(0);\n\n    // model\n    const { value, modelValue, popupVisible, inputValue } = toRefs(props);\n    const [treeSelectValue, setTreeSelectValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    const [innerVisible, setInnerVisible] = useDefaultValue(\n      popupVisible,\n      false,\n      props.onPopupVisibleChange,\n      'popupVisible',\n    );\n    const [innerInputValue, setInnerInputValue] = useDefaultValue(\n      inputValue,\n      props.defaultInputValue,\n      props.onInputChange,\n      'inputValue',\n    );\n\n    // watch\n    watch(treeSelectValue, async () => {\n      await changeNodeInfo();\n      if (!props.multiple) {\n        actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];\n      }\n    });\n    watch(\n      () => props.data,\n      async () => {\n        await changeNodeInfo();\n        treeRerender();\n      },\n      {\n        deep: true,\n      },\n    );\n\n    // computed\n    const tDisabled = computed(() => {\n      return formDisabled.value || props.disabled;\n    });\n\n    const inputPlaceholder = computed(\n      () => (innerVisible.value && nodeInfo.value?.label) || props.placeholder || globalConfig.value.placeholder,\n    );\n\n    const popupClass = computed(() => {\n      return [`${classPrefix.value}-select__dropdown`, 'narrow-scrollbar'];\n    });\n\n    const dropdownInnerSize = computed(() => {\n      return {\n        small: 's',\n        medium: 'm',\n        large: 'l',\n      }[props.size];\n    });\n\n    const isObjectValue = computed(() => props.valueType === 'object');\n\n    const checked = computed((): Array<TreeNodeValue> => {\n      if (props.multiple) {\n        if (isObjectValue.value) {\n          return isArray(treeSelectValue.value)\n            ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n            : [];\n        }\n        return isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => item as TreeNodeValue)\n          : [];\n      }\n      return [];\n    });\n\n    const multiLimitDisabled = computed(() => {\n      return (\n        props.multiple &&\n        !!props.max &&\n        isArray(treeSelectValue.value) &&\n        props.max <= (treeSelectValue.value as Array<TreeSelectValue>).length\n      );\n    });\n\n    const realLabel = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.label || 'label';\n      }\n      return 'label';\n    });\n\n    const realValue = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.value || 'value';\n      }\n      return 'value';\n    });\n\n    const realChildren = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.children || 'children';\n      }\n      return 'children';\n    });\n\n    // timelifes\n    onMounted(async () => {\n      if (!treeSelectValue.value && props.defaultValue) {\n        await change(props.defaultValue, null, 'uncheck');\n      }\n      if (isObjectValue.value) {\n        actived.value = isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n          : [(treeSelectValue.value as INodeOptions).value];\n      } else {\n        (actived.value as TreeSelectValue) = isArray(treeSelectValue.value)\n          ? treeSelectValue.value\n          : [treeSelectValue.value];\n      }\n      changeNodeInfo();\n    });\n\n    // methods\n\n    const change = (\n      valueParam: TreeSelectValue,\n      node: TreeNodeModel<TreeOptionData>,\n      trigger: TreeSelectValueChangeTrigger,\n    ) => {\n      setTreeSelectValue(valueParam, { node, trigger });\n      changeNodeInfo();\n    };\n\n    const clear = (content: { e: MouseEvent }) => {\n      const defaultValue: TreeSelectValue = props.multiple ? [] : '';\n      actived.value = [];\n      change(defaultValue, null, 'clear');\n      props.onClear?.({ e: content.e });\n    };\n\n    const treeNodeChange = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent },\n    ) => {\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        current = valueParam.map((nodeValue) => getTreeNode(props.data, nodeValue));\n      }\n      change(current, context.node, 'check');\n    };\n\n    const treeNodeActive = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent },\n    ) => {\n      if (!props.multiple) {\n        setInnerVisible(false, context);\n      }\n      // 多选模式屏蔽 Active 事件\n      if (props.multiple) {\n        return;\n      }\n      // 单选模式重复选择不清空\n      if (treeSelectValue.value === context.node.data[realValue.value]) {\n        return;\n      }\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        const nodeValue = isEmpty(valueParam) ? '' : valueParam[0];\n        current = getTreeNode(props.data, nodeValue);\n      } else {\n        current = isEmpty(valueParam) ? '' : valueParam[0];\n      }\n      change(current, context.node, 'check');\n      actived.value = valueParam;\n    };\n\n    const treeNodeExpand = (valueParam: Array<TreeNodeValue>) => {\n      expanded.value = valueParam;\n    };\n\n    const treeNodeLoad = () => {\n      changeNodeInfo();\n    };\n\n    const inputChange = (value: InputValue): boolean => {\n      // 未打开状态不处理输入框输入\n      if (!innerVisible.value) {\n        props.onSearch?.(String(value));\n        return;\n      }\n      setInnerInputValue(value);\n      if (!value) {\n        filterByText.value = null;\n        return null;\n      }\n      filterByText.value = (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(props.filter)) {\n          const filter: boolean | Promise<boolean> = props.filter(String(value), node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[realLabel.value].indexOf(value) >= 0;\n      };\n      props.onSearch?.(String(value));\n    };\n\n    const tagChange: TdSelectInputProps['onTagChange'] = (value, context) => {\n      const { trigger, index } = context;\n      if (['tag-remove', 'backspace'].includes(trigger)) {\n        isArray(treeSelectValue.value) && (treeSelectValue.value as Array<TreeSelectValue>).splice(index, 1);\n      }\n      props.onRemove?.({ value, data: null, e: context && (context.e as MouseEvent) });\n      change(treeSelectValue.value, null, trigger as 'tag-remove' | 'backspace');\n    };\n\n    const changeNodeInfo = async () => {\n      await treeSelectValue.value;\n\n      if (!props.multiple) {\n        if (treeSelectValue.value || treeSelectValue.value === 0) {\n          nodeInfo.value = getSingleNodeInfo();\n        } else {\n          nodeInfo.value = '';\n        }\n      } else if (props.multiple) {\n        if (isArray(treeSelectValue.value)) {\n          nodeInfo.value = getMultipleNodeInfo();\n        } else {\n          nodeInfo.value = [];\n        }\n      } else {\n        nodeInfo.value = null;\n      }\n    };\n\n    const getSingleNodeInfo = () => {\n      const nodeValue = isObjectValue.value ? (treeSelectValue.value as INodeOptions).value : treeSelectValue.value;\n      if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n        if (!isEmpty(props.data)) {\n          const node = treeRef.value.getItem(nodeValue);\n          if (node) {\n            return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n          }\n        }\n        return { label: nodeValue, value: nodeValue };\n      }\n      const node = getTreeNode(props.data, nodeValue);\n      if (!node) {\n        return { label: nodeValue, value: nodeValue };\n      }\n      return node;\n    };\n\n    const getMultipleNodeInfo = () => {\n      return (treeSelectValue.value as Array<TreeSelectValue>).map((value) => {\n        const nodeValue = isObjectValue.value ? (value as INodeOptions).value : value;\n        if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n          if (!isEmpty(props.data)) {\n            const node = treeRef.value.getItem(nodeValue);\n            if (node) {\n              return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n            }\n          }\n          return { label: nodeValue, value: nodeValue };\n        }\n        const node = getTreeNode(props.data, nodeValue);\n        if (!node) {\n          return { label: nodeValue, value: nodeValue };\n        }\n        return node;\n      });\n    };\n    const getTreeNode = (data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectValue | null => {\n      for (let i = 0, len = data.length; i < len; i++) {\n        if (data[i][realValue.value] === targetValue) {\n          return { label: data[i][realLabel.value], value: data[i][realValue.value] };\n        }\n        if (data[i]?.[realChildren.value]) {\n          const result = getTreeNode(data[i]?.[realChildren.value], targetValue);\n          if (!isNil(result)) {\n            return result;\n          }\n        }\n      }\n      return null;\n    };\n\n    const treeRerender = () => {\n      treeKey.value += 1;\n    };\n\n    const renderTree = () => (\n      <Tree\n        ref={treeRef}\n        v-show={!props.loading}\n        key={treeKey.value}\n        value={[...checked.value]}\n        hover\n        data={props.data}\n        activable={!props.multiple}\n        checkable={props.multiple}\n        disabled={tDisabled.value || multiLimitDisabled.value}\n        size={props.size}\n        filter={filterByText.value}\n        icon={!filterByText.value}\n        actived={actived.value}\n        expanded={expanded.value}\n        activeMultiple={props.multiple}\n        onChange={treeNodeChange}\n        onActive={treeNodeActive}\n        onExpand={treeNodeExpand}\n        onLoad={treeNodeLoad}\n        expandOnClickNode\n        v-slots={{\n          empty: () =>\n            renderDefaultTNode('empty', {\n              defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.empty}</div>,\n            }),\n        }}\n        {...(props.treeProps as TdTreeSelectProps['treeProps'])}\n      />\n    );\n\n    const renderSuffixIcon = () => (\n      <FakeArrow\n        isActive={innerVisible.value}\n        disabled={props.disabled}\n        overlayClassName={{\n          [`${classPrefix.value}-fake-arrow--highlight`]: innerVisible.value,\n          [`${classPrefix.value}-fake-arrow--disable`]: props.disabled,\n        }}\n      />\n    );\n\n    return () => (\n      <SelectInput\n        class={`${classPrefix.value}-tree-select`}\n        value={nodeInfo.value}\n        inputValue={innerVisible.value ? innerInputValue.value : ''}\n        popupVisible={innerVisible.value}\n        disabled={tDisabled.value}\n        multiple={props.multiple}\n        loading={props.loading}\n        clearable={props.clearable}\n        autoWidth={props.autoWidth}\n        borderless={props.borderless}\n        readonly={props.readonly}\n        placeholder={inputPlaceholder.value}\n        allowInput={props.filterable || isFunction(props.filter)}\n        minCollapsedNum={props.minCollapsedNum}\n        collapsed-items={props.collapsedItems}\n        popupProps={{\n          overlayClassName: popupClass.value,\n          ...(props.popupProps as TdTreeSelectProps['popupProps']),\n        }}\n        inputProps={{\n          size: props.size,\n          ...(props.inputProps as TdTreeSelectProps['inputProps']),\n        }}\n        tagInputProps={{\n          size: props.size,\n        }}\n        tagProps={{\n          maxWidth: 300,\n          ...(props.tagProps as TdTreeSelectProps['tagProps']),\n        }}\n        label={() => renderTNodeJSX('prefixIcon')}\n        suffixIcon={() => renderSuffixIcon()}\n        onClear={clear}\n        onBlur={(_: any, context) => {\n          props.onBlur?.({ value: treeSelectValue.value, e: context.e as FocusEvent });\n        }}\n        onFocus={(_: any, context: { e: FocusEvent }) => {\n          props.onFocus?.({ value: treeSelectValue.value, e: context.e });\n        }}\n        valueDisplay={() =>\n          renderTNodeJSX('valueDisplay', {\n            params: props.multiple\n              ? {\n                  value: nodeInfo.value,\n                  onClose: (value: TagInputValue, context: TagInputChangeContext) => {\n                    tagChange(value, context);\n                  },\n                }\n              : {\n                  value: nodeInfo.value || { [realLabel.value]: '', [realValue.value]: undefined },\n                },\n          })\n        }\n        v-slots={{\n          panel: () => (\n            <div\n              class={[\n                `${classPrefix.value}-select__dropdown-inner`,\n                `${classPrefix.value}-select__dropdown-inner--size-${dropdownInnerSize.value}`,\n              ]}\n            >\n              <p\n                v-show={props.loading && !tDisabled.value}\n                class={[`${classPrefix.value}-select-loading-tips`, `${classPrefix.value}-select__right-icon-polyfill`]}\n              >\n                {renderDefaultTNode('loadingText', {\n                  defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.loadingText}</div>,\n                })}\n              </p>\n              {renderTree()}\n            </div>\n          ),\n          collapsedItems: slots.collapsedItems,\n        }}\n        onInputChange={inputChange}\n        onTagChange={tagChange}\n        onPopupVisibleChange={(state: boolean, context: PopupVisibleChangeContext) => setInnerVisible(state, context)}\n        {...(props.selectInputProps as TdTreeSelectProps['selectInputProps'])}\n      />\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","_ref","renderTNodeJSX","useTNodeJSX","renderDefaultTNode","useTNodeDefault","classPrefix","usePrefixClass","_useConfig","useConfig","globalConfig","formDisabled","useFormDisabled","treeRef","ref","filterByText","actived","expanded","nodeInfo","treeKey","_toRefs","toRefs","value","modelValue","popupVisible","inputValue","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","treeSelectValue","setTreeSelectValue","_useDefaultValue","useDefaultValue","onPopupVisibleChange","_useDefaultValue2","innerVisible","setInnerVisible","_useDefaultValue3","defaultInputValue","onInputChange","_useDefaultValue4","innerInputValue","setInnerInputValue","watch","_callee","_regeneratorRuntime","wrap","_callee$","_context","prev","next","changeNodeInfo","multiple","stop","data","_asyncToGenerator","mark","_callee2","_callee2$","_context2","treeRerender","deep","tDisabled","computed","disabled","inputPlaceholder","_nodeInfo$value","label","placeholder","popupClass","concat","dropdownInnerSize","small","medium","large","size","isObjectValue","valueType","checked","isArray","map","item","multiLimitDisabled","max","length","realLabel","isEmpty","treeProps","keys","realValue","realChildren","children","onMounted","_callee3","_callee3$","_context3","change","valueParam","node","trigger","clear","content","_props2$onClear","onClear","e","treeNodeChange","context","current","nodeValue","getTreeNode","treeNodeActive","treeNodeExpand","treeNodeLoad","inputChange","_props2$onSearch2","_props2$onSearch","onSearch","String","isFunction","filter","isBoolean","indexOf","tagChange","_props2$onRemove","index","includes","splice","onRemove","_callee4","_callee4$","_context4","getSingleNodeInfo","getMultipleNodeInfo","_props2$treeProps","load","getItem","_props2$treeProps2","targetValue","i","len","_data$i","_data$i2","result","isNil","renderTree","_withDirectives","_createVNode","Tree","_mergeProps","_toConsumableArray","empty","defaultNode","_vShow","loading","renderSuffixIcon","_ref6","FakeArrow","_defineProperty","SelectInput","clearable","autoWidth","borderless","readonly","filterable","minCollapsedNum","collapsedItems","_objectSpread","overlayClassName","popupProps","inputProps","maxWidth","tagProps","suffixIcon","onBlur","_","_props2$onBlur","onFocus","_props2$onFocus","valueDisplay","_ref7","params","onClose","state","selectInputProps","panel","loadingText"],"mappings":"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"}