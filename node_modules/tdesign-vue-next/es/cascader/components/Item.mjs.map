{"version":3,"file":"Item.mjs","sources":["../../../src/cascader/components/Item.tsx"],"sourcesContent":["import { defineComponent, PropType, computed, ref } from 'vue';\nimport { ChevronRightIcon as TdChevronRightIcon } from 'tdesign-icons-vue-next';\n\nimport { getFullPathLabel } from '../core/helper';\nimport { getCascaderItemClass, getCascaderItemIconClass } from '../core/className';\n\nimport Checkbox from '../../checkbox/index';\nimport TLoading from '../../loading';\n\nimport { CascaderContextType, TreeNodeValue, TreeNode } from '../interface';\nimport { usePrefixClass, useCommonClassName } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport useRipple from '../../hooks/useRipple';\n\nconst props = {\n  node: {\n    type: Object as PropType<TreeNode>,\n    default() {\n      return {};\n    },\n  },\n  cascaderContext: {\n    type: Object as PropType<CascaderContextType>,\n  },\n  onChange: Function as PropType<() => void>,\n  onClick: Function as PropType<() => void>,\n  onMouseenter: Function as PropType<() => void>,\n};\n\nexport default defineComponent({\n  name: 'TCascaderItem',\n  props,\n  setup(props) {\n    const liRef = ref<HTMLElement>();\n    useRipple(liRef);\n\n    const COMPONENT_NAME = usePrefixClass('cascader__item');\n    const classPrefix = usePrefixClass();\n    const { ChevronRightIcon } = useGlobalIcon({ ChevronRightIcon: TdChevronRightIcon });\n    const { STATUS, SIZE } = useCommonClassName();\n\n    const itemClass = computed(() => {\n      return getCascaderItemClass(classPrefix.value, props.node, SIZE.value, STATUS.value, props.cascaderContext);\n    });\n\n    const iconClass = computed(() => {\n      return getCascaderItemIconClass(classPrefix.value, props.node, STATUS.value, props.cascaderContext);\n    });\n\n    function RenderLabelInner(node: TreeNode, cascaderContext: CascaderContextType) {\n      const { inputVal } = cascaderContext;\n      const labelText = inputVal ? getFullPathLabel(node) : node.label;\n      if (inputVal) {\n        const texts = labelText.split(inputVal as string);\n        const doms = [];\n        for (let index = 0; index < texts.length; index++) {\n          doms.push(<span key={index}>{texts[index]}</span>);\n          if (index === texts.length - 1) break;\n          doms.push(\n            <span key={`${index}filter`} class={`${COMPONENT_NAME.value}-label--filter`}>\n              {inputVal}\n            </span>,\n          );\n        }\n        return doms;\n      }\n      return labelText;\n    }\n\n    function RenderLabelContent(node: TreeNode, cascaderContext: CascaderContextType) {\n      const label = RenderLabelInner(node, cascaderContext);\n\n      const labelCont = (\n        <span\n          title={cascaderContext.inputVal ? getFullPathLabel(node) : node.label}\n          class={[`${COMPONENT_NAME.value}-label`, `${COMPONENT_NAME.value}-label--ellipsis`]}\n          role=\"label\"\n        >\n          {label}\n        </span>\n      );\n\n      return labelCont;\n    }\n\n    function RenderCheckBox(node: TreeNode, cascaderContext: CascaderContextType) {\n      const { checkProps, value, max, inputVal } = cascaderContext;\n      const label = RenderLabelInner(node, cascaderContext);\n      return (\n        <Checkbox\n          checked={node.checked}\n          indeterminate={node.indeterminate}\n          disabled={node.isDisabled() || ((value as TreeNodeValue[]).length >= max && max !== 0)}\n          // node.value maybe string or number\n          name={String(node.value)}\n          stopLabelTrigger={!!node.children}\n          title={inputVal ? getFullPathLabel(node) : node.label}\n          onChange={() => {\n            props.onChange();\n          }}\n          {...checkProps}\n        >\n          {label}\n        </Checkbox>\n      );\n    }\n\n    return () => {\n      const { cascaderContext, node } = props;\n      return (\n        <li\n          ref={liRef}\n          class={itemClass.value}\n          onClick={(e: Event) => {\n            e.stopPropagation();\n            props.onClick();\n          }}\n          onMouseenter={(e: Event) => {\n            e.stopPropagation();\n            props.onMouseenter();\n          }}\n        >\n          {cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext)}\n          {node.children &&\n            (node.loading ? (\n              <TLoading class={iconClass.value} size=\"small\" />\n            ) : (\n              <ChevronRightIcon class={iconClass.value} />\n            ))}\n        </li>\n      );\n    };\n  },\n});\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","props","node","type","_default","cascaderContext","onChange","Function","onClick","onMouseenter","defineComponent","name","setup","liRef","ref","useRipple","COMPONENT_NAME","usePrefixClass","classPrefix","_useGlobalIcon","useGlobalIcon","ChevronRightIcon","TdChevronRightIcon","_useCommonClassName","useCommonClassName","STATUS","SIZE","itemClass","computed","getCascaderItemClass","value","iconClass","getCascaderItemIconClass","RenderLabelInner","inputVal","labelText","getFullPathLabel","label","texts","split","doms","index","length","push","_createVNode","concat","RenderLabelContent","labelCont","RenderCheckBox","checkProps","max","Checkbox","_mergeProps","checked","indeterminate","isDisabled","String","children","e","stopPropagation","multiple","loading","TLoading"],"mappings":"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"}