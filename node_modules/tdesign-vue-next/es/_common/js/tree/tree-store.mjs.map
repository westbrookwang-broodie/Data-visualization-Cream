{"version":3,"file":"tree-store.mjs","sources":["../../../../node_modules/lodash/_baseDifference.js","../../../../node_modules/lodash/difference.js","../../../../src/_common/js/tree/tree-store.ts"],"sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n","var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nmodule.exports = difference;\n","import isArray from 'lodash/isArray';\nimport isFunction from 'lodash/isFunction';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport difference from 'lodash/difference';\nimport camelCase from 'lodash/camelCase';\nimport isPlainObject from 'lodash/isPlainObject';\nimport mitt from 'mitt';\n\nimport { TreeNode } from './tree-node';\nimport {\n  TreeNodeValue,\n  TypeIdMap,\n  TypeTimer,\n  TypeTargetNode,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TypeTreeStoreOptions,\n  TypeTreeFilter,\n  TypeTreeFilterOptions,\n  TypeRelatedNodesOptions,\n  TypeTreeEventState,\n} from './types';\n\n// 构建一个树的数据模型\n// 基本设计思想：写入时更新，减少读取消耗，以减少未来实现虚拟滚动所需的计算量\n// 任何一次数据写入，会触发相应节点的状态更新\nexport class TreeStore {\n  // 根节点集合\n  public children: TreeNode[];\n\n  // 所有节点集合\n  public nodes: TreeNode[];\n\n  // 所有节点映射\n  public nodeMap: Map<TreeNodeValue, TreeNode>;\n\n  // 节点 私有 ID 映射\n  public privateMap: Map<string, TreeNode>;\n\n  // 配置选项\n  public config: TypeTreeStoreOptions;\n\n  // 活动节点集合\n  public activedMap: TypeIdMap;\n\n  // 数据被更新的节点集合\n  public updatedMap: TypeIdMap;\n\n  // 选中节点集合\n  public checkedMap: TypeIdMap;\n\n  // 展开节点的集合\n  public expandedMap: TypeIdMap;\n\n  // 符合过滤条件的节点的集合\n  public filterMap: TypeIdMap;\n\n  // 数据更新计时器\n  public updateTimer: TypeTimer;\n\n  // 识别是否需要重排\n  public shouldReflow: boolean;\n\n  // 存在过滤器标志\n  public hasFilter: boolean;\n\n  // 树节点过滤器\n  public prevFilter: TypeTreeFilter;\n\n  // 事件派发器\n  public emitter: ReturnType<typeof mitt>;\n\n  public constructor(options: TypeTreeStoreOptions) {\n    const config: TypeTreeStoreOptions = {\n      prefix: 't',\n      keys: {},\n      expandAll: false,\n      expandLevel: 0,\n      expandMutex: false,\n      expandParent: false,\n      activable: false,\n      activeMultiple: false,\n      checkable: false,\n      checkStrictly: false,\n      disabled: false,\n      draggable: false,\n      load: null,\n      lazy: false,\n      valueMode: 'onlyLeaf',\n      filter: null,\n      onLoad: null,\n      onReflow: null,\n      onUpdate: null,\n      // 每次搜索条件变更，重置展开状态，路径节点展开，显示命中节点\n      // allowFoldNodeOnFilter 为 true 时，搜索条件不变的情况下，允许折叠路径节点\n      // 默认状态，allowFoldNodeOnFilter 为 false 时，路径节点无法折叠\n      allowFoldNodeOnFilter: false,\n      ...options,\n    };\n    this.config = config;\n    this.nodes = [];\n    this.children = [];\n    this.nodeMap = new Map();\n    this.privateMap = new Map();\n    this.activedMap = new Map();\n    this.expandedMap = new Map();\n    this.checkedMap = new Map();\n    this.updatedMap = new Map();\n    this.filterMap = new Map();\n    this.prevFilter = null;\n    // 这个计时器确保频繁的 update 事件被归纳为1次完整数据更新后的触发\n    this.updateTimer = null;\n    // 在子节点增删改查时，将此属性设置为 true，来触发视图更新\n    this.shouldReflow = false;\n    // 这个标志会被大量用到\n    this.hasFilter = isFunction(config.filter);\n    this.emitter = mitt();\n  }\n\n  // 配置选项\n  public setConfig(options: TypeTreeStoreOptions) {\n    const { config } = this;\n    let hasChanged = false;\n    Object.keys(options).forEach((key) => {\n      const val = options[key];\n      if (val !== config[key]) {\n        hasChanged = true;\n        config[key] = val;\n      }\n    });\n    this.hasFilter = isFunction(config.filter);\n    if (hasChanged) {\n      // 在 td-tree 的 render 方法中调用 setConfig\n      // 这样减少了 watch 属性\n      // 仅在属性变更后刷新状态\n      // 这样可以避免触发渲染死循环\n      this.refreshState();\n    }\n  }\n\n  // 获取根孩子节点列表\n  public getChildren() {\n    return this.children;\n  }\n\n  // 获取节点对象\n  public getNode(item: TypeTargetNode): TreeNode {\n    let node = null;\n    if (isString(item) || isNumber(item)) {\n      node = this.nodeMap.get(item);\n    } else if (item instanceof TreeNode) {\n      node = this.nodeMap.get(item.value);\n    }\n    return node;\n  }\n\n  // 获取节点在总节点列表中的位置\n  public getIndex(node: TreeNode): number {\n    return this.nodes.indexOf(node);\n  }\n\n  // 获取指定节点的父节点\n  public getParent(value: TypeTargetNode): TreeNode {\n    let parent = null;\n    const node = this.getNode(value);\n    if (node) {\n      parent = node.getParent();\n    }\n    return parent;\n  }\n\n  // 获取指定节点的所有父节点\n  public getParents(value: TypeTargetNode): TreeNode[] {\n    const node = this.getNode(value);\n    let parents: TreeNode[] = [];\n    if (node) {\n      parents = node.getParents();\n    }\n    return parents;\n  }\n\n  // 获取指定节点在其所在 children 中的位置\n  public getNodeIndex(value: TypeTargetNode): number {\n    const node = this.getNode(value);\n    let index = -1;\n    if (node) {\n      index = node.getIndex();\n    }\n    return index;\n  }\n\n  // 获取所有符合条件的节点\n  public getNodes(\n    item?: TypeTargetNode,\n    options?: TypeTreeFilterOptions,\n  ): TreeNode[] {\n    let nodes: TreeNode[] = [];\n    let val: TreeNodeValue = '';\n    if (isString(item) || isNumber(item)) {\n      val = item;\n    } else if (item instanceof TreeNode) {\n      val = item.value;\n    }\n    if (!val) {\n      nodes = this.nodes.slice(0);\n    } else {\n      const node = this.getNode(val);\n      if (node) {\n        nodes = node.walk();\n      }\n    }\n\n    if (options) {\n      const conf: TypeTreeFilterOptions = {\n        filter: null,\n        level: Infinity,\n        ...options,\n      };\n      if (isNumber(conf.level) && conf.level !== Infinity) {\n        nodes = nodes.filter((node) => node.level <= conf.level);\n      }\n      if (isFunction(conf.filter)) {\n        nodes = nodes.filter((node) => {\n          const nodeModel = node.getModel();\n          return conf.filter(nodeModel);\n        });\n      }\n      if (isPlainObject(conf.props)) {\n        nodes = nodes.filter((node) => {\n          const result = Object.keys(conf.props).every((key) => {\n            const propEqual = node[key] === conf.props[key];\n            return propEqual;\n          });\n          return result;\n        });\n      }\n    }\n    return nodes;\n  }\n\n  // 给树添加节点数据\n  public append(list: TypeTreeNodeData[]): void {\n    list.forEach((item) => {\n      const node = new TreeNode(this, item);\n      this.children.push(node);\n    });\n    this.reflow();\n  }\n\n  // 重新加载数据\n  public reload(list: TypeTreeNodeData[]): void {\n    this.expandedMap.clear();\n    this.checkedMap.clear();\n    this.activedMap.clear();\n    this.filterMap.clear();\n    this.removeAll();\n    this.append(list);\n  }\n\n  // 解析节点数据，适配多种节点类型\n  public parseNodeData(\n    para: TreeNodeValue | TreeNode | TypeTreeNodeData,\n    item: TypeTreeNodeData | TypeTreeNodeData[] | TreeNode,\n  ) {\n    let value: TreeNodeValue = '';\n    let node = null;\n    let data = null;\n\n    if (isString(para) || isNumber(para)) {\n      value = para;\n      data = item;\n      node = this.getNode(value);\n    } else if (para instanceof TreeNode) {\n      node = para;\n      data = item;\n    } else {\n      data = para;\n    }\n    const spec = {\n      node,\n      data,\n    };\n    return spec;\n  }\n\n  /**\n   * 向指定节点追加节点或者数据\n   * 支持下列使用方式\n   * item: 节点数据, TreeNode: 节点实例, value: 节点值(ID)\n   * appendNodes(item)\n   * appendNodes(TreeNode)\n   * appendNodes(value, item)\n   * appendNodes(value, TreeNode)\n   * appendNodes(TreeNode, item)\n   * appendNodes(TreeNode, TreeNode)\n   */\n  public appendNodes(\n    para?: TypeTargetNode | TypeTreeNodeData,\n    item?: TypeTreeNodeData | TreeNode,\n  ): void {\n    const spec = this.parseNodeData(para, item);\n    if (spec.data) {\n      if (!spec.node) {\n        // 在根节点插入\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this);\n        } else if (Array.isArray(spec.data)) {\n          this.append(spec.data);\n        } else {\n          this.append([spec.data]);\n        }\n      } else {\n        // 插入到目标节点之下\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this, spec.node);\n        } else if (isArray(spec.data)) {\n          spec.node.append(spec.data);\n        } else {\n          spec.node.append([spec.data]);\n        }\n        spec.node.updateRelated();\n      }\n    }\n  }\n\n  // 在目标节点之前插入节点\n  public insertBefore(value: TypeTargetNode, item: TypeTreeItem): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertBefore(item);\n    }\n  }\n\n  // 在目标节点之后插入节点\n  public insertAfter(value: TypeTargetNode, item: TypeTreeItem): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertAfter(item);\n    }\n  }\n\n  // 更新树结构\n  // 清空 nodes 数组，然后遍历所有根节点重新插入 node\n  public refreshNodes(): void {\n    const { children, nodes } = this;\n    nodes.length = 0;\n    children.forEach((node) => {\n      const list = node.walk();\n      Array.prototype.push.apply(nodes, list);\n    });\n  }\n\n  // 更新所有树节点状态\n  public refreshState(): void {\n    const { nodes } = this;\n    nodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  // 节点重排\n  // 应该仅在树节点增删改查时调用\n  public reflow(node?: TreeNode): void {\n    this.shouldReflow = true;\n    this.updated(node);\n  }\n\n  // 触发更新事件\n  // 节点属性变更时调用\n  public updated(node?: TreeNode): void {\n    if (node?.value) {\n      this.updatedMap.set(node.value, true);\n    }\n    if (this.updateTimer) return;\n    this.updateTimer = setTimeout(() => {\n      clearTimeout(this.updateTimer);\n      this.updateTimer = null;\n\n      // 检查节点是否需要回流，重排数组\n      if (this.shouldReflow) {\n        this.refreshNodes();\n        this.emit('reflow');\n      }\n\n      // 检查节点是否有被过滤，锁定路径节点\n      // 在此之前要遍历节点生成一个经过排序的节点数组\n      // 以便于优化锁定检查算法\n      this.lockFilterPathNodes();\n\n      const updatedList = Array.from(this.updatedMap.keys());\n      if (updatedList.length > 0) {\n        // 统计需要更新状态的节点，派发更新事件\n        const updatedNodes = updatedList.map((value) => this.getNode(value));\n        this.emit('update', {\n          nodes: updatedNodes,\n          map: this.updatedMap,\n        });\n      } else if (this.shouldReflow) {\n        // 单纯的回流不需要更新节点状态\n        // 但需要触发更新事件\n        this.emit('update', {\n          nodes: [],\n          map: this.updatedMap,\n        });\n      }\n\n      // 每次回流检查完毕，还原检查状态\n      this.shouldReflow = false;\n      this.updatedMap.clear();\n    });\n  }\n\n  // 获取激活节点集合\n  public getActived(map?: TypeIdMap): TreeNodeValue[] {\n    const activedMap = map || this.activedMap;\n    return Array.from(activedMap.keys());\n  }\n\n  // 获取指定范围的高亮节点\n  public getActivedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isActived());\n    return nodes;\n  }\n\n  // 替换激活态\n  public replaceActived(list: TreeNodeValue[]): void {\n    this.resetActived();\n    this.setActived(list);\n  }\n\n  // 设置激活态\n  public setActived(actived: TreeNodeValue[]): void {\n    const { activeMultiple } = this.config;\n    const list = actived.slice(0);\n    if (!activeMultiple) {\n      list.length = 1;\n    }\n    list.forEach((val) => {\n      this.activedMap.set(val, true);\n      const node = this.getNode(val);\n      if (node) {\n        node.update();\n      }\n    });\n  }\n\n  // 重置激活态\n  public resetActived(): void {\n    const actived = this.getActived();\n    this.activedMap.clear();\n    const relatedNodes = this.getRelatedNodes(actived);\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取展开节点集合\n  public getExpanded(map?: TypeIdMap): TreeNodeValue[] {\n    const expandedMap = map || this.expandedMap;\n    return Array.from(expandedMap.keys());\n  }\n\n  // 替换展开节点\n  public replaceExpanded(list: TreeNodeValue[]): void {\n    const expanded = this.getExpanded();\n    const added = difference(list, expanded);\n    const removed = difference(expanded, list);\n    this.setExpandedDirectly(removed, false);\n    this.updateExpanded(removed);\n    this.setExpanded(added);\n  }\n\n  // 批量设置展开节点\n  public setExpanded(list: TreeNodeValue[]): void {\n    this.setExpandedDirectly(list);\n    this.updateExpanded(list);\n  }\n\n  // 直接设置展开节点数据，不更新节点状态\n  public setExpandedDirectly(list: TreeNodeValue[], expanded = true): void {\n    list.forEach((val) => {\n      if (expanded) {\n        this.expandedMap.set(val, true);\n        const node = this.getNode(val);\n        if (node) {\n          node.afterExpanded();\n        }\n      } else {\n        this.expandedMap.delete(val);\n      }\n    });\n  }\n\n  // 清除所有展开节点\n  public resetExpanded(): void {\n    const expanded = this.getExpanded();\n    this.expandedMap.clear();\n    this.updateExpanded(expanded);\n  }\n\n  // 更新展开节点相关节点的状态\n  public updateExpanded(list: TreeNodeValue[]): void {\n    const relatedNodes = this.getRelatedNodes(list, {\n      withParents: false,\n    });\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取选中态节点 value 数组\n  public getChecked(map?: TypeIdMap): TreeNodeValue[] {\n    const { nodes, config } = this;\n    const { valueMode, checkStrictly } = config;\n    const list: TreeNodeValue[] = [];\n    const checkedMap = map || this.checkedMap;\n    nodes.forEach((node) => {\n      if (node.isChecked(checkedMap)) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          if (!node.parent || !node.parent.isChecked(checkedMap)) {\n            list.push(node.value);\n          }\n        } else if (valueMode === 'onlyLeaf' && !checkStrictly) {\n          if (node.isLeaf()) {\n            list.push(node.value);\n          }\n        } else {\n          list.push(node.value);\n        }\n      }\n    });\n    return list;\n  }\n\n  // 获取指定节点下的选中节点\n  public getCheckedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isChecked());\n    return nodes;\n  }\n\n  // 替换选中态列表\n  public replaceChecked(list: TreeNodeValue[]): void {\n    this.resetChecked();\n    this.setChecked(list, true);\n  }\n\n  // 批量设置选中态\n  public setChecked(list: TreeNodeValue[], isFromValueChange?: boolean): void {\n    const { valueMode, checkStrictly, checkable } = this.config;\n    if (!checkable) return;\n    list.forEach((val: TreeNodeValue) => {\n      const node = this.getNode(val);\n      if (node) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          const childrenNodes = node.walk();\n          childrenNodes.forEach((childNode) => {\n            this.checkedMap.set(childNode.value, true);\n          });\n        } else {\n          this.checkedMap.set(val, true);\n          node.updateChecked(isFromValueChange);\n        }\n      }\n    });\n    if (!checkStrictly) {\n      const checked = this.getChecked();\n      const relatedNodes = this.getRelatedNodes(checked);\n      relatedNodes.forEach((node) => {\n        node.updateChecked();\n      });\n    }\n  }\n\n  // 清除所有选中节点\n  public resetChecked(): void {\n    const checked = this.getChecked();\n    const relatedNodes = this.getRelatedNodes(checked);\n    this.checkedMap.clear();\n    relatedNodes.forEach((node) => {\n      node.updateChecked();\n    });\n  }\n\n  // 更新全部节点状态\n  public updateAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 移除指定节点\n  public remove(value?: TypeTargetNode): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.remove();\n    }\n  }\n\n  // 清空所有节点\n  public removeAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  // 获取节点状态变化可能影响的周边节点\n  // 实现最小遍历集合\n  public getRelatedNodes(\n    list: TreeNodeValue[],\n    options?: TypeRelatedNodesOptions,\n  ): TreeNode[] {\n    const conf = {\n      withParents: true,\n      ...options,\n    };\n    const map = new Map();\n    list.forEach((value) => {\n      if (map.get(value)) return;\n      const node = this.getNode(value);\n      if (node) {\n        const parents = node.getParents();\n        const children = node.walk();\n        let related = [];\n        if (conf.withParents) {\n          related = parents.concat(children);\n        } else {\n          related = children;\n        }\n        related.forEach((relatedNode) => {\n          map.set(relatedNode.value, relatedNode);\n        });\n      }\n    });\n    const relatedNodes = Array.from(map.values());\n    return relatedNodes;\n  }\n\n  // 触发绑定的事件\n  public emit(name: string, state?: TypeTreeEventState): void {\n    const { config, emitter } = this;\n    const methodName = camelCase(`on-${name}`);\n    const method = config[methodName];\n    if (isFunction(method)) {\n      method(state);\n    }\n    emitter.emit(name, state);\n  }\n\n  // 锁定过滤节点的路径节点\n  // 使得路径节点展开，可见\n  public lockFilterPathNodes() {\n    const { config } = this;\n    const allNodes = this.getNodes();\n\n    if (this.prevFilter) {\n      // 过滤条件清空时，也需要清理锁定节点\n      // 所在判断过滤条件是否存在之前，就要调用这里的清理逻辑\n      // 不想在每次渲染时都做这个清空判断\n      // 所以判断一下之前是否有进行过滤\n      allNodes.forEach((node: TreeNode) => {\n        // 先清空所有锁定状态\n        if (node.vmIsLocked) {\n          // lock 方法内部有状态计算\n          // 所以要减少 lock 方法调用次数\n          node.lock(false);\n        }\n      });\n    }\n\n    const currentFilter = config.filter;\n    // 当前没有过滤器\n    // 则无需处理锁定节点\n    if (!currentFilter || !isFunction(currentFilter)) return;\n    this.prevFilter = config.filter;\n\n    // 全部节点要经过排序，才能使用这个遍历\n    // 比起每个过滤节点调用 getParents 方法检查父节点状态\n    // 复杂度 O(N*log(N)) => O(N)\n    allNodes.reverse().forEach((node: TreeNode) => {\n      // 数组颠倒后，等于是从每个节点的子节点开始判断\n      // 想象为从展开树的最底部向上遍历\n      const parent = node.getParent();\n      if (!parent) return;\n      if (node.vmIsRest || node.vmIsLocked) {\n        // 当前节点被过滤条件命中\n        // 或者当前节点被锁定\n        // 则需要判定父节点状态\n        if (!parent.vmIsLocked) {\n          // 父节点已被锁定，则忽略动作\n          // lock 方法有内置状态判断\n          parent.lock(true);\n        }\n      }\n    });\n  }\n}\n\nexport default TreeStore;\n"],"names":["SetCache","require$$0","arrayIncludes","require$$1","arrayIncludesWith","require$$2","arrayMap","require$$3","baseUnary","require$$4","cacheHas","require$$5","LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","outer","value","computed","valuesIndex","push","_baseDifference","baseFlatten","baseRest","isArrayLikeObject","difference","difference_1","TreeStore","options","_classCallCheck","_defineProperty","config","_objectSpread","prefix","keys","expandAll","expandLevel","expandMutex","expandParent","activable","activeMultiple","checkable","checkStrictly","disabled","draggable","load","lazy","valueMode","filter","onLoad","onReflow","onUpdate","allowFoldNodeOnFilter","nodes","children","nodeMap","Map","privateMap","activedMap","expandedMap","checkedMap","updatedMap","filterMap","prevFilter","updateTimer","shouldReflow","hasFilter","isFunction","emitter","mitt","_createClass","key","setConfig","hasChanged","Object","forEach","val","refreshState","getChildren","getNode","item","node","isString","isNumber","get","TreeNode","getIndex","indexOf","getParent","parent","getParents","parents","getNodeIndex","getNodes","slice","walk","conf","level","Infinity","nodeModel","getModel","isPlainObject","props","every","propEqual","append","list","_this","reflow","reload","clear","removeAll","parseNodeData","para","data","spec","appendNodes","appendTo","Array","isArray","updateRelated","insertBefore","insertAfter","refreshNodes","prototype","apply","update","updateChecked","updated","_this2","set","setTimeout","clearTimeout","emit","lockFilterPathNodes","updatedList","from","updatedNodes","map","getActived","getActivedNodes","isActived","replaceActived","resetActived","setActived","actived","_this3","relatedNodes","getRelatedNodes","getExpanded","replaceExpanded","expanded","added","removed","setExpandedDirectly","updateExpanded","setExpanded","_this4","arguments","undefined","afterExpanded","resetExpanded","withParents","getChecked","isChecked","isLeaf","getCheckedNodes","replaceChecked","resetChecked","setChecked","isFromValueChange","_this5","_this$config","childrenNodes","childNode","checked","updateAll","remove","_this6","related","concat","relatedNode","name","state","methodName","camelCase","method","allNodes","vmIsLocked","lock","currentFilter","reverse","vmIsRest"],"mappings":"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"}