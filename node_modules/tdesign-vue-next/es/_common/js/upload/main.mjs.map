{"version":3,"file":"main.mjs","sources":["../../../../node_modules/@babel/runtime/helpers/esm/toArray.js","../../../../src/_common/js/upload/main.ts"],"sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import isFunction from 'lodash/isFunction';\nimport isNumber from 'lodash/isNumber';\n/* eslint-disable no-param-reassign */\nimport { isOverSizeLimit } from './utils';\nimport xhr from './xhr';\nimport log from '../log/log';\nimport {\n  UploadFile,\n  SizeLimitObj,\n  FileChangeParams,\n  FileChangeReturn,\n  RequestMethodResponse,\n  HandleUploadParams,\n  SuccessContext,\n  handleSuccessParams,\n  UploadTriggerUploadText,\n  ErrorContext,\n} from './types';\n\nexport interface BeforeUploadExtra {\n  /** 图片文件大小限制 */\n  sizeLimit?: number | SizeLimitObj;\n  /** 上传文件之前的钩子，参数为上传的文件，返回值决定是否上传 */\n  beforeUpload?: (file: UploadFile) => boolean | Promise<boolean>;\n}\n\nexport type BeforeUploadPromiseList = [Promise<SizeLimitObj>, undefined | Promise<boolean>]\n\nexport function handleBeforeUpload(\n  file: UploadFile, params: BeforeUploadExtra,\n): Promise<[SizeLimitObj, boolean]> {\n  const { sizeLimit, beforeUpload } = params;\n  // 文件大小校验\n  const sizePromise = new Promise<SizeLimitObj>((resolve) => {\n    let result: SizeLimitObj = null;\n    if (sizeLimit) {\n      const sizeLimitObj: SizeLimitObj = isNumber(sizeLimit)\n        ? { size: sizeLimit, unit: 'KB' }\n        : sizeLimit;\n      const limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);\n      if (limit) {\n        result = sizeLimitObj;\n      }\n    }\n    resolve(result);\n  });\n\n  // 自定义校验\n  const promiseList: BeforeUploadPromiseList = [sizePromise, undefined];\n  if (isFunction(beforeUpload)) {\n    const r = beforeUpload(file);\n    const p = r instanceof Promise ? r : (new Promise<boolean>((resolve) => resolve(r)));\n    promiseList[1] = p;\n  }\n\n  // 同时进行文件大小校验和自定义校验函数\n  return new Promise((resolve) => {\n    Promise.all(promiseList).then((r) => {\n      resolve(r);\n    });\n  });\n}\n\nexport interface OnErrorParams extends ErrorContext {\n  formatResponse?: HandleUploadParams['formatResponse'];\n}\n\nexport function handleError(options: OnErrorParams) {\n  const { event, files, response, XMLHttpRequest, formatResponse } = options;\n  files.forEach((file) => {\n    file.status = 'fail';\n  });\n  let res = response;\n  if (isFunction(formatResponse)) {\n    res = formatResponse(response, { file: files[0], currentFiles: files });\n  }\n  return { response: res, event, files, XMLHttpRequest };\n}\n\nexport function handleSuccess(params: handleSuccessParams) {\n  const { event, files, response, XMLHttpRequest } = params;\n  if (files?.length <= 0) {\n    log.error('Upload', 'Empty File in Success Callback');\n  }\n  files.forEach((file) => {\n    file.percent = 100;\n    file.status = 'success';\n    delete file.response?.error;\n  });\n  const res = response;\n  files[0].url = res.url || files[0].url;\n  return { response: res, event, files, XMLHttpRequest };\n}\n\nexport type UploadRequestReturn = {\n  status?: 'fail' | 'success';\n  /** 上传失败的文件，需等待继续上传 */\n  failedFiles?: UploadFile[];\n  data?: SuccessContext;\n  /** 批量文件上传，一个文件一个请求的场景下，响应结果的列表 */\n  list?: UploadRequestReturn[];\n}\n\nexport function handleRequestMethodResponse(res: RequestMethodResponse) {\n  if (!res) {\n    log.error('Upload', '`requestMethodResponse` is required.');\n    return false;\n  }\n  if (!res.status) {\n    log.error('Upload', '`requestMethodResponse.status` is missing, which value only can be `success` or `fail`');\n    return false;\n  }\n  if (!['success', 'fail'].includes(res.status)) {\n    log.error('Upload', '`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: \\'success\\', response: { url: \\'\\' } }`');\n    return false;\n  }\n  if (res.status === 'success' && (!res.response || (!res.response.url && !res.response.files))) {\n    log.warn('Upload', '`requestMethodResponse.response.url` or `requestMethodResponse.response.files` is required if `status` is `success`');\n  }\n  return true;\n}\n\n/**\n * 一次上传请求的返回结果\n */\nexport function uploadOneRequest(params: HandleUploadParams): Promise<UploadRequestReturn> {\n  const { action, toUploadFiles, requestMethod } = params;\n  return new Promise<UploadRequestReturn>((resolve) => {\n    if (!action && !requestMethod) {\n      log.error('Upload', 'one of action and requestMethod must be exist.');\n      resolve({});\n      return;\n    }\n    if (!toUploadFiles || !toUploadFiles.length) {\n      log.warn('Upload', 'No files need to be uploaded');\n      resolve({});\n      return;\n    }\n    toUploadFiles.forEach((file) => {\n      file.status = 'progress';\n    });\n    // 自定义上传方法\n    if (requestMethod) {\n      requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then((res) => {\n        if (!handleRequestMethodResponse(res)) {\n          resolve({});\n          return;\n        }\n        const { response = {} } = res;\n        if (res.status === 'fail') {\n          response.error = res.error || response.error;\n        }\n        let resultFiles: UploadFile[] = [];\n        // 一个请求上传并返回一个文件\n        if ((response.url && !response.files) || res.status === 'fail') {\n          toUploadFiles.forEach((file) => {\n            file.status = res.status;\n            file.response = response;\n            file.url = response.url;\n          });\n          resultFiles = toUploadFiles;\n        } else if (response.files) {\n          // 一个请求上传并返回多个文件\n          resultFiles = response.files.map((file: UploadFile) => {\n            const fileInfo = toUploadFiles.find((toFile) => (\n              (file.name && toFile.name === file.name) || (file.raw && toFile.raw === file.raw)\n            ));\n            return {\n              ...fileInfo,\n              ...file,\n              status: res.status,\n              response,\n            };\n          });\n        }\n        const result = {\n          response,\n          file: resultFiles[0],\n          files: resultFiles,\n        };\n        if (res.status === 'success') {\n          params.onResponseSuccess?.(result);\n        } else if (res.status === 'fail') {\n          params.onResponseError?.(result);\n        }\n        resolve({\n          status: res.status,\n          data: result,\n        });\n      });\n    } else {\n      const xhrReq = xhr({\n        action: params.action,\n        files: params.toUploadFiles,\n        useMockProgress: params.useMockProgress,\n        mockProgressDuration: params.mockProgressDuration,\n        onError: (p: ErrorContext) => {\n          const r = handleError({ ...p, formatResponse: params.formatResponse });\n          params.onResponseError?.(r);\n          resolve({ status: 'fail', data: r });\n        },\n        onProgress: params.onResponseProgress,\n        onSuccess: (p: SuccessContext) => {\n          const { formatResponse } = params;\n          let res = p.response;\n          if (isFunction(formatResponse)) {\n            res = formatResponse(p.response, {\n              file: p.file,\n              currentFiles: p.files,\n            });\n          }\n          if (res.error) {\n            const r = handleError({ ...p, response: res });\n            params.onResponseError?.(r);\n            resolve({ status: 'fail', data: r });\n          } else {\n            p.file.response = res;\n            p.files[0].response = res;\n            const r = handleSuccess({ ...p, response: res });\n            params.onResponseSuccess?.(r);\n            resolve({ status: 'success', data: r });\n          }\n        },\n        formatRequest: params.formatRequest,\n        data: params.data,\n        name: params.name,\n        headers: params.headers,\n        withCredentials: params.withCredentials,\n        method: params.method,\n      });\n      params.setXhrObject?.({\n        files: params.toUploadFiles,\n        xhrReq,\n      });\n    }\n  });\n}\n\n/**\n * 可能单个文件上传，也可能批量文件一次性上传\n * 返回上传成功或上传失败的文件列表\n */\nexport function upload(params: HandleUploadParams):\nPromise<UploadRequestReturn> {\n  const { uploadAllFilesInOneRequest, toUploadFiles, uploadedFiles, isBatchUpload } = params;\n  // 一批文件上传，部分文件失败，重新上传失败的文件\n  const thisUploadFiles = toUploadFiles.filter((t) => (\n    !t.response || (t.response && !t.response.error)\n  ));\n  return new Promise((resolve) => {\n    // 所有文件一次性上传\n    if (uploadAllFilesInOneRequest || !params.multiple) {\n      uploadOneRequest(params).then((r) => {\n        if (r.status === 'success') {\n          r.data.files = isBatchUpload || !params.multiple\n            ? r.data.files\n            : uploadedFiles.concat(r.data.files);\n        }\n        const failedFiles = r.status === 'fail' ? r.data.files : [];\n        resolve({ ...r, failedFiles });\n      });\n      return;\n    }\n    // 一个文件一个文件上传\n    const list = thisUploadFiles.map((file) => (\n      uploadOneRequest({ ...params, toUploadFiles: [file] })\n    ));\n    Promise.all(list).then((arr) => {\n      const files: UploadFile[] = [];\n      const failedFiles: UploadFile[] = [];\n      arr.forEach((one) => {\n        if (one.status === 'success') {\n          files.push(one.data.files[0]);\n        } else if (one.status === 'fail') {\n          failedFiles.push(one.data.files[0]);\n        }\n      });\n      const tFiles = params.autoUpload\n        ? uploadedFiles.concat(files)\n        : uploadedFiles;\n      const newFiles = isBatchUpload || !params.multiple ? files : tFiles;\n      resolve({\n        status: files.length ? 'success' : 'fail',\n        data: {\n          files: newFiles,\n        },\n        // 上传失败的文件，需等待继续上传\n        failedFiles,\n        list: arr,\n      });\n    });\n  });\n}\n\nexport function formatToUploadFile(\n  files: File[],\n  format: FileChangeParams['format'],\n  status: UploadFile['status'] = undefined,\n  percent = 0,\n) {\n  return files.map((fileRaw: File) => {\n    let file: UploadFile = fileRaw;\n    if (isFunction(format)) {\n      file = format(fileRaw);\n    }\n    const uploadFile: UploadFile = {\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent,\n      status,\n      ...file,\n    };\n    return uploadFile;\n  });\n}\n\nexport function validateFile(\n  params: FileChangeParams\n): Promise<FileChangeReturn> {\n  const { files, uploadValue, max, allowUploadDuplicateFile } = params;\n  return new Promise((resolve) => {\n    // 是否允许相同的文件名存在\n    let tmpFiles = files.filter((file) => {\n      const sameNameFile = uploadValue.find((t) => t.name === file.name);\n      return allowUploadDuplicateFile || !sameNameFile;\n    });\n\n    let hasSameNameFile = false;\n    if (tmpFiles.length < files.length) {\n      hasSameNameFile = true;\n    }\n    if (!tmpFiles.length) {\n      const tFiles = formatToUploadFile(files, params.format, params.autoUpload ? 'progress' : 'waiting');\n      resolve({ hasSameNameFile, file: tFiles?.[0], files: tFiles, validateResult: { type: 'FILTER_FILE_SAME_NAME' } });\n      return;\n    }\n    // 上传文件数量限制\n    let lengthOverLimit = false;\n    if (max && tmpFiles.length && !params.isBatchUpload) {\n      tmpFiles = tmpFiles.slice(0, max - uploadValue.length);\n      if (tmpFiles.length !== files.length) {\n        lengthOverLimit = true;\n      }\n    }\n\n    // 格式化文件对象\n    const formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload ? 'progress' : 'waiting');\n\n    // 全量文件，一波校验，整体上传 或 终止上传\n    let allFileValidatePromise;\n    if (params.beforeAllFilesUpload) {\n      const r = params.beforeAllFilesUpload?.(formattedFiles);\n      allFileValidatePromise = r instanceof Promise ? r : new Promise((resolve) => resolve(r));\n    }\n\n    // 单文件合法性校验，一个文件校验不通过其他文件可继续上传\n    const promiseList = formattedFiles.map((file: UploadFile) => new Promise((resolve) => {\n      handleBeforeUpload(\n        file,\n        { beforeUpload: params.beforeUpload, sizeLimit: params.sizeLimit },\n      ).then(([sizeResult, customResult]) => {\n        if (sizeResult) {\n          resolve({ file, validateResult: { type: 'FILE_OVER_SIZE_LIMIT', extra: sizeResult } });\n        } else if (customResult === false) {\n          resolve({ file, validateResult: { type: 'CUSTOM_BEFORE_UPLOAD' } });\n        }\n        resolve({ file });\n      });\n    }));\n    Promise.all([allFileValidatePromise].concat(promiseList)).then((results) => {\n      const [allFilesResult, ...others] = results;\n      // 如果 beforeAllFilesUpload 校验未通过\n      if (allFilesResult === false) {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          validateResult: { type: 'BEFORE_ALL_FILES_UPLOAD' },\n          files: formattedFiles,\n        });\n      } else {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          fileValidateList: others,\n          files: formattedFiles,\n        });\n      }\n    });\n  });\n}\n\nexport function getFilesAndErrors(fileValidateList: FileChangeReturn[], getError: (p: {[key: string]: any }) => string) {\n  const sizeLimitErrors: FileChangeReturn[] = [];\n  const beforeUploadErrorFiles: UploadFile[] = [];\n  const toFiles: UploadFile[] = [];\n  fileValidateList.forEach((oneFile) => {\n    if (oneFile.validateResult?.type === 'CUSTOM_BEFORE_UPLOAD') {\n      beforeUploadErrorFiles.push(oneFile.file);\n      return;\n    }\n    if (oneFile.validateResult?.type === 'FILE_OVER_SIZE_LIMIT') {\n      if (!oneFile.file.response) {\n        oneFile.file.response = {};\n      }\n      oneFile.file.response.error = oneFile.file.response.error\n      || getError(oneFile.validateResult.extra);\n      sizeLimitErrors.push(oneFile);\n      return;\n    }\n    toFiles.push(oneFile.file);\n  });\n\n  return { sizeLimitErrors, beforeUploadErrorFiles, toFiles };\n}\n\n/**\n * 获取文件上传触发元素文本 在全局配置中的字段\n */\nexport function getTriggerTextField(p: {\n  status: 'success' | 'fail' | 'progress' | 'waiting',\n  multiple: boolean,\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n}): keyof UploadTriggerUploadText {\n  if (p.isBatchUpload && p.status) return 'reupload';\n  if (p.status === 'fail') return 'reupload';\n  if (p.status === 'progress') return 'uploading';\n  if (p.status === 'success' || (!p.autoUpload && p.status === 'waiting')) {\n    return p.multiple ? 'continueUpload' : 'reupload';\n  }\n  return 'fileInput';\n}\n\nexport interface GetDisplayFilesParams {\n  multiple: boolean;\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n  uploadValue: UploadFile[];\n  toUploadFiles: UploadFile[];\n}\n\n/**\n * 获取文件列表显示\n */\nexport function getDisplayFiles(params: GetDisplayFilesParams) {\n  const { multiple, uploadValue, toUploadFiles, autoUpload } = params;\n  const waitingUploadFiles = autoUpload\n    ? toUploadFiles\n    : toUploadFiles.filter((file) => file.status !== 'success');\n  if (multiple && !params.isBatchUpload) {\n    if (!autoUpload) return uploadValue;\n    return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];\n  }\n  return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];\n}\n"],"names":["_toArray","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","handleBeforeUpload","file","params","sizeLimit","beforeUpload","sizePromise","Promise","resolve","result","sizeLimitObj","isNumber","size","unit","limit","isOverSizeLimit","promiseList","isFunction","r","p","all","then","handleError","options","event","files","response","XMLHttpRequest","formatResponse","forEach","status","res","currentFiles","handleSuccess","length","log","error","_file$response","percent","url","handleRequestMethodResponse","includes","warn","uploadOneRequest","action","toUploadFiles","requestMethod","multiple","_res$response","resultFiles","map","fileInfo","find","toFile","name","raw","_objectSpread","_params$onResponseSuc","onResponseSuccess","call","_params$onResponseErr","onResponseError","data","_params$setXhrObject","xhrReq","xhr","useMockProgress","mockProgressDuration","onError","_params$onResponseErr2","onProgress","onResponseProgress","onSuccess","_params$onResponseErr3","_params$onResponseSuc2","formatRequest","headers","withCredentials","method","setXhrObject","upload","uploadAllFilesInOneRequest","uploadedFiles","isBatchUpload","thisUploadFiles","filter","t","concat","failedFiles","list","one","push","tFiles","autoUpload","newFiles","formatToUploadFile","format","arguments","undefined","fileRaw","uploadFile","lastModified","type","validateFile","uploadValue","max","allowUploadDuplicateFile","tmpFiles","sameNameFile","hasSameNameFile","validateResult","lengthOverLimit","slice","formattedFiles","allFileValidatePromise","beforeAllFilesUpload","_params$beforeAllFile","_ref","_ref2","_slicedToArray","sizeResult","customResult","extra","results","_results","allFilesResult","others","fileValidateList","getFilesAndErrors","getError","sizeLimitErrors","beforeUploadErrorFiles","toFiles","oneFile","_oneFile$validateResu","_oneFile$validateResu2","getTriggerTextField","getDisplayFiles","waitingUploadFiles"],"mappings":"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"}