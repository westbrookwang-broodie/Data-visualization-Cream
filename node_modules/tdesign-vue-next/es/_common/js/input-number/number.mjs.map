{"version":3,"file":"number.mjs","sources":["../../../../src/_common/js/input-number/number.ts"],"sourcesContent":["import isUndefined from 'lodash/isUndefined';\nimport isNil from 'lodash/isNil';\n/** 普通数相关方法 */\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport {\n  compareNumber,\n  formatENumber,\n  largeNumberToFixed,\n  isInputNumber,\n  largeNumberAdd,\n  largeNumberSubtract,\n} from './large-number';\nimport log from '../log';\n\nexport * from './large-number';\n\nexport type NumberType = number | string;\n\n// 小于最大值，才允许继续添加\nexport function canAddNumber(\n  num: NumberType,\n  max: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, max, largeNumber) < 0;\n  }\n  return num < max;\n}\n\n// 大于最小值，才允许继续减少\nexport function canReduceNumber(\n  num: NumberType,\n  min: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, min, largeNumber) > 0;\n  }\n  return num > min;\n}\n\n/**\n * 格式化数字，如：2e3 转换为 2000\n * 如果不是数字，则不允许输入\n * decimalPlaces 小数点处理\n */\nexport function formatToNumber(\n  num: string,\n  extra?: {\n    decimalPlaces?: number;\n    largeNumber?: boolean;\n  }\n): string | number {\n  if (isNil(num) || num === '') return num;\n  if (num === '-') return 0;\n  if (num[num.length - 1] === '.') {\n    return extra?.largeNumber ? num.slice(0, -1) : Number(num.slice(0, -1));\n  }\n  const isLargeNumber = extra?.largeNumber && isString(num);\n  let newNumber: string | number = num;\n  if ((isString(num) && num.includes('e')) || isNumber(num)) {\n    newNumber = isLargeNumber ? formatENumber(num) : Number(num);\n  }\n  if (!isUndefined(extra?.decimalPlaces)) {\n    newNumber = largeNumberToFixed(\n      newNumber,\n      extra.decimalPlaces,\n      extra.largeNumber\n    );\n  }\n  const val = isLargeNumber || !isUndefined(extra?.decimalPlaces)\n    ? newNumber\n    : Number(newNumber);\n  if (String(val) === 'NaN') return undefined;\n  return val;\n}\n\n/**\n * 将数字控制在 max 和 min 之间\n */\nexport function putInRangeNumber(\n  val: NumberType,\n  params: {\n    max?: NumberType;\n    min?: NumberType;\n    lastValue?: NumberType;\n    largeNumber?: boolean;\n  }\n) {\n  if (val === '') return undefined;\n  const { max, min, lastValue, largeNumber } = params;\n  if (!isInputNumber(val)) return lastValue;\n  if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {\n    if (compareNumber(max, val, largeNumber) < 0) return max;\n    if (compareNumber(min, val, largeNumber) > 0) return min;\n    return val;\n  }\n  return Math.max(Number(min), Math.min(Number(max), Number(val)));\n}\n\n/**\n * 仅支持正数，小数加法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveAdd(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) + (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  // 整数不存在精度问题，直接返回\n  if (!r1 && !r2) return num1 + num2;\n  let newNumber1 = num1;\n  let newNumber2 = num2;\n  const diff = Math.abs(r1 - r2);\n  const digit = 10 ** Math.max(r1, r2);\n  if (diff > 0) {\n    const cm = 10 ** diff;\n    if (r1 > r2) {\n      newNumber1 = Number(num1.toString().replace('.', ''));\n      newNumber2 = Number(num2.toString().replace('.', '')) * cm;\n    } else {\n      newNumber1 = Number(num1.toString().replace('.', '')) * cm;\n      newNumber2 = Number(num2.toString().replace('.', ''));\n    }\n  } else {\n    newNumber1 = Number(num1.toString().replace('.', ''));\n    newNumber2 = Number(num2.toString().replace('.', ''));\n  }\n  return (newNumber1 + newNumber2) / digit;\n}\n\n/**\n * 正数，小数减法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveSubtract(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) - (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  const digit = 10 ** Math.max(r1, r2);\n  const n = r1 >= r2 ? r1 : r2;\n  return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));\n}\n\n/**\n * 支持正数、负数、小数等全部数字的加法\n * -0.766 + 1       =>   1 - 0.766\n * -1 + (-0.766)    =>   - (1 + 0.766)\n * 1 + (-0.766)     =>   1 - 0.766\n * 1 + 0.766        =>   1 + 0.766\n */\nexport function add(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));\n  if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;\n  if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));\n  return positiveAdd(num1, num2);\n}\n\n/**\n * 支持正数、负数、小数等全部数字的减法\n * -0.766 - 1       =>   - (1 + 0.766)\n * -1 - (-0.766)    =>   0.766 - 1\n * 1 - (-0.766)     =>   1 + 0.766\n * 1 - 0.766        =>   1 - 0.766\n */\nexport function subtract(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;\n  if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));\n  if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));\n  return positiveSubtract(num1, num2);\n}\n\nexport function getStepValue(p: {\n  op: 'add' | 'reduce';\n  step: NumberType;\n  max?: NumberType;\n  min?: NumberType;\n  lastValue?: NumberType;\n  largeNumber?: boolean;\n}) {\n  const { op, step, lastValue, max, min, largeNumber } = p;\n  if (step <= 0) {\n    log.error('InputNumber', 'step must be larger than 0.');\n    return lastValue;\n  }\n  const tStep = isNumber(step) ? String(step) : step;\n  let newVal;\n  if (op === 'add') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberAdd(String(lastValue), String(tStep));\n    } else {\n      newVal = add(Number(lastValue || 0), Number(step));\n    }\n  } else if (op === 'reduce') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberSubtract(String(lastValue), String(tStep));\n    } else {\n      newVal = subtract(Number(lastValue || 0), Number(step));\n    }\n  }\n  if (isUndefined(lastValue)) {\n    newVal = putInRangeNumber(newVal, { max, min, lastValue, largeNumber });\n  }\n  return largeNumber ? newVal : Number(newVal);\n}\n\nexport type InputNumberErrorType =\n  | 'exceed-maximum'\n  | 'below-minimum'\n  | undefined;\n\n/**\n * 最大值和最小值校验\n */\nexport function getMaxOrMinValidateResult(p: {\n  largeNumber: boolean;\n  value: NumberType;\n  max: NumberType;\n  min: NumberType;\n}): InputNumberErrorType {\n  const { largeNumber, value, max, min } = p;\n  if (isUndefined(largeNumber)) return undefined;\n  if (largeNumber && isNumber(value)) {\n    log.warn('InputNumber', 'largeNumber value must be a string.');\n  }\n  let error: InputNumberErrorType;\n  if (compareNumber(value, max, largeNumber) > 0) {\n    error = 'exceed-maximum';\n  } else if (compareNumber(value, min, largeNumber) < 0) {\n    error = 'below-minimum';\n  } else {\n    error = undefined;\n  }\n  return error;\n}\n\nexport const specialCode = ['-', '.', 'e', 'E'];\n\n/**\n * 是否允许输入当前字符，输入字符校验\n */\nexport function canInputNumber(number: string, largeNumber: boolean) {\n  if (!number && isString(number)) return true;\n  const isNumber = (largeNumber && isInputNumber(number)) || !Number.isNaN(Number(number));\n  if (!isNumber && !['-', '.', 'e', 'E'].includes(number.slice(-1))) return false;\n  // 只能出现一个点（.） 和 一个负号（-）\n  if (String(number).match(/\\./g)?.length > 1) return false;\n  if (String(number).match(/-/g)?.length > 1) return false;\n  return true;\n}\n\n/**\n * 对千分位进行处理 111,111,222 -> 111111222\n */\nexport function formatThousandths(number: string) {\n  const thousandthsRegExp = /^[-+]?\\d{1,3}(,\\d{3})*(\\.(\\d*))?$/;\n  if (thousandthsRegExp.test(number)) return number.replace(/,/g, '');\n  return number;\n}\n"],"names":["canAddNumber","num","max","largeNumber","arguments","length","undefined","isString","compareNumber","canReduceNumber","min","formatToNumber","extra","isNil","slice","Number","isLargeNumber","newNumber","includes","isNumber","formatENumber","isUndefined","decimalPlaces","largeNumberToFixed","val","String","putInRangeNumber","params","lastValue","isInputNumber","Infinity","Math","positiveAdd","num1","num2","_num1$toString$split$","_num2$toString$split$","r1","toString","split","r2","newNumber1","newNumber2","diff","abs","digit","pow","cm","replace","positiveSubtract","_num1$toString$split$2","_num2$toString$split$2","n","toFixed","add","subtract","getStepValue","p","op","step","log","error","tStep","newVal","largeNumberAdd","largeNumberSubtract","getMaxOrMinValidateResult","value","warn","specialCode","canInputNumber","number","_String$match","_String$match2","isNaN","match","formatThousandths","thousandthsRegExp","test"],"mappings":"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"}