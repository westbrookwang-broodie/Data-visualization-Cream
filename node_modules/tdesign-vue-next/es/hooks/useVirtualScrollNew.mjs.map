{"version":3,"file":"useVirtualScrollNew.mjs","sources":["../../src/hooks/useVirtualScrollNew.ts"],"sourcesContent":["/**\n * 基于原作者（@louiszhai）的思路二次开发，为保证其他组件暂不受影响，单独开一个文件\n * 新增支持以下 3 个特性\n * 1. 支持不同表格高度\n * 2. 支持滚动到特定元素，方便 Select 等组件展开时直接定位到选中元素\n * 3. 支持数据变化不重置，方便支持树形结构虚拟滚动\n */\nimport { ref, computed, watch, Ref } from 'vue';\nimport { TScroll } from '../common';\nimport useResizeObserver from './useResizeObserver';\n\nexport type UseVirtualScrollParams = Ref<{\n  /** 列数据 */\n  data: { [key: string]: any }[];\n  scroll: TScroll;\n}>;\n\nexport interface ScrollToElementParams {\n  /** 跳转元素下标 */\n  index: number;\n  /** 跳转元素距离顶部的距离 */\n  top?: number;\n  /** 单个元素高度非固定场景下，即 isFixedRowHeight = false。延迟设置元素位置，一般用于依赖不同高度异步渲染等场景，单位：毫秒 */\n  time?: number;\n  behavior?: 'auto' | 'smooth';\n}\n\nconst useVirtualScroll = (container: Ref<HTMLElement>, params: UseVirtualScrollParams) => {\n  /** 注意测试：数据长度为空；数据长度小于表格高度等情况。即期望只有数据量达到一定程度才允许开启虚拟滚动 */\n  const visibleData = ref<any[]>([]);\n  // 用于显示表格列\n  const translateY = ref(0);\n  // 滚动高度，用于显示滚动条\n  const scrollHeight = ref(0);\n  const trScrollTopHeightList = ref<number[]>([]);\n  // 已经通过节点渲染计算出来的各自行高\n  const trHeightList = ref<number[]>([]);\n  const containerHeight = ref(0);\n  const containerWidth = ref(0);\n  const startAndEndIndex = ref<[number, number]>([0, 15]);\n\n  // 设置初始值\n  const tScroll = computed(() => {\n    const { scroll } = params.value;\n    if (!scroll) return {};\n    return {\n      bufferSize: scroll.bufferSize || 10,\n      isFixedRowHeight: scroll.isFixedRowHeight ?? false,\n      rowHeight: scroll.rowHeight || 47,\n      threshold: scroll.threshold || 100,\n      type: scroll.type,\n    };\n  });\n\n  // 当前场景是否满足开启虚拟滚动的条件\n  const isVirtualScroll = computed(() => {\n    const { data } = params.value;\n    return tScroll.value.type === 'virtual' && tScroll.value.threshold < data.length;\n  });\n\n  const getTrScrollTopHeightList = (trHeightList: number[], containerHeight: number) => {\n    const list: number[] = [];\n    const { data } = params.value;\n    // 当前行滚动高度 = 上一行滚动高度 + 当前行高度 + 容器高度\n    for (let i = 0, len = data.length; i < len; i++) {\n      list[i] = (list[i - 1] || containerHeight) + (trHeightList[i] || tScroll.value.rowHeight);\n    }\n    return list;\n  };\n\n  const tripleBufferSize = computed(() => tScroll.value.bufferSize * 3);\n\n  const updateVisibleData = (trScrollTopHeightList: number[], scrollTop: number) => {\n    let currentIndex = -1;\n    // 获取当前滚动到哪一个元素（大数据场景不建议使用 forEach 一类函数迭代）\n    for (let i = 0, len = trScrollTopHeightList.length; i < len; i++) {\n      if (trScrollTopHeightList[i] > scrollTop) {\n        currentIndex = i;\n        break;\n      }\n    }\n    if (currentIndex < 0) return;\n    const startIndex = Math.min(currentIndex, trScrollTopHeightList.length - tripleBufferSize.value);\n    const endIndex = startIndex + tripleBufferSize.value;\n    if (startAndEndIndex.value.join() !== [startIndex, endIndex].join() && startIndex >= 0) {\n      visibleData.value = params.value.data.slice(startIndex, endIndex);\n      const lastScrollTop = trScrollTopHeightList[startIndex - 1];\n      const top = lastScrollTop > 0 ? lastScrollTop - containerHeight.value : 0;\n      translateY.value = top;\n      startAndEndIndex.value = [startIndex, endIndex];\n    }\n  };\n\n  // 固定高度场景，不需要通过行渲染获取高度（仅非固定高度场景需要）\n  const handleRowMounted = (rowData: any) => {\n    if (!isVirtualScroll.value || !rowData || tScroll.value.isFixedRowHeight || !container.value) return;\n    const trHeight = rowData.ref.value?.getBoundingClientRect().height;\n    const rowIndex = rowData.data.__VIRTUAL_SCROLL_INDEX;\n    const newTrHeightList = trHeightList.value;\n    if (newTrHeightList[rowIndex] !== trHeight) {\n      newTrHeightList[rowIndex] = trHeight;\n      const scrollTopHeightList = getTrScrollTopHeightList(newTrHeightList, containerHeight.value);\n      trScrollTopHeightList.value = scrollTopHeightList;\n\n      const lastIndex = scrollTopHeightList.length - 1;\n      scrollHeight.value = scrollTopHeightList[lastIndex] - containerHeight.value;\n      updateVisibleData(scrollTopHeightList, container.value.scrollTop);\n    }\n  };\n\n  const handleScroll = () => {\n    if (!isVirtualScroll.value) return;\n    updateVisibleData(trScrollTopHeightList.value, container.value.scrollTop);\n  };\n\n  const refreshVirtualScroll = ([{ contentRect }]: [ResizeObserverEntry]) => {\n    // 如果宽度发生变化，重置滚动位置（高度发生变化时，会触发 container 变化，下方的 watch 会计算）\n    const maxScrollbarWidth = 16;\n    if (Math.abs(contentRect.width - containerWidth.value) > maxScrollbarWidth) {\n      container.value.scrollTop = 0;\n      translateY.value = 0;\n    }\n    containerWidth.value = contentRect.width;\n    containerHeight.value = contentRect.height;\n  };\n\n  const addIndexToData = (data: any[]) => {\n    data.forEach((item, index) => {\n      // eslint-disable-next-line\n      item['__VIRTUAL_SCROLL_INDEX'] = index;\n    });\n  };\n\n  const updateScrollTop = ({ index, top = 0, behavior }: ScrollToElementParams) => {\n    const scrollTop = trScrollTopHeightList.value[index] - containerHeight.value - top;\n    container.value.scrollTo({\n      top: scrollTop,\n      behavior: behavior || 'auto',\n    });\n  };\n\n  /**\n   * 滚动到指定元素（对外暴露的方法，谨慎修改）\n   */\n  const scrollToElement = (p: ScrollToElementParams) => {\n    updateScrollTop(p);\n    // 不同行高的表格需要异步计算\n    if (!tScroll.value.isFixedRowHeight) {\n      const duration = p.time ?? 60;\n      const timer = setTimeout(() => {\n        updateScrollTop(p);\n        clearTimeout(timer);\n      }, duration);\n    }\n  };\n\n  useResizeObserver(isVirtualScroll.value ? container : undefined, refreshVirtualScroll);\n\n  // 固定高度场景，可直接通过数据长度计算出最大滚动高度\n  watch(\n    () => [[...params.value.data, tScroll, isVirtualScroll, container]],\n    () => {\n      if (!isVirtualScroll.value) return;\n      const { data } = params.value;\n      addIndexToData(data);\n      const startIndex = startAndEndIndex.value[0];\n      visibleData.value = data.slice(startIndex, startIndex + tripleBufferSize.value);\n\n      // get container dom after one tick\n      const timer = setTimeout(() => {\n        if (container.value) {\n          containerHeight.value = container.value.getBoundingClientRect().height;\n          const scrollTopHeightList = getTrScrollTopHeightList(trHeightList.value || [], containerHeight.value);\n          trScrollTopHeightList.value = scrollTopHeightList;\n        }\n        clearTimeout(timer);\n      }, 0);\n    },\n    { immediate: true },\n  );\n\n  return {\n    visibleData,\n    translateY,\n    scrollHeight,\n    isVirtualScroll,\n    handleScroll,\n    handleRowMounted,\n    scrollToElement,\n  };\n};\n\nexport type VirtualScrollConfig = ReturnType<typeof useVirtualScroll>;\n\nexport default useVirtualScroll;\n"],"names":["useVirtualScroll","container","params","visibleData","ref","translateY","scrollHeight","trScrollTopHeightList","trHeightList","containerHeight","containerWidth","startAndEndIndex","tScroll","computed","_scroll$isFixedRowHei","scroll","value","bufferSize","isFixedRowHeight","rowHeight","threshold","type","isVirtualScroll","data","length","getTrScrollTopHeightList","list","i","len","tripleBufferSize","updateVisibleData","scrollTop","currentIndex","startIndex","Math","min","endIndex","join","slice","lastScrollTop","top","handleRowMounted","rowData","_rowData$ref$value","trHeight","getBoundingClientRect","height","rowIndex","__VIRTUAL_SCROLL_INDEX","newTrHeightList","scrollTopHeightList","lastIndex","handleScroll","refreshVirtualScroll","_ref2","_slicedToArray","_ref","contentRect","maxScrollbarWidth","abs","width","addIndexToData","forEach","item","index","updateScrollTop","_ref3$top","behavior","scrollTo","scrollToElement","p","_p$time","duration","time","timer","setTimeout","clearTimeout","useResizeObserver","watch","concat","_toConsumableArray","immediate"],"mappings":"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"}