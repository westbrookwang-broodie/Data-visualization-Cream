/**
 * tdesign v1.3.1
 * (c) 2023 tdesign
 * @license MIT
 */

import { h, getCurrentInstance } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-14b6ba18.mjs';
import { c as camelCase_1 } from '../_chunks/dep-ac072285.mjs';
import { k as kebabCase_1 } from '../_chunks/dep-62d92cbc.mjs';
import { getParams, getDefaultNode } from '../utils/render-tnode.mjs';
import '../_chunks/dep-bec45e18.mjs';
import '../_chunks/dep-339a814a.mjs';
import '../_chunks/dep-dbb72607.mjs';
import '../_chunks/dep-ed4e2839.mjs';
import '../_chunks/dep-7c35655e.mjs';
import '../_chunks/dep-0f434994.mjs';
import '../_chunks/dep-f5c677eb.mjs';
import '../_chunks/dep-c6a9d3e7.mjs';
import '../_chunks/dep-546c20ab.mjs';
import '../_chunks/dep-8b01f133.mjs';
import '../_chunks/dep-80f4d76a.mjs';
import '../_chunks/dep-59f92248.mjs';
import '../_chunks/dep-cb8e09e3.mjs';
import '../_chunks/dep-094ccbd7.mjs';
import '../_chunks/dep-f694a61e.mjs';
import '../_chunks/dep-428963eb.mjs';
import '../_chunks/dep-019ee94c.mjs';
import '../_chunks/dep-3d1dcd03.mjs';
import '../_chunks/dep-0d7bf0e3.mjs';
import '../_chunks/dep-201da76e.mjs';
import '../_chunks/dep-11e36026.mjs';
import '../_chunks/dep-56623c1f.mjs';
import '../_chunks/dep-81ef22a5.mjs';

function handleSlots(instance, name, params) {
  var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;
  var finalParams = new Function("return " + h.toString())();
  if (params) {
    Object.assign(finalParams, params);
  }
  var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase_1(name)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, finalParams);
  if (node) return node;
  node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase_1(name)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, finalParams);
  if (node) return node;
  return null;
}
function isEmptyNode(node) {
  if ([void 0, null, ""].includes(node)) return true;
  var innerNodes = node instanceof Array ? node : [node];
  var r = innerNodes.filter(function (node2) {
    var _node2$type;
    return (node2 === null || node2 === void 0 ? void 0 : (_node2$type = node2.type) === null || _node2$type === void 0 ? void 0 : _node2$type.toString()) !== "Symbol(Comment)";
  });
  return !r.length;
}
var useTNodeJSX = function useTNodeJSX() {
  var instance = getCurrentInstance();
  return function (name, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var propsNode;
    if (Object.keys(instance.props).includes(name)) {
      propsNode = instance.props[name];
    }
    if (propsNode === false) return;
    if (propsNode === true) {
      return handleSlots(instance, name, params) || defaultNode;
    }
    if (isFunction_1(propsNode)) return propsNode(h, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);
    if (isPropsEmpty && (instance.slots[camelCase_1(name)] || instance.slots[kebabCase_1(name)])) {
      return handleSlots(instance, name, params);
    }
    return propsNode;
  };
};
var useTNodeDefault = function useTNodeDefault() {
  var renderTNodeJSX = useTNodeJSX();
  return function (name, options) {
    var defaultNode = getDefaultNode(options);
    return renderTNodeJSX(name, options) || defaultNode;
  };
};
var useContent = function useContent() {
  var renderTNodeJSX = useTNodeJSX();
  return function (name1, name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(name1, toParams);
    var node2 = renderTNodeJSX(name2, toParams);
    var res = isEmptyNode(node1) ? node2 : node1;
    return isEmptyNode(res) ? defaultNode : res;
  };
};

export { useContent, useTNodeDefault, useTNodeJSX };
//# sourceMappingURL=tnode.mjs.map
