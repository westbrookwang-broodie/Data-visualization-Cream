/**
 * tdesign v1.3.1
 * (c) 2023 tdesign
 * @license MIT
 */

import { ref, getCurrentInstance, inject, computed, h, provide } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-14b6ba18.mjs';
import { c as cloneDeep_1 } from '../_chunks/dep-c19618d4.mjs';
import { i as isString_1 } from '../_chunks/dep-81ef22a5.mjs';
import { c as configProviderInjectKey, d as defaultGlobalConfig, a as mergeWith } from '../_chunks/dep-f4a1f294.mjs';
import './type.mjs';
import '../_chunks/dep-bec45e18.mjs';
import '../_chunks/dep-339a814a.mjs';
import '../_chunks/dep-dbb72607.mjs';
import '../_chunks/dep-ed4e2839.mjs';
import '../_chunks/dep-cd3b0fa6.mjs';
import '../_chunks/dep-c9ce648e.mjs';
import '../_chunks/dep-4d256b91.mjs';
import '../_chunks/dep-0d7bf0e3.mjs';
import '../_chunks/dep-201da76e.mjs';
import '../_chunks/dep-e62c24d1.mjs';
import '../_chunks/dep-fe69e368.mjs';
import '../_chunks/dep-976f9516.mjs';
import '../_chunks/dep-11e36026.mjs';
import '../_chunks/dep-546c20ab.mjs';
import '../_chunks/dep-0f434994.mjs';
import '../_chunks/dep-f5c677eb.mjs';
import '../_chunks/dep-428963eb.mjs';
import '../_chunks/dep-019ee94c.mjs';
import '../_chunks/dep-3d1dcd03.mjs';
import '../_chunks/dep-72f2a0b4.mjs';
import '../_chunks/dep-56623c1f.mjs';
import '../_chunks/dep-f694a61e.mjs';
import '../_chunks/dep-d96da68c.mjs';
import '../_chunks/dep-99aaf398.mjs';
import '../_chunks/dep-9e4f2d05.mjs';
import '../_chunks/dep-2351c759.mjs';
import '../_chunks/dep-2d971205.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-3be1a481.mjs';
import '../_chunks/dep-b76005d0.mjs';

var globalConfigCopy = ref();
function useConfig(componentName) {
  var injectGlobalConfig = getCurrentInstance() ? inject(configProviderInjectKey, null) : globalConfigCopy;
  var mergedGlobalConfig = computed(function () {
    return (injectGlobalConfig === null || injectGlobalConfig === void 0 ? void 0 : injectGlobalConfig.value) || defaultGlobalConfig;
  });
  var globalConfig = computed(function () {
    return mergedGlobalConfig.value[componentName];
  });
  var classPrefix = computed(function () {
    return mergedGlobalConfig.value.classPrefix;
  });
  var t = function t(pattern) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var data = args[0];
    if (isString_1(pattern)) {
      if (!data) return pattern;
      var regular = /\{\s*([\w-]+)\s*\}/g;
      var translated = pattern.replace(regular, function (match, key) {
        if (data) {
          return String(data[key]);
        }
        return "";
      });
      return translated;
    }
    if (isFunction_1(pattern)) {
      if (!args.length) return pattern(h);
      return pattern.apply(void 0, args);
    }
    return "";
  };
  return {
    t: t,
    global: globalConfig,
    globalConfig: globalConfig,
    classPrefix: classPrefix
  };
}
var provideConfig = function provideConfig(props) {
  var defaultData = cloneDeep_1(defaultGlobalConfig);
  var mergedGlobalConfig = computed(function () {
    return mergeWith(defaultData, props.globalConfig);
  });
  provide(configProviderInjectKey, mergedGlobalConfig);
  if (!globalConfigCopy.value) {
    globalConfigCopy.value = mergedGlobalConfig.value;
  }
  return mergedGlobalConfig;
};

export { provideConfig, useConfig };
//# sourceMappingURL=useConfig.mjs.map
