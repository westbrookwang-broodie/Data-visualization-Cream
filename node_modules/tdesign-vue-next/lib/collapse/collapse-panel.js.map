{"version":3,"file":"collapse-panel.js","sources":["../../src/collapse/collapse-panel.tsx"],"sourcesContent":["import { defineComponent, ref, computed, inject, Ref, toRefs, Transition } from 'vue';\nimport props from './collapse-panel-props';\nimport FakeArrow from '../common-components/fake-arrow';\nimport { CollapseValue, TdCollapsePanelProps } from './type';\nimport { useTNodeJSX, useContent } from '../hooks/tnode';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport useCollapseAnimation from './useCollapseAnimation';\n\nexport default defineComponent({\n  name: 'TCollapsePanel',\n  props,\n  setup(props: TdCollapsePanelProps, { slots }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderContent = useContent();\n    const componentName = usePrefixClass('collapse-panel');\n    const disableClass = usePrefixClass('is-disabled');\n    const clickableClass = usePrefixClass('is-clickable');\n    const transitionClass = usePrefixClass('slide-down');\n    const { value, disabled, destroyOnCollapse } = toRefs(props);\n    const collapseValue: Ref<CollapseValue> = inject('collapseValue');\n    const updateCollapseValue: Function = inject('updateCollapseValue');\n    const getUniqId: Function = inject('getUniqId', () => undefined, false);\n    const {\n      defaultExpandAll,\n      disabled: disableAll,\n      expandIconPlacement,\n      expandOnRowClick,\n    } = inject<any>('collapseProps');\n    const renderParentTNode: Function = inject('renderParentTNode');\n    const innerValue = value.value || getUniqId();\n    if (defaultExpandAll.value) {\n      updateCollapseValue(innerValue);\n    }\n    const { beforeEnter, enter, afterEnter, beforeLeave, leave, afterLeave } = useCollapseAnimation();\n    const iconRef = ref<HTMLElement>();\n    const isDisabled = computed(() => disabled.value || disableAll.value);\n    const isActive = computed(() =>\n      collapseValue.value instanceof Array\n        ? collapseValue.value.includes(innerValue)\n        : collapseValue.value === innerValue,\n    );\n    const classes = computed(() => {\n      return [componentName.value, { [disableClass.value]: isDisabled.value }];\n    });\n    const panelExpandIcon = computed(() => slots.expandIcon || props.expandIcon);\n    const handleClick = (e: MouseEvent) => {\n      const canExpand = expandOnRowClick.value || e.currentTarget === iconRef.value;\n      if (canExpand && !isDisabled.value) {\n        updateCollapseValue(innerValue);\n      }\n      e.stopPropagation();\n    };\n    const renderDefaultIcon = () => {\n      return <FakeArrow overlayClassName={`${componentName.value}__icon--default`} />;\n    };\n    const renderIcon = () => {\n      const tNodeRender = panelExpandIcon.value === undefined ? renderParentTNode : renderTNodeJSX;\n      return (\n        <div\n          ref={iconRef}\n          class={`${componentName.value}__icon ${componentName.value}__icon--${expandIconPlacement.value} ${\n            isActive.value ? `${componentName.value}__icon--active` : ''\n          }`}\n          onClick={handleClick}\n        >\n          {tNodeRender('expandIcon', renderDefaultIcon())}\n        </div>\n      );\n    };\n    const renderBlank = () => {\n      return <div class={`${componentName.value}__header--blank`}></div>;\n    };\n    const renderHeader = () => {\n      const cls = [\n        `${componentName.value}__header`,\n        {\n          [clickableClass.value]: expandOnRowClick.value && !isDisabled.value,\n        },\n      ];\n      return (\n        <div class={cls} onClick={handleClick}>\n          {expandIconPlacement.value === 'left' && renderIcon()}\n          {renderTNodeJSX('header')}\n          {renderBlank()}\n          {renderTNodeJSX('headerRightContent')}\n          {expandIconPlacement.value === 'right' && renderIcon()}\n        </div>\n      );\n    };\n    const renderBodyByNormal = () => {\n      return (\n        <div v-show={isActive.value} class={`${componentName.value}__body`}>\n          <div class={`${componentName.value}__content`}>{renderContent('default', 'content')}</div>\n        </div>\n      );\n    };\n    const renderBodyDestroyOnCollapse = () => {\n      return isActive.value ? (\n        <div class={`${componentName.value}__body`}>\n          <div class={`${componentName.value}__content`}>{renderContent('default', 'content')}</div>\n        </div>\n      ) : null;\n    };\n    const renderBody = () => {\n      return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();\n    };\n    return () => {\n      return (\n        <div class={classes.value}>\n          <div class={`${componentName.value}__wrapper`}>\n            {renderHeader()}\n            <Transition\n              name={transitionClass.value}\n              onBeforeEnter={beforeEnter}\n              onEnter={enter}\n              onAfterEnter={afterEnter}\n              onBeforeLeave={beforeLeave}\n              onLeave={leave}\n              onAfterLeave={afterLeave}\n            >\n              {renderBody()}\n            </Transition>\n          </div>\n        </div>\n      );\n    };\n  },\n});\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","name","props","setup","slots","_ref","renderTNodeJSX","useTNodeJSX","renderContent","useContent","componentName","usePrefixClass","disableClass","clickableClass","transitionClass","_toRefs","toRefs","value","disabled","destroyOnCollapse","collapseValue","inject","updateCollapseValue","getUniqId","_inject","defaultExpandAll","disableAll","expandIconPlacement","expandOnRowClick","renderParentTNode","innerValue","_useCollapseAnimation","useCollapseAnimation","beforeEnter","enter","afterEnter","beforeLeave","leave","afterLeave","iconRef","ref","isDisabled","computed","isActive","Array","includes","classes","_defineProperty","panelExpandIcon","expandIcon","handleClick","e","canExpand","currentTarget","stopPropagation","renderDefaultIcon","_createVNode","FakeArrow","concat","renderIcon","tNodeRender","renderBlank","renderHeader","cls","renderBodyByNormal","_withDirectives","_vShow","renderBodyDestroyOnCollapse","renderBody","_slot","Transition"],"mappings":"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"}