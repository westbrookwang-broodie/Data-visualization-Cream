{"version":3,"file":"Panel.js","sources":["../../../src/cascader/components/Panel.tsx"],"sourcesContent":["import { defineComponent, PropType, computed } from 'vue';\n\nimport Item from './Item';\nimport { TreeNode, CascaderContextType } from '../interface';\nimport CascaderProps from '../props';\nimport { usePrefixClass, useConfig } from '../../hooks/useConfig';\nimport { useTNodeDefault } from '../../hooks/tnode';\n\nimport { getPanels } from '../core/helper';\nimport { expendClickEffect, valueChangeEffect } from '../core/effect';\n\nexport default defineComponent({\n  name: 'TCascaderSubPanel',\n  props: {\n    empty: CascaderProps.empty,\n    trigger: CascaderProps.trigger,\n    onChange: CascaderProps.onChange,\n    loading: CascaderProps.loading,\n    loadingText: CascaderProps.loadingText,\n    cascaderContext: {\n      type: Object as PropType<CascaderContextType>,\n    },\n  },\n\n  setup(props) {\n    const renderTNodeJSXDefault = useTNodeDefault();\n    const COMPONENT_NAME = usePrefixClass('cascader');\n    const { globalConfig } = useConfig('cascader');\n\n    const panels = computed(() => getPanels(props.cascaderContext.treeNodes));\n\n    const handleExpand = (node: TreeNode, trigger: 'hover' | 'click') => {\n      const { trigger: propsTrigger, cascaderContext } = props;\n      expendClickEffect(propsTrigger, trigger, node, cascaderContext);\n    };\n\n    const renderItem = (node: TreeNode) => (\n      <Item\n        key={node.value}\n        node={node}\n        cascaderContext={props.cascaderContext}\n        onClick={() => {\n          handleExpand(node, 'click');\n        }}\n        onMouseenter={() => {\n          handleExpand(node, 'hover');\n        }}\n        onChange={() => {\n          valueChangeEffect(node, props.cascaderContext);\n        }}\n      />\n    );\n\n    const renderList = (treeNodes: TreeNode[], isFilter = false, segment = true, key = '1') => (\n      <ul\n        class={[\n          `${COMPONENT_NAME.value}__menu`,\n          'narrow-scrollbar',\n          {\n            [`${COMPONENT_NAME.value}__menu--segment`]: segment,\n            [`${COMPONENT_NAME.value}__menu--filter`]: isFilter,\n          },\n        ]}\n        key={key}\n      >\n        {treeNodes.map((node: TreeNode) => renderItem(node))}\n      </ul>\n    );\n\n    const renderPanels = () => {\n      const { inputVal, treeNodes } = props.cascaderContext;\n      return inputVal\n        ? renderList(treeNodes, true)\n        : panels.value.map((treeNodes, index: number) =>\n            renderList(treeNodes, false, index !== panels.value.length - 1, `${COMPONENT_NAME.value}__menu${index}`),\n          );\n    };\n\n    return () => {\n      let content;\n      if (props.loading) {\n        content = renderTNodeJSXDefault(\n          'loadingText',\n          <div class={`${COMPONENT_NAME.value}__panel--empty`}>{globalConfig.value.loadingText}</div>,\n        );\n      } else {\n        content = panels.value.length\n          ? renderPanels()\n          : renderTNodeJSXDefault(\n              'empty',\n              <div class={`${COMPONENT_NAME.value}__panel--empty`}>{globalConfig.value.empty}</div>,\n            );\n      }\n      return (\n        <div\n          class={[\n            `${COMPONENT_NAME.value}__panel`,\n            { [`${COMPONENT_NAME.value}--normal`]: panels.value.length && !props.loading },\n          ]}\n        >\n          {content}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","empty","CascaderProps","trigger","onChange","loading","loadingText","cascaderContext","type","Object","setup","renderTNodeJSXDefault","useTNodeDefault","COMPONENT_NAME","usePrefixClass","_useConfig","useConfig","globalConfig","panels","computed","getPanels","treeNodes","handleExpand","node","propsTrigger","expendClickEffect","renderItem","_createVNode","Item","value","onClick","onMouseenter","valueChangeEffect","renderList","_ref","isFilter","arguments","length","undefined","segment","key","concat","_defineProperty","map","renderPanels","_props$cascaderContex","inputVal","index","content"],"mappings":"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"}