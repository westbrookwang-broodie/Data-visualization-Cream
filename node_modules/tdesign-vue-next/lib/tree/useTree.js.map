{"version":3,"file":"useTree.js","sources":["../../src/tree/useTree.tsx"],"sourcesContent":["import { ref, watch, toRefs, nextTick } from 'vue';\nimport isArray from 'lodash/isArray';\nimport { TdTreeProps } from './type';\nimport TreeItem from './tree-item';\n\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\n\nimport useDefaultValue from '../hooks/useDefaultValue';\nimport useVModel from '../hooks/useVModel';\nimport useOnDrag from './hooks/useOnDrag';\nimport { getMark, getNode, getStoreConfig } from './util';\n\nimport { TypeEventState, TypeTreeNodeModel } from './interface';\n\nexport default function useTree(props: TdTreeProps) {\n  const treeStore = ref();\n  const cacheMap = new Map();\n  const treeNodeViews = ref([]);\n  const { expanded, actived, value, modelValue } = toRefs(props);\n\n  const [innerChecked, setInnerChecked] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n  const [innerActived, setInnerActived] = useDefaultValue(actived, props.defaultActived, props.onActive, 'actived');\n  const [innerExpanded, setInnerExpanded] = useDefaultValue(\n    expanded,\n    props.defaultExpanded,\n    props.onExpand,\n    'expanded',\n  );\n\n  // 懒加载回调\n  const handleLoad = (info: TypeEventState) => {\n    const { node } = info;\n    const ctx = {\n      node: node.getModel(),\n    };\n    if (innerChecked.value && innerChecked.value.length > 0) {\n      treeStore.value.replaceChecked(innerChecked.value);\n    }\n    if (innerExpanded.value && innerExpanded.value.length > 0) {\n      treeStore.value.replaceExpanded(innerExpanded.value);\n    }\n    if (innerActived.value && innerActived.value.length > 0) {\n      treeStore.value.replaceActived(innerActived.value);\n    }\n    props.onLoad?.(ctx);\n  };\n\n  // 点击回调\n  const handleClick = (state: TypeEventState) => {\n    const { expandOnClickNode } = props;\n    const { mouseEvent, event, node } = state;\n\n    if (!node) {\n      return;\n    }\n    let shouldExpand = expandOnClickNode;\n    let shouldActive = !props.disabled && !node.disabled;\n    ['trigger', 'ignore'].forEach((markName) => {\n      const mark = getMark(markName, event.target as HTMLElement, event.currentTarget as HTMLElement);\n      const markValue = mark?.value || '';\n      if (markValue.indexOf('expand') >= 0) {\n        if (markName === 'trigger') {\n          shouldExpand = true;\n        } else if (markName === 'ignore') {\n          // shouldExpand = false;\n        }\n      }\n      if (markValue.indexOf('active') >= 0) {\n        if (markName === 'ignore') {\n          shouldActive = false;\n        }\n      }\n    });\n\n    const ctx = {\n      node: node.getModel(),\n      e: mouseEvent,\n    };\n\n    if (shouldExpand) {\n      const tnode = getNode(treeStore.value, node);\n      const expanded = node.setExpanded(!tnode.isExpanded());\n      setInnerExpanded(expanded, ctx);\n    }\n\n    if (shouldActive) {\n      const tnode = getNode(treeStore.value, node);\n      const actived = node.setActived(!tnode.isActived());\n      setInnerActived(actived, ctx);\n    }\n\n    props.onClick?.(ctx);\n  };\n\n  const handleChange = (state: TypeEventState) => {\n    const { disabled } = props;\n    const { node, mouseEvent } = state;\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n\n    const tnode = getNode(treeStore.value, node);\n    const checked = node.setChecked(!tnode.isChecked());\n    setInnerChecked(checked, {\n      node: node.getModel(),\n      e: mouseEvent,\n    });\n  };\n\n  // 节点渲染\n  const renderTreeNodeViews = () => {\n    const nodes = treeStore.value.getNodes();\n\n    treeNodeViews.value = nodes\n      .filter((node: TreeNode) => node.visible)\n      .map((node: TreeNode) => {\n        // 如果节点已经存在，则使用缓存节点\n        let nodeView = cacheMap.get(node.value);\n        // 如果节点未曾创建，则临时创建\n        if (!nodeView) {\n          // 初次仅渲染可显示的节点\n          // 不存在节点视图，则创建该节点视图并插入到当前位置\n          nodeView = (\n            <TreeItem\n              key={node.value}\n              node={node}\n              onChange={handleChange}\n              onClick={handleClick}\n              expandOnClickNode={props.expandOnClickNode}\n            />\n          );\n          cacheMap.set(node.value, nodeView);\n        }\n        return nodeView;\n      });\n\n    // 更新缓存后，被删除的节点要移除掉，避免内存泄露\n    nextTick(() => {\n      cacheMap.forEach((view, value: string) => {\n        if (!treeStore.value.getNode(value)) {\n          cacheMap.delete(value);\n        }\n      });\n    });\n  };\n\n  useOnDrag(treeStore);\n\n  // 更新展开状态\n  const updateExpanded = () => {\n    const { expandParent } = props;\n    // 初始化展开状态\n    // 校验是否自动展开父节点\n    if (isArray(innerExpanded.value)) {\n      const expandedMap = new Map();\n      innerExpanded.value.forEach((val) => {\n        expandedMap.set(val, true);\n        if (expandParent) {\n          const node = treeStore.value.getNode(val);\n          node.getParents().forEach((tn: TypeTreeNodeModel) => {\n            expandedMap.set(tn.value, true);\n          });\n        }\n      });\n      const expandedArr = Array.from(expandedMap.keys());\n      treeStore.value.setExpanded(expandedArr);\n    }\n  };\n\n  // 初始化\n  const init = () => {\n    let options = props.data;\n    const store = new TreeStore({\n      ...getStoreConfig(props),\n      onLoad: (info: TypeEventState) => {\n        handleLoad(info);\n      },\n      onUpdate: () => {\n        renderTreeNodeViews();\n      },\n    });\n\n    // 初始化数据\n    treeStore.value = store;\n\n    if (!isArray(options)) {\n      options = [];\n    }\n    store.append(options);\n\n    // 刷新节点，必须在配置选中之前执行\n    // 这样选中态联动判断才能找到父节点\n    store.refreshNodes();\n\n    // 初始化选中状态\n    if (isArray(innerChecked.value)) {\n      store.setChecked(innerChecked.value);\n    }\n\n    updateExpanded();\n\n    // 初始化激活状态\n    if (isArray(innerActived.value)) {\n      store.setActived(innerActived.value);\n    }\n\n    // 树的数据初始化之后，需要立即进行一次视图刷新\n    renderTreeNodeViews();\n  };\n\n  // ------ 监听start ------\n\n  // data变化，重构 tree\n  watch(\n    () => props.data,\n    (list) => {\n      list = props.data;\n      cacheMap.clear();\n\n      treeStore.value.reload(list);\n      // 刷新节点，必须在配置选中之前执行\n      // 这样选中态联动判断才能找到父节点\n      treeStore.value.refreshNodes();\n      if (!list.length) return;\n      // 初始化选中状态\n      if (isArray(innerChecked.value)) {\n        treeStore.value.setChecked(innerChecked.value);\n      }\n\n      // 更新展开状态\n      updateExpanded();\n\n      // 初始化激活状态\n      if (isArray(innerActived.value)) {\n        treeStore.value.setActived(innerActived.value);\n      }\n      // 刷新节点状态\n      treeStore.value.refreshState();\n    },\n  );\n\n  // tree插件配置变化\n  watch(\n    () => getStoreConfig(props),\n    () => {\n      if (!treeStore.value) return;\n      treeStore.value.setConfig(getStoreConfig(props));\n    },\n  );\n  watch(innerChecked, (nVal) => {\n    treeStore.value.replaceChecked(nVal);\n  });\n  watch(innerExpanded, (nVal) => {\n    treeStore.value.replaceExpanded(nVal);\n  });\n  watch(innerActived, (nVal) => {\n    treeStore.value.replaceActived(nVal);\n  });\n\n  // 初始化树\n  init();\n\n  return {\n    treeStore,\n    treeNodeViews,\n  };\n}\n"],"names":["useTree","props","treeStore","ref","cacheMap","Map","treeNodeViews","_toRefs","toRefs","expanded","actived","value","modelValue","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","innerChecked","setInnerChecked","_useDefaultValue","useDefaultValue","defaultActived","onActive","_useDefaultValue2","innerActived","setInnerActived","_useDefaultValue3","defaultExpanded","onExpand","_useDefaultValue4","innerExpanded","setInnerExpanded","handleLoad","info","_props$onLoad","node","ctx","getModel","length","replaceChecked","replaceExpanded","replaceActived","onLoad","call","handleClick","state","_props$onClick","expandOnClickNode","mouseEvent","event","shouldExpand","shouldActive","disabled","forEach","markName","mark","getMark","target","currentTarget","markValue","indexOf","e","tnode","getNode","setExpanded","isExpanded","setActived","isActived","onClick","handleChange","checked","setChecked","isChecked","renderTreeNodeViews","nodes","getNodes","filter","visible","map","nodeView","get","_createVNode","TreeItem","set","nextTick","view","useOnDrag","updateExpanded","expandParent","isArray","expandedMap","val","getParents","tn","expandedArr","Array","from","keys","init","options","data","store","TreeStore","_objectSpread","getStoreConfig","onUpdate","append","refreshNodes","watch","list","clear","reload","refreshState","setConfig","nVal"],"mappings":"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"}