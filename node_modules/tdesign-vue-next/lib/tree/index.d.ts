import { TdTreeProps } from './type';
import './style';
export * from './type';
export declare type TreeProps = TdTreeProps;
export declare const Tree: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            data: import("..").TreeOptionData<string | number>[];
            transition: boolean;
            value: import("./type").TreeNodeValue[];
            label: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
            line: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
            draggable: boolean;
            lazy: boolean;
            disabled: boolean;
            empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
            expanded: import("./type").TreeNodeValue[];
            icon: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
            modelValue: import("./type").TreeNodeValue[];
            defaultValue: import("./type").TreeNodeValue[];
            hover: boolean;
            defaultExpanded: import("./type").TreeNodeValue[];
            expandMutex: boolean;
            actived: import("./type").TreeNodeValue[];
            disableCheck: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
            valueMode: "all" | "onlyLeaf" | "parentFirst";
            checkable: boolean;
            activable: boolean;
            activeMultiple: boolean;
            checkStrictly: boolean;
            expandAll: boolean;
            expandLevel: number;
            expandParent: boolean;
            allowFoldNodeOnFilter: boolean;
            expandOnClickNode: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            activable: BooleanConstructor;
            actived: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: any;
            };
            defaultActived: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            };
            activeMultiple: BooleanConstructor;
            allowFoldNodeOnFilter: BooleanConstructor;
            checkable: BooleanConstructor;
            checkProps: {
                type: import("vue").PropType<import("..").TdCheckboxProps>;
            };
            checkStrictly: BooleanConstructor;
            data: {
                type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
                default: () => import("..").TreeOptionData<string | number>[];
            };
            disableCheck: {
                type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
                default: boolean;
            };
            disabled: BooleanConstructor;
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
                default: string;
            };
            expandAll: BooleanConstructor;
            expanded: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: any;
            };
            defaultExpanded: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: () => import("./type").TreeNodeValue[];
            };
            expandLevel: {
                type: NumberConstructor;
                default: number;
            };
            expandMutex: BooleanConstructor;
            expandOnClickNode: BooleanConstructor;
            expandParent: BooleanConstructor;
            filter: {
                type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
            };
            hover: BooleanConstructor;
            icon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
                default: boolean;
            };
            keys: {
                type: import("vue").PropType<import("./type").TreeKeysType>;
            };
            label: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
                default: boolean;
            };
            lazy: {
                type: BooleanConstructor;
                default: boolean;
            };
            line: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
                default: boolean;
            };
            load: {
                type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
            };
            operations: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
            };
            transition: {
                type: BooleanConstructor;
                default: boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: import("./type").TreeNodeValue[];
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: import("./type").TreeNodeValue[];
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: () => import("./type").TreeNodeValue[];
            };
            valueMode: {
                type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
                default: "all" | "onlyLeaf" | "parentFirst";
                validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
            };
            onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            }) => void>;
            onClick: import("vue").PropType<(context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
                e: MouseEvent;
            }) => void>;
            onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
                e: MouseEvent;
            }) => void>;
            onLoad: import("vue").PropType<(context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "data" | "transition" | "value" | "label" | "line" | "draggable" | "lazy" | "disabled" | "empty" | "expanded" | "icon" | "modelValue" | "defaultValue" | "hover" | "defaultExpanded" | "expandMutex" | "actived" | "disableCheck" | "valueMode" | "checkable" | "activable" | "activeMultiple" | "checkStrictly" | "expandAll" | "expandLevel" | "expandParent" | "allowFoldNodeOnFilter" | "expandOnClickNode">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            activable: BooleanConstructor;
            actived: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: any;
            };
            defaultActived: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            };
            activeMultiple: BooleanConstructor;
            allowFoldNodeOnFilter: BooleanConstructor;
            checkable: BooleanConstructor;
            checkProps: {
                type: import("vue").PropType<import("..").TdCheckboxProps>;
            };
            checkStrictly: BooleanConstructor;
            data: {
                type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
                default: () => import("..").TreeOptionData<string | number>[];
            };
            disableCheck: {
                type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
                default: boolean;
            };
            disabled: BooleanConstructor;
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
                default: string;
            };
            expandAll: BooleanConstructor;
            expanded: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: any;
            };
            defaultExpanded: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: () => import("./type").TreeNodeValue[];
            };
            expandLevel: {
                type: NumberConstructor;
                default: number;
            };
            expandMutex: BooleanConstructor;
            expandOnClickNode: BooleanConstructor;
            expandParent: BooleanConstructor;
            filter: {
                type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
            };
            hover: BooleanConstructor;
            icon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
                default: boolean;
            };
            keys: {
                type: import("vue").PropType<import("./type").TreeKeysType>;
            };
            label: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
                default: boolean;
            };
            lazy: {
                type: BooleanConstructor;
                default: boolean;
            };
            line: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
                default: boolean;
            };
            load: {
                type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
            };
            operations: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
            };
            transition: {
                type: BooleanConstructor;
                default: boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: import("./type").TreeNodeValue[];
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: import("./type").TreeNodeValue[];
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TreeNodeValue[]>;
                default: () => import("./type").TreeNodeValue[];
            };
            valueMode: {
                type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
                default: "all" | "onlyLeaf" | "parentFirst";
                validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
            };
            onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            }) => void>;
            onClick: import("vue").PropType<(context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
                e: MouseEvent;
            }) => void>;
            onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
                e: MouseEvent;
            }) => void>;
            onLoad: import("vue").PropType<(context: {
                node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            data: import("..").TreeOptionData<string | number>[];
            transition: boolean;
            value: import("./type").TreeNodeValue[];
            label: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
            line: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
            draggable: boolean;
            lazy: boolean;
            disabled: boolean;
            empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
            expanded: import("./type").TreeNodeValue[];
            icon: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
            modelValue: import("./type").TreeNodeValue[];
            defaultValue: import("./type").TreeNodeValue[];
            hover: boolean;
            defaultExpanded: import("./type").TreeNodeValue[];
            expandMutex: boolean;
            actived: import("./type").TreeNodeValue[];
            disableCheck: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
            valueMode: "all" | "onlyLeaf" | "parentFirst";
            checkable: boolean;
            activable: boolean;
            activeMultiple: boolean;
            checkStrictly: boolean;
            expandAll: boolean;
            expandLevel: number;
            expandParent: boolean;
            allowFoldNodeOnFilter: boolean;
            expandOnClickNode: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        activable: BooleanConstructor;
        actived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: any;
        };
        defaultActived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        };
        activeMultiple: BooleanConstructor;
        allowFoldNodeOnFilter: BooleanConstructor;
        checkable: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disableCheck: {
            type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
            default: boolean;
        };
        disabled: BooleanConstructor;
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        expandAll: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        expandLevel: {
            type: NumberConstructor;
            default: number;
        };
        expandMutex: BooleanConstructor;
        expandOnClickNode: BooleanConstructor;
        expandParent: BooleanConstructor;
        filter: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
        };
        hover: BooleanConstructor;
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        keys: {
            type: import("vue").PropType<import("./type").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        line: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
        };
        operations: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
        };
        transition: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e: MouseEvent;
        }) => void>;
        onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e: MouseEvent;
        }) => void>;
        onLoad: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    activable: BooleanConstructor;
    actived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: any;
    };
    defaultActived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
    };
    activeMultiple: BooleanConstructor;
    allowFoldNodeOnFilter: BooleanConstructor;
    checkable: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
        default: () => import("..").TreeOptionData<string | number>[];
    };
    disableCheck: {
        type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    expandAll: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    expandLevel: {
        type: NumberConstructor;
        default: number;
    };
    expandMutex: BooleanConstructor;
    expandOnClickNode: BooleanConstructor;
    expandParent: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
    };
    hover: BooleanConstructor;
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    keys: {
        type: import("vue").PropType<import("./type").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
    };
    operations: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: import("./type").TreeNodeValue[];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: import("./type").TreeNodeValue[];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    valueMode: {
        type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
    };
    onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        e: MouseEvent;
    }) => void>;
    onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        e: MouseEvent;
    }) => void>;
    onLoad: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    data: import("..").TreeOptionData<string | number>[];
    transition: boolean;
    value: import("./type").TreeNodeValue[];
    label: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
    line: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    draggable: boolean;
    lazy: boolean;
    disabled: boolean;
    empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    expanded: import("./type").TreeNodeValue[];
    icon: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
    modelValue: import("./type").TreeNodeValue[];
    defaultValue: import("./type").TreeNodeValue[];
    hover: boolean;
    defaultExpanded: import("./type").TreeNodeValue[];
    expandMutex: boolean;
    actived: import("./type").TreeNodeValue[];
    disableCheck: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
    valueMode: "all" | "onlyLeaf" | "parentFirst";
    checkable: boolean;
    activable: boolean;
    activeMultiple: boolean;
    checkStrictly: boolean;
    expandAll: boolean;
    expandLevel: number;
    expandParent: boolean;
    allowFoldNodeOnFilter: boolean;
    expandOnClickNode: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin<any[]>;
export default Tree;
