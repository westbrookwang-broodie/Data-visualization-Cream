{"version":3,"file":"props.js","sources":["../../src/upload/props.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { TdUploadProps } from './type';\nimport { PropType } from 'vue';\n\nexport default {\n  /** 文件名过长时，需要省略中间的文本，保留首尾文本。示例：[10, 7]，表示首尾分别保留的文本长度 */\n  abridgeName: {\n    type: Array as PropType<TdUploadProps['abridgeName']>,\n  },\n  /** 接受上传的文件类型，[查看 W3C示例](https://www.w3schools.com/tags/att_input_accept.asp)，[查看 MDN 示例](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file) */\n  accept: {\n    type: String,\n    default: '',\n  },\n  /** 上传接口。设接口响应数据为字段 `response`，那么 `response.error` 存在时会判断此次上传失败，并显示错误文本信息；`response.url` 会作为文件上传成功后的地址，并使用该地址显示图片或文件 */\n  action: {\n    type: String,\n    default: '',\n  },\n  /** 是否允许重复上传相同文件名的文件 */\n  allowUploadDuplicateFile: Boolean,\n  /** 是否在选择文件后自动发起请求上传文件 */\n  autoUpload: {\n    type: Boolean,\n    default: true,\n  },\n  /** 如果是自动上传模式 `autoUpload=true`，表示全部文件上传之前的钩子函数，函数参数为上传的文件，函数返回值决定是否继续上传，若返回值为 `false` 则终止上传。<br/>如果是非自动上传模式 `autoUpload=false`，则函数返回值为 `false` 时表示不触发文件变化 */\n  beforeAllFilesUpload: {\n    type: Function as PropType<TdUploadProps['beforeAllFilesUpload']>,\n  },\n  /** 如果是自动上传模式 `autoUpload=true`，表示单个文件上传之前的钩子函数，若函数返回值为 `false` 则表示不上传当前文件。<br/>如果是非自动上传模式 `autoUpload=false`，函数返回值为 `false` 时表示从上传文件中剔除当前文件 */\n  beforeUpload: {\n    type: Function as PropType<TdUploadProps['beforeUpload']>,\n  },\n  /** 上传请求所需的额外字段，默认字段有 `file`，表示文件信息。可以添加额外的文件名字段，如：`{file_name: \"custom-file-name.txt\"}`。`autoUpload=true` 时有效。也可以使用 `formatRequest` 完全自定义上传请求的字段 */\n  data: {\n    type: Object as PropType<TdUploadProps['data']>,\n  },\n  /** 非拖拽场景，指触发上传的元素，如：“选择文件”。如果是拖拽场景，则是指拖拽区域 */\n  default: {\n    type: [String, Function] as PropType<TdUploadProps['default']>,\n  },\n  /** 是否禁用 */\n  disabled: Boolean,\n  /** 用于自定义拖拽区域，`theme=custom` 且 `draggable=true` 时有效 */\n  dragContent: {\n    type: [String, Function] as PropType<TdUploadProps['dragContent']>,\n  },\n  /** 是否启用拖拽上传，不同的组件风格默认值不同。`theme=file` 或 `theme=image` 时有效 */\n  draggable: {\n    type: Boolean,\n    default: undefined,\n  },\n  /** 用于完全自定义文件列表内容 */\n  fileListDisplay: {\n    type: Function as PropType<TdUploadProps['fileListDisplay']>,\n  },\n  /** 已上传文件列表，同 `value`。TS 类型：`UploadFile` */\n  files: {\n    type: Array as PropType<TdUploadProps['files']>,\n    default: undefined,\n  },\n  /** 已上传文件列表，同 `value`。TS 类型：`UploadFile`，非受控属性 */\n  defaultFiles: {\n    type: Array as PropType<TdUploadProps['defaultFiles']>,\n    default: (): TdUploadProps['defaultFiles'] => [],\n  },\n  /** 转换文件 `UploadFile` 的数据结构，可新增或修改 `UploadFile` 的属性，注意不能删除 `UploadFile` 属性。`action` 存在时有效 */\n  format: {\n    type: Function as PropType<TdUploadProps['format']>,\n  },\n  /** 用于新增或修改文件上传请求参数。`action` 存在时有效。一个请求上传一个文件时，默认请求字段有 `file`；<br/>一个请求上传多个文件时，默认字段有 `file[0]/file[1]/file[2]/.../length`，其中 `length` 表示本次上传的文件数量。<br/>⚠️非常注意，此处的 `file[0]/file[1]` 仅仅是一个字段名，并非表示 `file` 是一个数组，接口获取字段时注意区分。<br/>可以使用 `name` 定义 `file` 字段的别名，也可以使用 `formatRequest` 自定义任意字段 */\n  formatRequest: {\n    type: Function as PropType<TdUploadProps['formatRequest']>,\n  },\n  /** 用于格式化文件上传后的接口响应数据，`response` 便是接口响应的原始数据。`action` 存在时有效。<br/> 此函数的返回值 `error` 或 `response.error` 会作为错误文本提醒，如果存在会判定为本次上传失败。<br/> 此函数的返回值 `url` 或 `response.url` 会作为上传成功后的链接 */\n  formatResponse: {\n    type: Function as PropType<TdUploadProps['formatResponse']>,\n  },\n  /** 设置上传的请求头部，`action` 存在时有效 */\n  headers: {\n    type: Object as PropType<TdUploadProps['headers']>,\n  },\n  /** 用于添加属性到 HTML 元素 `input` */\n  inputAttributes: {\n    type: Object as PropType<TdUploadProps['inputAttributes']>,\n  },\n  /** 多个文件是否作为一个独立文件包，整体替换，整体删除。不允许追加文件，只允许替换文件。`theme=file-flow` 时有效 */\n  isBatchUpload: Boolean,\n  /** 上传组件文本语言配置，支持自定义配置组件中的全部文本。优先级高于全局配置中语言 */\n  locale: {\n    type: Object as PropType<TdUploadProps['locale']>,\n  },\n  /** 用于控制文件上传数量，值为 0 则不限制 */\n  max: {\n    type: Number,\n    default: 0,\n  },\n  /** HTTP 请求类型 */\n  method: {\n    type: String as PropType<TdUploadProps['method']>,\n    default: 'POST' as TdUploadProps['method'],\n    validator(val: TdUploadProps['method']): boolean {\n      if (!val) return true;\n      return ['POST', 'GET', 'PUT', 'OPTION', 'PATCH', 'post', 'get', 'put', 'option', 'patch'].includes(val);\n    },\n  },\n  /** 模拟进度间隔时间，单位：毫秒，默认：300。由于原始的上传请求，小文件上传进度只有 0 和 100，故而新增模拟进度，每间隔 `mockProgressDuration` 毫秒刷新一次模拟进度。小文件设置小一点，大文件设置大一点。注意：当 `useMockProgress` 为真时，当前设置有效 */\n  mockProgressDuration: {\n    type: Number,\n  },\n  /** 支持多文件上传 */\n  multiple: Boolean,\n  /** 文件上传时的名称 */\n  name: {\n    type: String,\n    default: 'file',\n  },\n  /** 占位符 */\n  placeholder: {\n    type: String,\n    default: '',\n  },\n  /** 自定义上传方法。返回值 `status` 表示上传成功或失败；`error` 或 `response.error` 表示上传失败的原因；<br/>`response` 表示请求上传成功后的返回数据，`response.url` 表示上传成功后的图片/文件地址，`response.files` 表示一个请求上传多个文件/图片后的返回值。<br/>示例一：`{ status: 'fail', error: '上传失败', response }`。<br/>示例二：`{ status: 'success', response: { url: 'https://tdesign.gtimg.com/site/avatar.jpg' } }`。<br/> 示例三：`{ status: 'success', files: [{ url: 'https://xxx.png', name: 'xxx.png' }]}` */\n  requestMethod: {\n    type: Function as PropType<TdUploadProps['requestMethod']>,\n  },\n  /** 是否显示上传进度 */\n  showUploadProgress: {\n    type: Boolean,\n    default: true,\n  },\n  /** 图片文件大小限制，默认单位 KB。可选单位有：`'B' | 'KB' | 'MB' | 'GB'`。示例一：`1000`。示例二：`{ size: 2, unit: 'MB', message: '图片大小不超过 {sizeLimit} MB' }` */\n  sizeLimit: {\n    type: [Number, Object] as PropType<TdUploadProps['sizeLimit']>,\n  },\n  /** 文件上传提示文本状态 */\n  status: {\n    type: String as PropType<TdUploadProps['status']>,\n    validator(val: TdUploadProps['status']): boolean {\n      if (!val) return true;\n      return ['default', 'success', 'warning', 'error'].includes(val);\n    },\n  },\n  /** 组件风格。custom 表示完全自定义风格；file 表示默认文件上传风格；file-input 表示输入框形式的文件上传；file-flow 表示文件批量上传；image 表示默认图片上传风格；image-flow 表示图片批量上传 */\n  theme: {\n    type: String as PropType<TdUploadProps['theme']>,\n    default: 'file' as TdUploadProps['theme'],\n    validator(val: TdUploadProps['theme']): boolean {\n      if (!val) return true;\n      return ['custom', 'file', 'file-input', 'file-flow', 'image', 'image-flow'].includes(val);\n    },\n  },\n  /** 组件下方文本提示，可以使用 `status` 定义文本 */\n  tips: {\n    type: [String, Function] as PropType<TdUploadProps['tips']>,\n  },\n  /** 触发上传的元素，`files` 指本次显示的全部文件 */\n  trigger: {\n    type: Function as PropType<TdUploadProps['trigger']>,\n  },\n  /** 透传选择按钮全部属性 */\n  triggerButtonProps: {\n    type: Object as PropType<TdUploadProps['triggerButtonProps']>,\n  },\n  /** 是否在同一个请求中上传全部文件，默认一个请求上传一个文件。多文件上传时有效 */\n  uploadAllFilesInOneRequest: Boolean,\n  /** 是否在请求时间超过 300ms 后显示模拟进度。上传进度有模拟进度和真实进度两种。一般大小的文件上传，真实的上传进度只有 0 和 100，不利于交互呈现，因此组件内置模拟上传进度。真实上传进度一般用于大文件上传。 */\n  useMockProgress: {\n    type: Boolean,\n    default: true,\n  },\n  /** 已上传文件列表，同 `files`。TS 类型：`UploadFile` */\n  value: {\n    type: Array as PropType<TdUploadProps['value']>,\n    default: undefined,\n  },\n  modelValue: {\n    type: Array as PropType<TdUploadProps['value']>,\n    default: undefined,\n  },\n  /** 已上传文件列表，同 `files`。TS 类型：`UploadFile`，非受控属性 */\n  defaultValue: {\n    type: Array as PropType<TdUploadProps['defaultValue']>,\n    default: (): TdUploadProps['defaultValue'] => [],\n  },\n  /** 上传请求时是否携带 cookie */\n  withCredentials: Boolean,\n  /** 点击「取消上传」时触发 */\n  onCancelUpload: Function as PropType<TdUploadProps['onCancelUpload']>,\n  /** 已上传文件列表发生变化时触发，`trigger` 表示触发本次的来源 */\n  onChange: Function as PropType<TdUploadProps['onChange']>,\n  /** 进入拖拽区域时触发 */\n  onDragenter: Function as PropType<TdUploadProps['onDragenter']>,\n  /** 离开拖拽区域时触发 */\n  onDragleave: Function as PropType<TdUploadProps['onDragleave']>,\n  /** 拖拽结束时触发 */\n  onDrop: Function as PropType<TdUploadProps['onDrop']>,\n  /** 上传失败后触发。`response` 指接口响应结果，`response.error` 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 `error` 字段，可以使用 `formatResponse` 格式化 `response` 数据结构。如果是多文件多请求上传场景，请到事件 `onOneFileFail` 中查看 `response` */\n  onFail: Function as PropType<TdUploadProps['onFail']>,\n  /** 多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发 */\n  onOneFileFail: Function as PropType<TdUploadProps['onOneFileFail']>,\n  /** 单个文件上传成功后触发，在多文件场景下会触发多次。`context.file` 表示当前上传成功的单个文件，`context.response` 表示上传请求的返回数据 */\n  onOneFileSuccess: Function as PropType<TdUploadProps['onOneFileSuccess']>,\n  /** 点击图片预览时触发，文件没有预览 */\n  onPreview: Function as PropType<TdUploadProps['onPreview']>,\n  /** 上传进度变化时触发，真实进度和模拟进度都会触发。`type=real` 表示真实上传进度，`type=mock` 表示模拟上传进度 */\n  onProgress: Function as PropType<TdUploadProps['onProgress']>,\n  /** 移除文件时触发 */\n  onRemove: Function as PropType<TdUploadProps['onRemove']>,\n  /** 选择文件或图片之后，上传之前，触发该事件 */\n  onSelectChange: Function as PropType<TdUploadProps['onSelectChange']>,\n  /** 上传成功后触发。<br/>`context.currentFiles` 表示当次请求上传的文件（无论成功或失败），`context.fileList` 表示上传成功后的文件，`context.response` 表示上传请求的返回数据。<br/>`context.results` 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。<br /> */\n  onSuccess: Function as PropType<TdUploadProps['onSuccess']>,\n  /** 文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、`beforeAllFilesUpload` 返回值为假、`beforeUpload` 返回值为假等场景会触发。<br/>注意：如果设置允许上传同名文件，即 `allowUploadDuplicateFile=true`，则不会因为文件重名触发该事件。<br/>结合 `status` 和 `tips` 可以在组件中呈现不同类型的错误（或告警）提示 */\n  onValidate: Function as PropType<TdUploadProps['onValidate']>,\n  /** 待上传文件列表发生变化时触发。`context.files` 表示事件参数为待上传文件，`context.trigger` 引起此次变化的触发来源 */\n  onWaitingUploadFilesChange: Function as PropType<TdUploadProps['onWaitingUploadFilesChange']>,\n};\n"],"names":["abridgeName","type","Array","accept","String","action","allowUploadDuplicateFile","Boolean","autoUpload","beforeAllFilesUpload","Function","beforeUpload","data","Object","disabled","dragContent","draggable","fileListDisplay","files","defaultFiles","_default","format","formatRequest","formatResponse","headers","inputAttributes","isBatchUpload","locale","max","Number","method","validator","val","includes","mockProgressDuration","multiple","name","placeholder","requestMethod","showUploadProgress","sizeLimit","status","theme","tips","trigger","triggerButtonProps","uploadAllFilesInOneRequest","useMockProgress","value","modelValue","defaultValue","withCredentials","onCancelUpload","onChange","onDragenter","onDragleave","onDrop","onFail","onOneFileFail","onOneFileSuccess","onPreview","onProgress","onRemove","onSelectChange","onSuccess","onValidate","onWaitingUploadFilesChange"],"mappings":"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"}